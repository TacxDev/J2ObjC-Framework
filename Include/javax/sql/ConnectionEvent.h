//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/sql/ConnectionEvent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSqlConnectionEvent")
#ifdef RESTRICT_JavaxSqlConnectionEvent
#define INCLUDE_ALL_JavaxSqlConnectionEvent 0
#else
#define INCLUDE_ALL_JavaxSqlConnectionEvent 1
#endif
#undef RESTRICT_JavaxSqlConnectionEvent

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSqlConnectionEvent_) && (INCLUDE_ALL_JavaxSqlConnectionEvent || defined(INCLUDE_JavaxSqlConnectionEvent))
#define JavaxSqlConnectionEvent_

#define RESTRICT_JavaUtilEventObject 1
#define INCLUDE_JavaUtilEventObject 1
#include "java/util/EventObject.h"

@class JavaLangLong;
@class JavaSqlSQLException;
@protocol JavaxSqlPooledConnection;

/*!
 @brief <P>An <code>Event</code> object that provides information about the
  source of a connection-related event.
 <code>ConnectionEvent</code>
  objects are generated when an application closes a pooled connection
  and when an error occurs.  The <code>ConnectionEvent</code> object
  contains two kinds of information: 
 <UL>
    <LI>The pooled connection closed by the application
    <LI>In the case of an error event, the <code>SQLException</code>
        about to be thrown to the application 
 </UL>
 @since 1.4
 */
@interface JavaxSqlConnectionEvent : JavaUtilEventObject

#pragma mark Public

/*!
 @brief <P>Constructs a <code>ConnectionEvent</code> object initialized with
  the given <code>PooledConnection</code> object.
 <code>SQLException</code>
  defaults to <code>null</code>.
 @param con the pooled connection that is the source of the event
 @throw IllegalArgumentExceptionif <code>con</code> is null.
 */
- (instancetype __nonnull)initWithJavaxSqlPooledConnection:(id<JavaxSqlPooledConnection>)con;

/*!
 @brief <P>Constructs a <code>ConnectionEvent</code> object initialized with
  the given <code>PooledConnection</code> object and 
 <code>SQLException</code> object.
 @param con the pooled connection that is the source of the event
 @param ex the SQLException about to be thrown to the application
 @throw IllegalArgumentExceptionif <code>con</code> is null.
 */
- (instancetype __nonnull)initWithJavaxSqlPooledConnection:(id<JavaxSqlPooledConnection>)con
                                   withJavaSqlSQLException:(JavaSqlSQLException *)ex;

/*!
 @brief <P>Retrieves the <code>SQLException</code> for this 
 <code>ConnectionEvent</code> object.May be <code>null</code>.
 @return the SQLException about to be thrown or <code>null</code>
 */
- (JavaSqlSQLException *)getSQLException;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSqlConnectionEvent)

/*!
 @brief Private serial version unique ID to ensure serialization
  compatibility.
 */
inline jlong JavaxSqlConnectionEvent_get_serialVersionUID(void);
#define JavaxSqlConnectionEvent_serialVersionUID -4843217645290030002LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxSqlConnectionEvent, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_(JavaxSqlConnectionEvent *self, id<JavaxSqlPooledConnection> con);

FOUNDATION_EXPORT JavaxSqlConnectionEvent *new_JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_(id<JavaxSqlPooledConnection> con) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSqlConnectionEvent *create_JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_(id<JavaxSqlPooledConnection> con);

FOUNDATION_EXPORT void JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_withJavaSqlSQLException_(JavaxSqlConnectionEvent *self, id<JavaxSqlPooledConnection> con, JavaSqlSQLException *ex);

FOUNDATION_EXPORT JavaxSqlConnectionEvent *new_JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_withJavaSqlSQLException_(id<JavaxSqlPooledConnection> con, JavaSqlSQLException *ex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSqlConnectionEvent *create_JavaxSqlConnectionEvent_initWithJavaxSqlPooledConnection_withJavaSqlSQLException_(id<JavaxSqlPooledConnection> con, JavaSqlSQLException *ex);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSqlConnectionEvent)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxSqlConnectionEvent")
