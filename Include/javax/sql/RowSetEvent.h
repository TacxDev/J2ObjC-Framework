//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/sql/RowSetEvent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSqlRowSetEvent")
#ifdef RESTRICT_JavaxSqlRowSetEvent
#define INCLUDE_ALL_JavaxSqlRowSetEvent 0
#else
#define INCLUDE_ALL_JavaxSqlRowSetEvent 1
#endif
#undef RESTRICT_JavaxSqlRowSetEvent

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSqlRowSetEvent_) && (INCLUDE_ALL_JavaxSqlRowSetEvent || defined(INCLUDE_JavaxSqlRowSetEvent))
#define JavaxSqlRowSetEvent_

#define RESTRICT_JavaUtilEventObject 1
#define INCLUDE_JavaUtilEventObject 1
#include "java/util/EventObject.h"

@class JavaLangLong;
@protocol JavaxSqlRowSet;

/*!
 @brief An <code>Event</code> object generated when an event occurs to a 
 <code>RowSet</code> object.A <code>RowSetEvent</code> object is
  generated when a single row in a rowset is changed, the whole rowset
  is changed, or the rowset cursor moves.
 <P>
  When an event occurs on a <code>RowSet</code> object, one of the 
 <code>RowSetListener</code> methods will be sent to all registered
  listeners to notify them of the event.  An <code>Event</code> object
  is supplied to the <code>RowSetListener</code> method so that the
  listener can use it to find out which <code>RowSet</code> object is
  the source of the event.
 @since 1.4
 */
@interface JavaxSqlRowSetEvent : JavaUtilEventObject

#pragma mark Public

/*!
 @brief Constructs a <code>RowSetEvent</code> object initialized with the
  given <code>RowSet</code> object.
 @param source the  <code> RowSet </code>  object whose data has changed or
          whose cursor has moved
 @throw IllegalArgumentExceptionif <code>source</code> is null.
 */
- (instancetype __nonnull)initWithJavaxSqlRowSet:(id<JavaxSqlRowSet>)source;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSqlRowSetEvent)

/*!
 @brief Private serial version unique ID to ensure serialization
  compatibility.
 */
inline jlong JavaxSqlRowSetEvent_get_serialVersionUID(void);
#define JavaxSqlRowSetEvent_serialVersionUID -1875450876546332005LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxSqlRowSetEvent, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaxSqlRowSetEvent_initWithJavaxSqlRowSet_(JavaxSqlRowSetEvent *self, id<JavaxSqlRowSet> source);

FOUNDATION_EXPORT JavaxSqlRowSetEvent *new_JavaxSqlRowSetEvent_initWithJavaxSqlRowSet_(id<JavaxSqlRowSet> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSqlRowSetEvent *create_JavaxSqlRowSetEvent_initWithJavaxSqlRowSet_(id<JavaxSqlRowSet> source);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSqlRowSetEvent)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxSqlRowSetEvent")
