//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/security/cert/X509Certificate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityCertX509Certificate")
#ifdef RESTRICT_JavaxSecurityCertX509Certificate
#define INCLUDE_ALL_JavaxSecurityCertX509Certificate 0
#else
#define INCLUDE_ALL_JavaxSecurityCertX509Certificate 1
#endif
#undef RESTRICT_JavaxSecurityCertX509Certificate

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSecurityCertX509Certificate_) && (INCLUDE_ALL_JavaxSecurityCertX509Certificate || defined(INCLUDE_JavaxSecurityCertX509Certificate))
#define JavaxSecurityCertX509Certificate_

#define RESTRICT_JavaxSecurityCertCertificate 1
#define INCLUDE_JavaxSecurityCertCertificate 1
#include "javax/security/cert/Certificate.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaUtilDate;
@protocol JavaSecurityPrincipal;

/*!
 @brief Abstract class for X.509 v1 certificates.This provides a standard
  way to access all the version 1 attributes of an X.509 certificate.
 Attributes that are specific to X.509 v2 or v3 are not available
  through this interface. Future API evolution will provide full access to
  complete X.509 v3 attributes. 
 <p>
  The basic X.509 format was defined by
  ISO/IEC and ANSI X9 and is described below in ASN.1: 
 @code

  Certificate  ::=  SEQUENCE  {
      tbsCertificate       TBSCertificate,
      signatureAlgorithm   AlgorithmIdentifier,
      signature            BIT STRING  } 
  
@endcode
  <p>
  These certificates are widely used to support authentication and
  other functionality in Internet security systems. Common applications
  include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
  code signing for trusted software distribution, and Secure Electronic
  Transactions (SET). 
 <p>
  These certificates are managed and vouched for by <em>Certificate
  Authorities</em> (CAs). CAs are services which create certificates by
  placing data in the X.509 standard format and then digitally signing
  that data. CAs act as trusted third parties, making introductions
  between principals who have no direct knowledge of each other.
  CA certificates are either signed by themselves, or by some other
  CA such as a "root" CA. 
 <p>
  The ASN.1 definition of <code>tbsCertificate</code> is: 
 @code

  TBSCertificate  ::=  SEQUENCE  {
      version         [0]  EXPLICIT Version DEFAULT v1,
      serialNumber         CertificateSerialNumber,
      signature            AlgorithmIdentifier,
      issuer               Name,
      validity             Validity,
      subject              Name,
      subjectPublicKeyInfo SubjectPublicKeyInfo,
      } 
  
@endcode
  <p>
  Here is sample code to instantiate an X.509 certificate: 
 @code

  InputStream inStream = new FileInputStream("fileName-of-cert");
  X509Certificate cert = X509Certificate.getInstance(inStream);
  inStream.close(); 
  
@endcode
  OR 
 @code

  byte[] certData = &lt;certificate read from a file, say&gt;
  X509Certificate cert = X509Certificate.getInstance(certData); 
  
@endcode
  <p>
  In either case, the code that instantiates an X.509 certificate
  consults the value of the <code>cert.provider.x509v1</code> security property
  to locate the actual implementation or instantiates a default implementation. 
 <p>
  The <code>cert.provider.x509v1</code> property is set to a default
  implementation for X.509 such as: 
 @code

  cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl 
  
@endcode
  <p>
  The value of this <code>cert.provider.x509v1</code> property has to be
  changed to instantiate another implementation. If this security
  property is not set, a default implementation will be used.
  Currently, due to possible security restrictions on access to
  Security properties, this value is looked up and cached at class
  initialization time and will fallback on a default implementation if
  the Security property is not accessible. 
 <p><em>Note: The classes in the package <code>javax.security.cert</code>
  exist for compatibility with earlier versions of the
  Java Secure Sockets Extension (JSSE). New applications should instead
  use the standard Java SE certificate classes located in 
 <code>java.security.cert</code>.</em></p>
 @author Hemma Prafullchandra
 @since 1.4
 - seealso: Certificate
 - seealso: java.security.cert.X509Extension
 - seealso: java.security.Securitysecurity properties
 */
@interface JavaxSecurityCertX509Certificate : JavaxSecurityCertCertificate

#pragma mark Public

/*!
 @brief Creates a new <code>X509Certificate</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Checks whether the certificate is currently valid.
 <p>
  The validity period consists of two date/time values:
  the first and last dates (and times) on which the certificate
  is valid. It is defined in
  ASN.1 as: 
 @code

  validity             Validity
  Validity ::= SEQUENCE {
      notBefore      CertificateValidityDate,
      notAfter       CertificateValidityDate }
  CertificateValidityDate ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
 @throw CertificateExpiredExceptionif the certificate has expired.
 @throw CertificateNotYetValidExceptionif the certificate is not
             yet valid.
 */
- (void)checkValidity;

/*!
 @brief Checks that the specified date is within the certificate's
  validity period.In other words, this determines whether the
  certificate would be valid at the specified date/time.
 @param date the Date to check against to see if this certificate         is valid at that date/time.
 @throw CertificateExpiredExceptionif the certificate has expired
             with respect to the <code>date</code> supplied.
 @throw CertificateNotYetValidExceptionif the certificate is not
             yet valid with respect to the <code>date</code> supplied.
 - seealso: #checkValidity()
 */
- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Creates a new <code>X509Certificate</code> and initializes it from the
  specified byte array.
 @param certData byte array containing data to initialize the certificate.
 @return the certificate initialized from the specified byte array
 @throw CertificateException
 if the certificate cannot be created or initialized.
 */
+ (JavaxSecurityCertX509Certificate *)getInstanceWithByteArray:(IOSByteArray *)certData;

/*!
 @brief Instantiates an X509Certificate object, and initializes it with
  the data read from the input stream <code>inStream</code>.
 The implementation (X509Certificate is an abstract class) is
  provided by the class specified as the value of the 
 <code>cert.provider.x509v1</code> security property. 
 <p>Note: Only one DER-encoded
  certificate is expected to be in the input stream.
  Also, all X509Certificate
  subclasses must provide a constructor of the form: 
 @code
 public <subClass>(InputStream inStream) ... 
 
@endcode
 @param inStream an input stream with the data to be read to         initialize the certificate.
 @return an X509Certificate object initialized with the data
          from the input stream.
 @throw CertificateExceptionif a class initialization
             or certificate parsing error occurs.
 */
+ (JavaxSecurityCertX509Certificate *)getInstanceWithJavaIoInputStream:(JavaIoInputStream *)inStream;

/*!
 @brief Gets the <code>issuer</code> (issuer distinguished name) value from
  the certificate.The issuer name identifies the entity that signed (and
  issued) the certificate.
 <p>The issuer name field contains an
  X.500 distinguished name (DN).
  The ASN.1 definition for this is: 
 @code

  issuer    Name
  Name ::= CHOICE { RDNSequence }
  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  RelativeDistinguishedName ::=
      SET OF AttributeValueAssertion
  AttributeValueAssertion ::= SEQUENCE {
                                AttributeType,
                                AttributeValue }
  AttributeType ::= OBJECT IDENTIFIER
  AttributeValue ::= ANY 
  
@endcode
  The <code>Name</code> describes a hierarchical name composed of
  attributes, such as country name, and corresponding values, such as US.
  The type of the <code>AttributeValue</code> component is determined by
  the <code>AttributeType</code>; in general it will be a 
 <code>directoryString</code>. A <code>directoryString</code> is usually
  one of <code>PrintableString</code>,
  <code>TeletexString</code> or <code>UniversalString</code>.
 @return a Principal whose name is the issuer distinguished name.
 */
- (id<JavaSecurityPrincipal>)getIssuerDN;

/*!
 @brief Gets the <code>notAfter</code> date from the validity period of
  the certificate.See <code>getNotBefore</code>
  for relevant ASN.1 definitions.
 @return the end date of the validity period.
 - seealso: #checkValidity()
 */
- (JavaUtilDate *)getNotAfter;

/*!
 @brief Gets the <code>notBefore</code> date from the validity period of
  the certificate.
 The relevant ASN.1 definitions are: 
 @code

  validity             Validity
  Validity ::= SEQUENCE {
      notBefore      CertificateValidityDate,
      notAfter       CertificateValidityDate }
  CertificateValidityDate ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
 @return the start date of the validity period.
 - seealso: #checkValidity()
 */
- (JavaUtilDate *)getNotBefore;

/*!
 @brief Gets the <code>serialNumber</code> value from the certificate.
 The serial number is an integer assigned by the certification
  authority to each certificate. It must be unique for each
  certificate issued by a given CA (i.e., the issuer name and
  serial number identify a unique certificate).
  The ASN.1 definition for this is: 
 @code

  serialNumber     CertificateSerialNumber
  CertificateSerialNumber  ::=  INTEGER 
  
@endcode
 @return the serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Gets the signature algorithm name for the certificate
  signature algorithm.An example is the string "SHA-1/DSA".
 The ASN.1 definition for this is: 
 @code

  signatureAlgorithm   AlgorithmIdentifier
  AlgorithmIdentifier  ::=  SEQUENCE  {
      algorithm               OBJECT IDENTIFIER,
      parameters              ANY DEFINED BY algorithm OPTIONAL  }
                              -- contains a value of the type
                              -- registered for use with the
                              -- algorithm object identifier value 
  
@endcode
  
 <p>The algorithm name is determined from the <code>algorithm</code>
  OID string.
 @return the signature algorithm name.
 */
- (NSString *)getSigAlgName;

/*!
 @brief Gets the signature algorithm OID string from the certificate.
 An OID is represented by a set of positive whole numbers separated
  by periods.
  For example, the string "1.2.840.10040.4.3" identifies the SHA-1
  with DSA signature algorithm, as per the PKIX part I. 
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the signature algorithm OID string.
 */
- (NSString *)getSigAlgOID;

/*!
 @brief Gets the DER-encoded signature algorithm parameters from this
  certificate's signature algorithm.In most cases, the signature
  algorithm parameters are null; the parameters are usually
  supplied with the certificate's public key.
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the DER-encoded signature algorithm parameters, or
          null if no parameters are present.
 */
- (IOSByteArray *)getSigAlgParams;

/*!
 @brief Gets the <code>subject</code> (subject distinguished name) value
  from the certificate.
 The ASN.1 definition for this is: 
 @code

  subject    Name 
  
@endcode
  
 <p>See <code>getIssuerDN</code> for <code>Name</code>
  and other relevant definitions.
 @return a Principal whose name is the subject name.
 - seealso: #getIssuerDN()
 */
- (id<JavaSecurityPrincipal>)getSubjectDN;

/*!
 @brief Gets the <code>version</code> (version number) value from the
  certificate.The ASN.1 definition for this is: 
 @code

  version         [0]  EXPLICIT Version DEFAULT v1
  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  } 
  
@endcode
 @return the version number from the ASN.1 encoding, i.e. 0, 1 or 2.
 */
- (jint)getVersion;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityCertX509Certificate)

FOUNDATION_EXPORT void JavaxSecurityCertX509Certificate_init(JavaxSecurityCertX509Certificate *self);

FOUNDATION_EXPORT JavaxSecurityCertX509Certificate *JavaxSecurityCertX509Certificate_getInstanceWithJavaIoInputStream_(JavaIoInputStream *inStream);

FOUNDATION_EXPORT JavaxSecurityCertX509Certificate *JavaxSecurityCertX509Certificate_getInstanceWithByteArray_(IOSByteArray *certData);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityCertX509Certificate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityCertX509Certificate")
