//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/security/auth/Subject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityAuthSubject")
#ifdef RESTRICT_JavaxSecurityAuthSubject
#define INCLUDE_ALL_JavaxSecurityAuthSubject 0
#else
#define INCLUDE_ALL_JavaxSecurityAuthSubject 1
#endif
#undef RESTRICT_JavaxSecurityAuthSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSecurityAuthSubject_) && (INCLUDE_ALL_JavaxSecurityAuthSubject || defined(INCLUDE_JavaxSecurityAuthSubject))
#define JavaxSecurityAuthSubject_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaSecurityAccessControlContext;
@protocol JavaSecurityPrivilegedAction;
@protocol JavaSecurityPrivilegedExceptionAction;
@protocol JavaUtilSet;

/*!
 @brief <p> A <code>Subject</code> represents a grouping of related information
  for a single entity, such as a person.
 Such information includes the Subject's identities as well as
  its security-related attributes
  (passwords and cryptographic keys, for example). 
 <p> Subjects may potentially have multiple identities.
  Each identity is represented as a <code>Principal</code>
  within the <code>Subject</code>.  Principals simply bind names to a 
 <code>Subject</code>.  For example, a <code>Subject</code> that happens
  to be a person, Alice, might have two Principals:
  one which binds "Alice Bar", the name on her driver license,
  to the <code>Subject</code>, and another which binds,
  "999-99-9999", the number on her student identification card,
  to the <code>Subject</code>.  Both Principals refer to the same 
 <code>Subject</code> even though each has a different name. 
 <p> A <code>Subject</code> may also own security-related attributes,
  which are referred to as credentials.
  Sensitive credentials that require special protection, such as
  private cryptographic keys, are stored within a private credential 
 <code>Set</code>.  Credentials intended to be shared, such as
  public key certificates or Kerberos server tickets are stored
  within a public credential <code>Set</code>.  Different permissions
  are required to access and modify the different credential Sets. 
 <p> To retrieve all the Principals associated with a <code>Subject</code>,
  invoke the <code>getPrincipals</code> method.  To retrieve
  all the public or private credentials belonging to a <code>Subject</code>,
  invoke the <code>getPublicCredentials</code> method or 
 <code>getPrivateCredentials</code> method, respectively.
  To modify the returned <code>Set</code> of Principals and credentials,
  use the methods defined in the <code>Set</code> class.
  For example: 
 @code

       Subject subject;
       Principal principal;
       Object credential;
       // add a Principal and credential to the Subject
       subject.getPrincipals().add(principal);
       subject.getPublicCredentials().add(credential); 
  
@endcode
  
 <p> This <code>Subject</code> class implements <code>Serializable</code>.
  While the Principals associated with the <code>Subject</code> are serialized,
  the credentials associated with the <code>Subject</code> are not.
  Note that the <code>java.security.Principal</code> class
  does not implement <code>Serializable</code>.  Therefore all concrete 
 <code>Principal</code> implementations associated with Subjects
  must implement <code>Serializable</code>.
 - seealso: java.security.Principal
 - seealso: java.security.DomainCombiner
 */
@interface JavaxSecurityAuthSubject : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief A <code>Set</code> that provides a view of all of this
  Subject's Principals
 <p>
   */
  id<JavaUtilSet> principals_;
  /*!
   @brief Sets that provide a view of all of this
  Subject's Credentials
   */
  id<JavaUtilSet> pubCredentials_;
  id<JavaUtilSet> privCredentials_;
}

#pragma mark Public

/*!
 @brief Create an instance of a <code>Subject</code>
  with an empty <code>Set</code> of Principals and empty
  Sets of public and private credentials.
 <p> The newly constructed Sets check whether this <code>Subject</code>
  has been set read-only before permitting subsequent modifications.
  The newly created Sets also prevent illegal modifications
  by ensuring that callers have sufficient permissions. 
 <p> To modify the Principals Set, the caller must have 
 <code>AuthPermission("modifyPrincipals")</code>.
  To modify the public credential Set, the caller must have 
 <code>AuthPermission("modifyPublicCredentials")</code>.
  To modify the private credential Set, the caller must have 
 <code>AuthPermission("modifyPrivateCredentials")</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create an instance of a <code>Subject</code> with
  Principals and credentials.
 <p> The Principals and credentials from the specified Sets
  are copied into newly constructed Sets.
  These newly created Sets check whether this <code>Subject</code>
  has been set read-only before permitting subsequent modifications.
  The newly created Sets also prevent illegal modifications
  by ensuring that callers have sufficient permissions. 
 <p> To modify the Principals Set, the caller must have 
 <code>AuthPermission("modifyPrincipals")</code>.
  To modify the public credential Set, the caller must have 
 <code>AuthPermission("modifyPublicCredentials")</code>.
  To modify the private credential Set, the caller must have 
 <code>AuthPermission("modifyPrivateCredentials")</code>.
  <p>
 @param readOnly true if the <code>Subject</code>  is to be read-only,
            and false otherwise.  <p>
 @param principals the <code>Set</code>  of Principals
            to be associated with this <code>Subject</code> .  <p>
 @param pubCredentials the <code>Set</code>  of public credentials
            to be associated with this <code>Subject</code> .  <p>
 @param privCredentials the <code>Set</code>  of private credentials
            to be associated with this <code>Subject</code> .
 @throw NullPointerExceptionif the specified
           <code>principals</code>, <code>pubCredentials</code>,
           or <code>privCredentials</code> are <code>null</code>.
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)readOnly
                          withJavaUtilSet:(id<JavaUtilSet>)principals
                          withJavaUtilSet:(id<JavaUtilSet>)pubCredentials
                          withJavaUtilSet:(id<JavaUtilSet>)privCredentials;

/*!
 @brief Perform work as a particular <code>Subject</code>.
 <p> This method first retrieves the current Thread's 
 <code>AccessControlContext</code> via 
 <code>AccessController.getContext</code>,
  and then instantiates a new <code>AccessControlContext</code>
  using the retrieved context along with a new 
 <code>SubjectDomainCombiner</code> (constructed using
  the provided <code>Subject</code>).
  Finally, this method invokes <code>AccessController.doPrivileged</code>,
  passing it the provided <code>PrivilegedAction</code>,
  as well as the newly constructed <code>AccessControlContext</code>.
  
 <p>
 @param subject the <code>Subject</code>  that the specified
                    <code>action</code>  will run as.  This parameter                   may be 
 <code>null</code> .  <p>
 @param action the code to be run as the specified                   
 <code>Subject</code> .  <p>
 @return the value returned by the PrivilegedAction's
                   <code>run</code> method.
 @throw NullPointerExceptionif the <code>PrivilegedAction</code>
                   is <code>null</code>. <p>
 @throw SecurityExceptionif the caller does not have permission
                   to invoke this method.
 */
+ (id)doAsWithJavaxSecurityAuthSubject:(JavaxSecurityAuthSubject *)subject
      withJavaSecurityPrivilegedAction:(id<JavaSecurityPrivilegedAction>)action;

/*!
 @brief Perform work as a particular <code>Subject</code>.
 <p> This method first retrieves the current Thread's 
 <code>AccessControlContext</code> via 
 <code>AccessController.getContext</code>,
  and then instantiates a new <code>AccessControlContext</code>
  using the retrieved context along with a new 
 <code>SubjectDomainCombiner</code> (constructed using
  the provided <code>Subject</code>).
  Finally, this method invokes <code>AccessController.doPrivileged</code>,
  passing it the provided <code>PrivilegedExceptionAction</code>,
  as well as the newly constructed <code>AccessControlContext</code>.
  
 <p>
 @param subject the <code>Subject</code>  that the specified
                    <code>action</code>  will run as.  This parameter                   may be 
 <code>null</code> .  <p>
 @param action the code to be run as the specified                   
 <code>Subject</code> .  <p>
 @return the value returned by the
                   PrivilegedExceptionAction's <code>run</code> method.
 @throw PrivilegedActionExceptionif the
                   <code>PrivilegedExceptionAction.run</code>
                   method throws a checked exception. <p>
 @throw NullPointerExceptionif the specified
                   <code>PrivilegedExceptionAction</code> is
                   <code>null</code>. <p>
 @throw SecurityExceptionif the caller does not have permission
                   to invoke this method.
 */
+ (id)doAsWithJavaxSecurityAuthSubject:(JavaxSecurityAuthSubject *)subject
withJavaSecurityPrivilegedExceptionAction:(id<JavaSecurityPrivilegedExceptionAction>)action;

/*!
 @brief Perform privileged work as a particular <code>Subject</code>.
 <p> This method behaves exactly as <code>Subject.doAs</code>,
  except that instead of retrieving the current Thread's 
 <code>AccessControlContext</code>, it uses the provided 
 <code>AccessControlContext</code>.  If the provided 
 <code>AccessControlContext</code> is <code>null</code>,
  this method instantiates a new <code>AccessControlContext</code>
  with an empty collection of ProtectionDomains. 
 <p>
 @param subject the <code>Subject</code>  that the specified
                    <code>action</code>  will run as.  This parameter                   may be 
 <code>null</code> .  <p>
 @param action the code to be run as the specified                   
 <code>Subject</code> .  <p>
 @param acc the <code>AccessControlContext</code>  to be tied to the
                    specified  <i> subject </i>  and  <i> action </i> .  <p>
 @return the value returned by the PrivilegedAction's
                   <code>run</code> method.
 @throw NullPointerExceptionif the <code>PrivilegedAction</code>
                   is <code>null</code>. <p>
 @throw SecurityExceptionif the caller does not have permission
                   to invoke this method.
 */
+ (id)doAsPrivilegedWithJavaxSecurityAuthSubject:(JavaxSecurityAuthSubject *)subject
                withJavaSecurityPrivilegedAction:(id<JavaSecurityPrivilegedAction>)action
            withJavaSecurityAccessControlContext:(JavaSecurityAccessControlContext *)acc;

/*!
 @brief Perform privileged work as a particular <code>Subject</code>.
 <p> This method behaves exactly as <code>Subject.doAs</code>,
  except that instead of retrieving the current Thread's 
 <code>AccessControlContext</code>, it uses the provided 
 <code>AccessControlContext</code>.  If the provided 
 <code>AccessControlContext</code> is <code>null</code>,
  this method instantiates a new <code>AccessControlContext</code>
  with an empty collection of ProtectionDomains. 
 <p>
 @param subject the <code>Subject</code>  that the specified
                    <code>action</code>  will run as.  This parameter                   may be 
 <code>null</code> .  <p>
 @param action the code to be run as the specified                   
 <code>Subject</code> .  <p>
 @param acc the <code>AccessControlContext</code>  to be tied to the
                    specified  <i> subject </i>  and  <i> action </i> .  <p>
 @return the value returned by the
                   PrivilegedExceptionAction's <code>run</code> method.
 @throw PrivilegedActionExceptionif the
                   <code>PrivilegedExceptionAction.run</code>
                   method throws a checked exception. <p>
 @throw NullPointerExceptionif the specified
                   <code>PrivilegedExceptionAction</code> is
                   <code>null</code>. <p>
 @throw SecurityExceptionif the caller does not have permission
                   to invoke this method.
 */
+ (id)doAsPrivilegedWithJavaxSecurityAuthSubject:(JavaxSecurityAuthSubject *)subject
       withJavaSecurityPrivilegedExceptionAction:(id<JavaSecurityPrivilegedExceptionAction>)action
            withJavaSecurityAccessControlContext:(JavaSecurityAccessControlContext *)acc;

/*!
 @brief Compares the specified Object with this <code>Subject</code>
  for equality.Returns true if the given object is also a Subject
  and the two <code>Subject</code> instances are equivalent.
 More formally, two <code>Subject</code> instances are
  equal if their <code>Principal</code> and <code>Credential</code>
  Sets are equal. 
 <p>
 @param o Object to be compared for equality with this           
 <code>Subject</code> .
 @return true if the specified Object is equal to this
           <code>Subject</code>.
 @throw SecurityExceptionif the caller does not have permission
           to access the private credentials for this <code>Subject</code>,
           or if the caller does not have permission to access the
           private credentials for the provided <code>Subject</code>.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Return the <code>Set</code> of Principals associated with this 
 <code>Subject</code>.Each <code>Principal</code> represents
  an identity for this <code>Subject</code>.
 <p> The returned <code>Set</code> is backed by this Subject's
  internal <code>Principal</code> <code>Set</code>.  Any modification
  to the returned <code>Set</code> affects the internal 
 <code>Principal</code> <code>Set</code> as well. 
 <p>
 @return The <code>Set</code> of Principals associated with this
           <code>Subject</code>.
 */
- (id<JavaUtilSet>)getPrincipals;

/*!
 @brief Return a <code>Set</code> of Principals associated with this 
 <code>Subject</code> that are instances or subclasses of the specified 
 <code>Class</code>.
 <p> The returned <code>Set</code> is not backed by this Subject's
  internal <code>Principal</code> <code>Set</code>.  A new 
 <code>Set</code> is created and returned for each method invocation.
  Modifications to the returned <code>Set</code>
  will not affect the internal <code>Principal</code> <code>Set</code>.
  
 <p>
 @param c the returned <code>Set</code>  of Principals will all be
            instances of this class.
 @return a <code>Set</code> of Principals that are instances of the
           specified <code>Class</code>.
 @throw NullPointerExceptionif the specified <code>Class</code>
                   is <code>null</code>.
 */
- (id<JavaUtilSet>)getPrincipalsWithIOSClass:(IOSClass *)c;

/*!
 @brief Return the <code>Set</code> of private credentials held by this 
 <code>Subject</code>.
 <p> The returned <code>Set</code> is backed by this Subject's
  internal private Credential <code>Set</code>.  Any modification
  to the returned <code>Set</code> affects the internal private
  Credential <code>Set</code> as well. 
 <p> A caller requires permissions to access the Credentials
  in the returned <code>Set</code>, or to modify the 
 <code>Set</code> itself.  A <code>SecurityException</code>
  is thrown if the caller does not have the proper permissions. 
 <p> While iterating through the <code>Set</code>,
  a <code>SecurityException</code> is thrown
  if the caller does not have permission to access a
  particular Credential.  The <code>Iterator</code>
  is nevertheless advanced to next element in the <code>Set</code>.
  
 <p>
 @return A <code>Set</code> of private credentials held by this
           <code>Subject</code>.
 */
- (id<JavaUtilSet>)getPrivateCredentials;

/*!
 @brief Return a <code>Set</code> of private credentials associated with this 
 <code>Subject</code> that are instances or subclasses of the specified 
 <code>Class</code>.
 <p> The caller must have permission to access all of the
  requested Credentials, or a <code>SecurityException</code>
  will be thrown. 
 <p> The returned <code>Set</code> is not backed by this Subject's
  internal private Credential <code>Set</code>.  A new 
 <code>Set</code> is created and returned for each method invocation.
  Modifications to the returned <code>Set</code>
  will not affect the internal private Credential <code>Set</code>.
  
 <p>
 @param c the returned <code>Set</code>  of private credentials will all be
            instances of this class.
 @return a <code>Set</code> of private credentials that are instances
           of the  specified <code>Class</code>.
 @throw NullPointerExceptionif the specified <code>Class</code>
           is <code>null</code>.
 */
- (id<JavaUtilSet>)getPrivateCredentialsWithIOSClass:(IOSClass *)c;

/*!
 @brief Return the <code>Set</code> of public credentials held by this 
 <code>Subject</code>.
 <p> The returned <code>Set</code> is backed by this Subject's
  internal public Credential <code>Set</code>.  Any modification
  to the returned <code>Set</code> affects the internal public
  Credential <code>Set</code> as well. 
 <p>
 @return A <code>Set</code> of public credentials held by this
           <code>Subject</code>.
 */
- (id<JavaUtilSet>)getPublicCredentials;

/*!
 @brief Return a <code>Set</code> of public credentials associated with this 
 <code>Subject</code> that are instances or subclasses of the specified 
 <code>Class</code>.
 <p> The returned <code>Set</code> is not backed by this Subject's
  internal public Credential <code>Set</code>.  A new 
 <code>Set</code> is created and returned for each method invocation.
  Modifications to the returned <code>Set</code>
  will not affect the internal public Credential <code>Set</code>.
  
 <p>
 @param c the returned <code>Set</code>  of public credentials will all be
            instances of this class.
 @return a <code>Set</code> of public credentials that are instances
           of the  specified <code>Class</code>.
 @throw NullPointerExceptionif the specified <code>Class</code>
           is <code>null</code>.
 */
- (id<JavaUtilSet>)getPublicCredentialsWithIOSClass:(IOSClass *)c;

/*!
 @brief Get the <code>Subject</code> associated with the provided 
 <code>AccessControlContext</code>.
 <p> The <code>AccessControlContext</code> may contain many
  Subjects (from nested <code>doAs</code> calls).
  In this situation, the most recent <code>Subject</code> associated
  with the <code>AccessControlContext</code> is returned. 
 <p>
 @param acc the <code>AccessControlContext</code>  from which to retrieve
            the <code>Subject</code> .
 @return the <code>Subject</code> associated with the provided
           <code>AccessControlContext</code>, or <code>null</code>
           if no <code>Subject</code> is associated
           with the provided <code>AccessControlContext</code>.
 @throw SecurityExceptionif the caller does not have permission
           to get the <code>Subject</code>. <p>
 @throw NullPointerExceptionif the provided
           <code>AccessControlContext</code> is <code>null</code>.
 */
+ (JavaxSecurityAuthSubject *)getSubjectWithJavaSecurityAccessControlContext:(JavaSecurityAccessControlContext *)acc;

/*!
 @brief Returns a hashcode for this <code>Subject</code>.
 <p>
 @return a hashcode for this <code>Subject</code>.
 @throw SecurityExceptionif the caller does not have permission
           to access this Subject's private credentials.
 */
- (NSUInteger)hash;

/*!
 @brief Query whether this <code>Subject</code> is read-only.
 <p>
 @return true if this <code>Subject</code> is read-only, false otherwise.
 */
- (jboolean)isReadOnly;

/*!
 @brief Set this <code>Subject</code> to be read-only.
 <p> Modifications (additions and removals) to this Subject's 
 <code>Principal</code> <code>Set</code> and
  credential Sets will be disallowed.
  The <code>destroy</code> operation on this Subject's credentials will
  still be permitted. 
 <p> Subsequent attempts to modify the Subject's <code>Principal</code>
  and credential Sets will result in an 
 <code>IllegalStateException</code> being thrown.
  Also, once a <code>Subject</code> is read-only,
  it can not be reset to being writable again. 
 <p>
 @throw SecurityExceptionif the caller does not have permission
           to set this <code>Subject</code> to be read-only.
 */
- (void)setReadOnly;

/*!
 @brief Return the String representation of this <code>Subject</code>.
 <p>
 @return the String representation of this <code>Subject</code>.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief package private convenience method to print out the Subject
  without firing off a security check when trying to access
  the Private Credentials
 */
- (NSString *)toStringWithBoolean:(jboolean)includePrivateCredentials;

@end

J2OBJC_STATIC_INIT(JavaxSecurityAuthSubject)

J2OBJC_FIELD_SETTER(JavaxSecurityAuthSubject, principals_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxSecurityAuthSubject, pubCredentials_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxSecurityAuthSubject, privCredentials_, id<JavaUtilSet>)

FOUNDATION_EXPORT void JavaxSecurityAuthSubject_init(JavaxSecurityAuthSubject *self);

FOUNDATION_EXPORT JavaxSecurityAuthSubject *new_JavaxSecurityAuthSubject_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSecurityAuthSubject *create_JavaxSecurityAuthSubject_init(void);

FOUNDATION_EXPORT void JavaxSecurityAuthSubject_initWithBoolean_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(JavaxSecurityAuthSubject *self, jboolean readOnly, id<JavaUtilSet> principals, id<JavaUtilSet> pubCredentials, id<JavaUtilSet> privCredentials);

FOUNDATION_EXPORT JavaxSecurityAuthSubject *new_JavaxSecurityAuthSubject_initWithBoolean_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(jboolean readOnly, id<JavaUtilSet> principals, id<JavaUtilSet> pubCredentials, id<JavaUtilSet> privCredentials) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxSecurityAuthSubject *create_JavaxSecurityAuthSubject_initWithBoolean_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(jboolean readOnly, id<JavaUtilSet> principals, id<JavaUtilSet> pubCredentials, id<JavaUtilSet> privCredentials);

FOUNDATION_EXPORT JavaxSecurityAuthSubject *JavaxSecurityAuthSubject_getSubjectWithJavaSecurityAccessControlContext_(JavaSecurityAccessControlContext *acc);

FOUNDATION_EXPORT id JavaxSecurityAuthSubject_doAsWithJavaxSecurityAuthSubject_withJavaSecurityPrivilegedAction_(JavaxSecurityAuthSubject *subject, id<JavaSecurityPrivilegedAction> action);

FOUNDATION_EXPORT id JavaxSecurityAuthSubject_doAsWithJavaxSecurityAuthSubject_withJavaSecurityPrivilegedExceptionAction_(JavaxSecurityAuthSubject *subject, id<JavaSecurityPrivilegedExceptionAction> action);

FOUNDATION_EXPORT id JavaxSecurityAuthSubject_doAsPrivilegedWithJavaxSecurityAuthSubject_withJavaSecurityPrivilegedAction_withJavaSecurityAccessControlContext_(JavaxSecurityAuthSubject *subject, id<JavaSecurityPrivilegedAction> action, JavaSecurityAccessControlContext *acc);

FOUNDATION_EXPORT id JavaxSecurityAuthSubject_doAsPrivilegedWithJavaxSecurityAuthSubject_withJavaSecurityPrivilegedExceptionAction_withJavaSecurityAccessControlContext_(JavaxSecurityAuthSubject *subject, id<JavaSecurityPrivilegedExceptionAction> action, JavaSecurityAccessControlContext *acc);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityAuthSubject)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityAuthSubject")
