//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/HostnameVerifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslHostnameVerifier")
#ifdef RESTRICT_JavaxNetSslHostnameVerifier
#define INCLUDE_ALL_JavaxNetSslHostnameVerifier 0
#else
#define INCLUDE_ALL_JavaxNetSslHostnameVerifier 1
#endif
#undef RESTRICT_JavaxNetSslHostnameVerifier

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslHostnameVerifier_) && (INCLUDE_ALL_JavaxNetSslHostnameVerifier || defined(INCLUDE_JavaxNetSslHostnameVerifier))
#define JavaxNetSslHostnameVerifier_

@class JavaLangBoolean;
@protocol JavaxNetSslSSLSession;

/*!
 @brief This class is the base interface for hostname verification.
 <P>
  During handshaking, the
  verification mechanism can call back to implementers of this
  interface to determine if this connection should be allowed. 
 <p>
  For more information of the use of this interface on Android, see 
 <code>HttpsURLConnection.setDefaultHostnameVerifier(HostnameVerifier)</code>.
  <P>
  The policies can be certificate-based
  or may depend on other authentication schemes.
 @author Brad R. Wetmore
 @since 1.4
 */
@protocol JavaxNetSslHostnameVerifier < JavaObject >

/*!
 @brief Verify that the host name is an acceptable match with
  the server's authentication scheme.
 @param hostname the host name
 @param session SSLSession used on the connection to host
 @return true if the host name is acceptable
 */
- (jboolean)verifyWithNSString:(NSString *)hostname
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslHostnameVerifier)

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslHostnameVerifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslHostnameVerifier")
