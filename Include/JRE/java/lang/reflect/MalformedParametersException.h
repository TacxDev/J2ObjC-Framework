//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/reflect/MalformedParametersException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectMalformedParametersException")
#ifdef RESTRICT_JavaLangReflectMalformedParametersException
#define INCLUDE_ALL_JavaLangReflectMalformedParametersException 0
#else
#define INCLUDE_ALL_JavaLangReflectMalformedParametersException 1
#endif
#undef RESTRICT_JavaLangReflectMalformedParametersException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangReflectMalformedParametersException_) && (INCLUDE_ALL_JavaLangReflectMalformedParametersException || defined(INCLUDE_JavaLangReflectMalformedParametersException))
#define JavaLangReflectMalformedParametersException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangBoolean;
@class JavaLangThrowable;

/*!
 @brief Thrown when <code>the
  java.lang.reflect package</code>
  attempts to read method parameters from
  a class file and determines that one or more parameters are
  malformed.
 <p>The following is a list of conditions under which this exception
  can be thrown: 
 <ul>
  <li> The number of parameters (parameter_count) is wrong for the method 
 <li> A constant pool index is out of bounds. 
 <li> A constant pool index does not refer to a UTF-8 entry 
 <li> A parameter's name is "", or contains an illegal character 
 <li> The flags field contains an illegal flag (something other than
      FINAL, SYNTHETIC, or MANDATED) 
 </ul>
  See <code>java.lang.reflect.Executable.getParameters</code> for more
  information.
 - seealso: java.lang.reflect.Executable#getParameters
 @since 1.8
 */
@interface JavaLangReflectMalformedParametersException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Create a <code>MalformedParametersException</code> with an empty
  reason.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a <code>MalformedParametersException</code>.
 @param reason The reason for the exception.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)reason;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectMalformedParametersException)

FOUNDATION_EXPORT void JavaLangReflectMalformedParametersException_init(JavaLangReflectMalformedParametersException *self);

FOUNDATION_EXPORT JavaLangReflectMalformedParametersException *new_JavaLangReflectMalformedParametersException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectMalformedParametersException *create_JavaLangReflectMalformedParametersException_init(void);

FOUNDATION_EXPORT void JavaLangReflectMalformedParametersException_initWithNSString_(JavaLangReflectMalformedParametersException *self, NSString *reason);

FOUNDATION_EXPORT JavaLangReflectMalformedParametersException *new_JavaLangReflectMalformedParametersException_initWithNSString_(NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectMalformedParametersException *create_JavaLangReflectMalformedParametersException_initWithNSString_(NSString *reason);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectMalformedParametersException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectMalformedParametersException")
