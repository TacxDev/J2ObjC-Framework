//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/annotation/Annotation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangAnnotationAnnotation")
#ifdef RESTRICT_JavaLangAnnotationAnnotation
#define INCLUDE_ALL_JavaLangAnnotationAnnotation 0
#else
#define INCLUDE_ALL_JavaLangAnnotationAnnotation 1
#endif
#undef RESTRICT_JavaLangAnnotationAnnotation

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangAnnotationAnnotation_) && (INCLUDE_ALL_JavaLangAnnotationAnnotation || defined(INCLUDE_JavaLangAnnotationAnnotation))
#define JavaLangAnnotationAnnotation_

@class IOSClass;
@class JavaLangBoolean;
@class JavaLangInteger;

/*!
 @brief The common interface extended by all annotation types.Note that an
  interface that manually extends this one does <i>not</i> define
  an annotation type.
 Also note that this interface does not itself
  define an annotation type.
  More information about annotation types can be found in section 9.6 of 
 <cite>The Java&trade; Language Specification</cite>.
  The <code>java.lang.reflect.AnnotatedElement</code> interface discusses
  compatibility concerns when evolving an annotation type from being
  non-repeatable to being repeatable.
 @author Josh Bloch
 @since 1.5
 */
@protocol JavaLangAnnotationAnnotation < JavaObject >

/*!
 @brief Returns true if the specified object represents an annotation that is logically equivalent to
  this one.In other words, returns true if the specified object is an instance of the same
  annotation type as this instance, all of whose members are equal to the corresponding member of
  this annotation, as defined below: 
 <ul>
    <li>Two corresponding primitive typed members whose values are <code>x</code> and <code>y</code> are
        considered equal if <code>x == y</code>, unless their type is <code>float</code> or <code>double</code>.
 <li>Two corresponding <code>float</code> members whose values are <code>x</code> and <code>y</code> are
        considered equal if <code>Float.valueOf(x).equals(Float.valueOf(y))</code>. (Unlike the <code>==</code>
  operator, NaN is considered equal to itself, and <code>0.0f</code> unequal to <code>-0.0f</code>
 .)
    <li>Two corresponding <code>double</code> members whose values are <code>x</code> and <code>y</code> are
        considered equal if <code>Double.valueOf(x).equals(Double.valueOf(y))</code>. (Unlike the
        <code>==</code> operator, NaN is considered equal to itself, and <code>0.0</code> unequal to <code>-0.0</code>
 .)
    <li>Two corresponding <code>String</code>, <code>Class</code>, enum, or annotation typed members whose
        values are <code>x</code> and <code>y</code> are considered equal if <code>x.equals(y)</code>. (Note
        that this definition is recursive for annotation typed members.)   
 <li>Two corresponding array typed members <code>x</code> and <code>y</code> are considered equal if
        <code>Arrays.equals(x, y)</code>, for the appropriate overloading of <code>java.util.Arrays.equals</code>
 .
  </ul>
 @return true if the specified object represents an annotation that is logically equivalent to
      this one, otherwise false
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the hash code of this annotation, as defined below:
 <p>The hash code of an annotation is the sum of the hash codes of its members (including those
  with default values), as defined below: 
 <p>The hash code of an annotation member is (127 times the hash code of the member-name as
  computed by <code>String.hashCode()</code>) XOR the hash code of the member-value, as defined below: 
 <p>The hash code of a member-value depends on its type: 
 <ul>
    <li>The hash code of a primitive value <i><code>v</code></i> is equal to <code>
        <i>WrapperType</i>.valueOf(<i>v</i>).hashCode()</code>, where <i><code>WrapperType</code></i>
        is the wrapper type corresponding to the primitive type of <i><code>v</code></i> (<code>Byte</code>
 , <code>Character</code>, <code>Double</code>, <code>Float</code>, <code>Integer</code>, <code>Long</code>,
        <code>Short</code>, or <code>Boolean</code>).
 <li>The hash code of a string, enum, class, or annotation member-value I <i><code>v</code></i> is
        computed as by calling <code><i>v</i>.hashCode()</code>. (In the case of annotation
        member values, this is a recursive definition.)   
 <li>The hash code of an array member-value is computed by calling the appropriate overloading
        of <code>Arrays.hashCode</code> on the value. (There is one
        overloading for each primitive type, and one for object reference types.) 
 </ul>
 @return the hash code of this annotation
 */
- (NSUInteger)hash;

/*!
 @brief Returns a string representation of this annotation.The details
  of the representation are implementation-dependent, but the following
  may be regarded as typical: 
 @code

      &#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman) 
  
@endcode
 @return a string representation of this annotation
 */
- (NSString *)description;

/*!
 @brief Returns the annotation type of this annotation.
 @return the annotation type of this annotation
 */
- (IOSClass *)annotationType;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangAnnotationAnnotation)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangAnnotationAnnotation)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaLangAnnotationAnnotation")
