//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/OutputStreamWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoOutputStreamWriter")
#ifdef RESTRICT_JavaIoOutputStreamWriter
#define INCLUDE_ALL_JavaIoOutputStreamWriter 0
#else
#define INCLUDE_ALL_JavaIoOutputStreamWriter 1
#endif
#undef RESTRICT_JavaIoOutputStreamWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoOutputStreamWriter_) && (INCLUDE_ALL_JavaIoOutputStreamWriter || defined(INCLUDE_JavaIoOutputStreamWriter))
#define JavaIoOutputStreamWriter_

#define RESTRICT_JavaIoWriter 1
#define INCLUDE_JavaIoWriter 1
#include "java/io/Writer.h"

@class IOSCharArray;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaNioCharsetCharset;
@class JavaNioCharsetCharsetEncoder;

/*!
 @brief An OutputStreamWriter is a bridge from character streams to byte streams:
  Characters written to it are encoded into bytes using a specified <code>charset</code>
 .The charset that it uses
  may be specified by name or may be given explicitly, or the platform's
  default charset may be accepted.
 <p> Each invocation of a write() method causes the encoding converter to be
  invoked on the given character(s).  The resulting bytes are accumulated in a
  buffer before being written to the underlying output stream.  The size of
  this buffer may be specified, but by default it is large enough for most
  purposes.  Note that the characters passed to the write() methods are not
  buffered. 
 <p> For top efficiency, consider wrapping an OutputStreamWriter within a
  BufferedWriter so as to avoid frequent converter invocations.  For example: 
 @code

  Writer out
    = new BufferedWriter(new OutputStreamWriter(System.out)); 
  
@endcode
  
 <p> A <i>surrogate pair</i> is a character represented by a sequence of two 
 <tt>char</tt> values: A <i>high</i> surrogate in the range '&#92;uD800' to
  '&#92;uDBFF' followed by a <i>low</i> surrogate in the range '&#92;uDC00' to
  '&#92;uDFFF'.
  
 <p> A <i>malformed surrogate element</i> is a high surrogate that is not
  followed by a low surrogate or a low surrogate that is not preceded by a
  high surrogate. 
 <p> This class always replaces malformed surrogate elements and unmappable
  character sequences with the charset's default <i>substitution sequence</i>.
  The java.nio.charset.CharsetEncoder class should be used when more
  control over the encoding process is required.
 - seealso: BufferedWriter
 - seealso: OutputStream
 - seealso: java.nio.charset.Charset
 @author Mark Reinhold
 @since JDK1.1
 */
@interface JavaIoOutputStreamWriter : JavaIoWriter

#pragma mark Public

/*!
 @brief Creates an OutputStreamWriter that uses the default character encoding.
 @param outArg An OutputStream
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Creates an OutputStreamWriter that uses the given charset.
 @param outArg An OutputStream
 @param cs A charset
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)cs;

/*!
 @brief Creates an OutputStreamWriter that uses the given charset encoder.
 @param outArg An OutputStream
 @param enc A charset encoder
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                    withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)enc;

/*!
 @brief Creates an OutputStreamWriter that uses the named charset.
 @param outArg An OutputStream
 @param charsetName The name of a supported
           <code>charset</code>
 @throw UnsupportedEncodingException
 If the named encoding is not supported
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                        withNSString:(NSString *)charsetName;

- (void)close;

/*!
 @brief Flushes the stream.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)flush;

/*!
 @brief Returns the name of the character encoding being used by this stream.
 <p> If the encoding has an historical name then that name is returned;
  otherwise the encoding's canonical name is returned. 
 <p> If this instance was created with the <code>OutputStreamWriter(OutputStream, String)</code>
  constructor then the returned
  name, being unique for the encoding, may differ from the name passed to
  the constructor.  This method may return <tt>null</tt> if the stream has
  been closed. </p>
 @return The historical name of this encoding, or possibly
          <code>null</code> if the stream has been closed
 - seealso: java.nio.charset.Charset
 */
- (NSString *)getEncoding;

/*!
 @brief Writes a portion of an array of characters.
 @param cbuf Buffer of characters
 @param off Offset from which to start writing characters
 @param len Number of characters to write
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes a single character.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithInt:(jint)c;

/*!
 @brief Writes a portion of a string.
 @param str A String
 @param off Offset from which to start writing characters
 @param len Number of characters to write
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

/*!
 @brief Flushes the output buffer to the underlying byte stream, without flushing
  the byte stream itself.This method is non-private only so that it may
  be invoked by PrintStream.
 */
- (void)flushBuffer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoOutputStreamWriter)

FOUNDATION_EXPORT void JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStreamWriter *self, JavaIoOutputStream *outArg, NSString *charsetName);

FOUNDATION_EXPORT JavaIoOutputStreamWriter *new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *charsetName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoOutputStreamWriter *create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *charsetName);

FOUNDATION_EXPORT void JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStreamWriter *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaIoOutputStreamWriter *new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoOutputStreamWriter *create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg);

FOUNDATION_EXPORT void JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(JavaIoOutputStreamWriter *self, JavaIoOutputStream *outArg, JavaNioCharsetCharset *cs);

FOUNDATION_EXPORT JavaIoOutputStreamWriter *new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(JavaIoOutputStream *outArg, JavaNioCharsetCharset *cs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoOutputStreamWriter *create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(JavaIoOutputStream *outArg, JavaNioCharsetCharset *cs);

FOUNDATION_EXPORT void JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharsetEncoder_(JavaIoOutputStreamWriter *self, JavaIoOutputStream *outArg, JavaNioCharsetCharsetEncoder *enc);

FOUNDATION_EXPORT JavaIoOutputStreamWriter *new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharsetEncoder_(JavaIoOutputStream *outArg, JavaNioCharsetCharsetEncoder *enc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoOutputStreamWriter *create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharsetEncoder_(JavaIoOutputStream *outArg, JavaNioCharsetCharsetEncoder *enc);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoOutputStreamWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoOutputStreamWriter")
