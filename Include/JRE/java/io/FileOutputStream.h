//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/FileOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoFileOutputStream")
#ifdef RESTRICT_JavaIoFileOutputStream
#define INCLUDE_ALL_JavaIoFileOutputStream 0
#else
#define INCLUDE_ALL_JavaIoFileOutputStream 1
#endif
#undef RESTRICT_JavaIoFileOutputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoFileOutputStream_) && (INCLUDE_ALL_JavaIoFileOutputStream || defined(INCLUDE_JavaIoFileOutputStream))
#define JavaIoFileOutputStream_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;
@class JavaIoFile;
@class JavaIoFileDescriptor;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaNioChannelsFileChannel;

/*!
 @brief A file output stream is an output stream for writing data to a 
 <code>File</code> or to a <code>FileDescriptor</code>.Whether or not
  a file is available or may be created depends upon the underlying
  platform.
 Some platforms, in particular, allow a file to be opened
  for writing by only one <tt>FileOutputStream</tt> (or other
  file-writing object) at a time.  In such situations the constructors in
  this class will fail if the file involved is already open. 
 <p><code>FileOutputStream</code> is meant for writing streams of raw bytes
  such as image data. For writing streams of characters, consider using 
 <code>FileWriter</code>.
 @author Arthur van Hoff
 - seealso: java.io.File
 - seealso: java.io.FileDescriptor
 - seealso: java.io.FileInputStream
 - seealso: java.nio.file.Files#newOutputStream
 @since JDK1.0
 */
@interface JavaIoFileOutputStream : JavaIoOutputStream

#pragma mark Public

/*!
 @brief Creates a file output stream to write to the file represented by
  the specified <code>File</code> object.A new 
 <code>FileDescriptor</code> object is created to represent this
  file connection.
 <p>
  First, if there is a security manager, its <code>checkWrite</code>
  method is called with the path represented by the <code>file</code>
  argument as its argument. 
 <p>
  If the file exists but is a directory rather than a regular file, does
  not exist but cannot be created, or cannot be opened for any other
  reason then a <code>FileNotFoundException</code> is thrown.
 @param file the file to be opened for writing.
 @throw FileNotFoundExceptionif the file exists but is a directory
                    rather than a regular file, does not exist but cannot
                    be created, or cannot be opened for any other reason
 @throw SecurityExceptionif a security manager exists and its
                <code>checkWrite</code> method denies write access
                to the file.
 - seealso: java.io.File#getPath()
 - seealso: java.lang.SecurityException
 - seealso: java.lang.SecurityManager#checkWrite(java.lang.String)
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Creates a file output stream to write to the file represented by
  the specified <code>File</code> object.If the second argument is 
 <code>true</code>, then bytes will be written to the end of the file
  rather than the beginning.
 A new <code>FileDescriptor</code> object is
  created to represent this file connection. 
 <p>
  First, if there is a security manager, its <code>checkWrite</code>
  method is called with the path represented by the <code>file</code>
  argument as its argument. 
 <p>
  If the file exists but is a directory rather than a regular file, does
  not exist but cannot be created, or cannot be opened for any other
  reason then a <code>FileNotFoundException</code> is thrown.
 @param file the file to be opened for writing.
 @param append if  <code> true </code> , then bytes will be written                    to the end of the file rather than the beginning
 @throw FileNotFoundExceptionif the file exists but is a directory
                    rather than a regular file, does not exist but cannot
                    be created, or cannot be opened for any other reason
 @throw SecurityExceptionif a security manager exists and its
                <code>checkWrite</code> method denies write access
                to the file.
 - seealso: java.io.File#getPath()
 - seealso: java.lang.SecurityException
 - seealso: java.lang.SecurityManager#checkWrite(java.lang.String)
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                 withBoolean:(jboolean)append;

/*!
 @brief Creates a file output stream to write to the specified file
  descriptor, which represents an existing connection to an actual
  file in the file system.
 <p>
  First, if there is a security manager, its <code>checkWrite</code>
  method is called with the file descriptor <code>fdObj</code>
  argument as its argument. 
 <p>
  If <code>fdObj</code> is null then a <code>NullPointerException</code>
  is thrown. 
 <p>
  This constructor does not throw an exception if <code>fdObj</code>
  is <code>invalid</code>.
  However, if the methods are invoked on the resulting stream to attempt
  I/O on the stream, an <code>IOException</code> is thrown. 
 <p>
  Android-specific warning: <code>close()</code> method doesn't close the <code>fdObj</code> provided,
  because this object doesn't own the file descriptor, but the caller does. The caller can
  call <code>android.system.Os.close(FileDescriptor)</code> to close the fd.
 @param fdObj the file descriptor to be opened for writing
 */
- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fdObj;

/*!
 @brief Internal constructor for <code>FileOutputStream</code> objects where the file descriptor
  is owned by this tream.
 */
- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fdObj
                                           withBoolean:(jboolean)isFdOwner;

/*!
 @brief Creates a file output stream to write to the file with the
  specified name.A new <code>FileDescriptor</code> object is
  created to represent this file connection.
 <p>
  First, if there is a security manager, its <code>checkWrite</code>
  method is called with <code>name</code> as its argument. 
 <p>
  If the file exists but is a directory rather than a regular file, does
  not exist but cannot be created, or cannot be opened for any other
  reason then a <code>FileNotFoundException</code> is thrown.
 @param name the system-dependent filename
 @throw FileNotFoundExceptionif the file exists but is a directory
                    rather than a regular file, does not exist but cannot
                    be created, or cannot be opened for any other reason
 @throw SecurityExceptionif a security manager exists and its
                <code>checkWrite</code> method denies write access
                to the file.
 - seealso: java.lang.SecurityManager#checkWrite(java.lang.String)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Creates a file output stream to write to the file with the specified
  name.If the second argument is <code>true</code>, then
  bytes will be written to the end of the file rather than the beginning.
 A new <code>FileDescriptor</code> object is created to represent this
  file connection. 
 <p>
  First, if there is a security manager, its <code>checkWrite</code>
  method is called with <code>name</code> as its argument. 
 <p>
  If the file exists but is a directory rather than a regular file, does
  not exist but cannot be created, or cannot be opened for any other
  reason then a <code>FileNotFoundException</code> is thrown.
 @param name the system-dependent file name
 @param append if  <code> true </code> , then bytes will be written                    to the end of the file rather than the beginning
 @throw FileNotFoundExceptionif the file exists but is a directory
                    rather than a regular file, does not exist but cannot
                    be created, or cannot be opened for any other reason.
 @throw SecurityExceptionif a security manager exists and its
                <code>checkWrite</code> method denies write access
                to the file.
 - seealso: java.lang.SecurityManager#checkWrite(java.lang.String)
 @since JDK1.1
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                               withBoolean:(jboolean)append;

/*!
 @brief Closes this file output stream and releases any system resources
  associated with this stream.This file output stream may no longer
  be used for writing bytes.
 <p> If this stream has an associated channel then the channel is closed
  as well.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)close;

/*!
 @brief Returns the unique <code>FileChannel</code>
  object associated with this file output stream.
 <p> The initial <code>position</code>
  of the returned channel will be equal to the
  number of bytes written to the file so far unless this stream is in
  append mode, in which case it will be equal to the size of the file.
  Writing bytes to this stream will increment the channel's position
  accordingly.  Changing the channel's position, either explicitly or by
  writing, will change this stream's file position.
 @return the file channel associated with this file output stream
 @since 1.4
 */
- (JavaNioChannelsFileChannel *)getChannel;

/*!
 @brief Returns the file descriptor associated with this stream.
 @return the <code>FileDescriptor</code> object that represents
           the connection to the file in the file system being used
           by this <code>FileOutputStream</code> object.
 @throw IOExceptionif an I/O error occurs.
 - seealso: java.io.FileDescriptor
 */
- (JavaIoFileDescriptor *)getFD;

/*!
 @brief Writes <code>b.length</code> bytes from the specified byte array
  to this file output stream.
 @param b the data.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)writeWithByteArray:(IOSByteArray *)b;

/*!
 @brief Writes <code>len</code> bytes from the specified byte array
  starting at offset <code>off</code> to this file output stream.
 @param b the data.
 @param off the start offset in the data.
 @param len the number of bytes to write.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes the specified byte to this file output stream.Implements
  the <code>write</code> method of <code>OutputStream</code>.
 @param b the byte to be written.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)writeWithInt:(jint)b;

#pragma mark Protected

/*!
 @brief Cleans up the connection to the file, and ensures that the 
 <code>close</code> method of this file output stream is
  called when there are no more references to this stream.
 @throw IOExceptionif an I/O error occurs.
 - seealso: java.io.FileInputStream#close()
 */
- (void)java_finalize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoFileOutputStream)

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithNSString_(JavaIoFileOutputStream *self, NSString *name);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithNSString_withBoolean_(JavaIoFileOutputStream *self, NSString *name, jboolean append);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithNSString_withBoolean_(NSString *name, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithNSString_withBoolean_(NSString *name, jboolean append);

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithJavaIoFile_(JavaIoFileOutputStream *self, JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(JavaIoFileOutputStream *self, JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithJavaIoFileDescriptor_(JavaIoFileOutputStream *self, JavaIoFileDescriptor *fdObj);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *fdObj) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *fdObj);

FOUNDATION_EXPORT void JavaIoFileOutputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileOutputStream *self, JavaIoFileDescriptor *fdObj, jboolean isFdOwner);

FOUNDATION_EXPORT JavaIoFileOutputStream *new_JavaIoFileOutputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileDescriptor *fdObj, jboolean isFdOwner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileOutputStream *create_JavaIoFileOutputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileDescriptor *fdObj, jboolean isFdOwner);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoFileOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoFileOutputStream")
