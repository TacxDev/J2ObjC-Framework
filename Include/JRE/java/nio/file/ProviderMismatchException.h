//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/ProviderMismatchException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileProviderMismatchException")
#ifdef RESTRICT_JavaNioFileProviderMismatchException
#define INCLUDE_ALL_JavaNioFileProviderMismatchException 0
#else
#define INCLUDE_ALL_JavaNioFileProviderMismatchException 1
#endif
#undef RESTRICT_JavaNioFileProviderMismatchException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileProviderMismatchException_) && (INCLUDE_ALL_JavaNioFileProviderMismatchException || defined(INCLUDE_JavaNioFileProviderMismatchException))
#define JavaNioFileProviderMismatchException_

#define RESTRICT_JavaLangIllegalArgumentException 1
#define INCLUDE_JavaLangIllegalArgumentException 1
#include "java/lang/IllegalArgumentException.h"

@class JavaLangLong;
@class JavaLangThrowable;

/*!
 @brief Unchecked exception thrown when an attempt is made to invoke a method on an
  object created by one file system provider with a parameter created by a
  different file system provider.
 @since 1.7
 */
@interface JavaNioFileProviderMismatchException : JavaLangIllegalArgumentException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs an instance of this class.
 @param msg the detail message
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileProviderMismatchException)

inline jlong JavaNioFileProviderMismatchException_get_serialVersionUID(void);
#define JavaNioFileProviderMismatchException_serialVersionUID 4990847485741612530LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioFileProviderMismatchException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaNioFileProviderMismatchException_init(JavaNioFileProviderMismatchException *self);

FOUNDATION_EXPORT JavaNioFileProviderMismatchException *new_JavaNioFileProviderMismatchException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileProviderMismatchException *create_JavaNioFileProviderMismatchException_init(void);

FOUNDATION_EXPORT void JavaNioFileProviderMismatchException_initWithNSString_(JavaNioFileProviderMismatchException *self, NSString *msg);

FOUNDATION_EXPORT JavaNioFileProviderMismatchException *new_JavaNioFileProviderMismatchException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileProviderMismatchException *create_JavaNioFileProviderMismatchException_initWithNSString_(NSString *msg);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileProviderMismatchException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileProviderMismatchException")
