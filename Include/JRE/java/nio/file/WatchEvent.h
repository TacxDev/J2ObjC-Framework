//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/WatchEvent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileWatchEvent")
#ifdef RESTRICT_JavaNioFileWatchEvent
#define INCLUDE_ALL_JavaNioFileWatchEvent 0
#else
#define INCLUDE_ALL_JavaNioFileWatchEvent 1
#endif
#undef RESTRICT_JavaNioFileWatchEvent

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileWatchEvent_) && (INCLUDE_ALL_JavaNioFileWatchEvent || defined(INCLUDE_JavaNioFileWatchEvent))
#define JavaNioFileWatchEvent_

@class JavaLangInteger;
@protocol JavaNioFileWatchEvent_Kind;

/*!
 @brief An event or a repeated event for an object that is registered with a <code>WatchService</code>
 .
 <p> An event is classified by its <code>kind</code> and has a <code>count</code>
  to indicate the number of times that the event has been
  observed. This allows for efficient representation of repeated events. The 
 <code>context</code> method returns any context associated with
  the event. In the case of a repeated event then the context is the same for
  all events. 
 <p> Watch events are immutable and safe for use by multiple concurrent
  threads.
 @since 1.7
 */
@protocol JavaNioFileWatchEvent < JavaObject >

/*!
 @brief Returns the event kind.
 @return the event kind
 */
- (id<JavaNioFileWatchEvent_Kind>)kind;

/*!
 @brief Returns the event count.If the event count is greater than <code>1</code>
  then this is a repeated event.
 @return the event count
 */
- (jint)count;

/*!
 @brief Returns the context for the event.
 <p> In the case of <code>ENTRY_CREATE</code>,
  <code>ENTRY_DELETE</code>, and <code>ENTRY_MODIFY</code>
  events the context is
  a <code>Path</code> that is the <code>relative</code> path between
  the directory registered with the watch service, and the entry that is
  created, deleted, or modified.
 @return the event context; may be <code>null</code>
 */
- (id)context;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileWatchEvent)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileWatchEvent)

#endif

#if !defined (JavaNioFileWatchEvent_Kind_) && (INCLUDE_ALL_JavaNioFileWatchEvent || defined(INCLUDE_JavaNioFileWatchEvent_Kind))
#define JavaNioFileWatchEvent_Kind_

@class IOSClass;

/*!
 @brief An event kind, for the purposes of identification.
 @since 1.7
 - seealso: StandardWatchEventKinds
 */
@protocol JavaNioFileWatchEvent_Kind < JavaObject >

/*!
 @brief Returns the name of the event kind.
 @return the name of the event kind
 */
- (NSString *)name;

/*!
 @brief Returns the type of the <code>context</code> value.
 @return the type of the context value
 */
- (IOSClass *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileWatchEvent_Kind)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileWatchEvent_Kind)

#endif

#if !defined (JavaNioFileWatchEvent_Modifier_) && (INCLUDE_ALL_JavaNioFileWatchEvent || defined(INCLUDE_JavaNioFileWatchEvent_Modifier))
#define JavaNioFileWatchEvent_Modifier_

/*!
 @brief An event modifier that qualifies how a <code>Watchable</code> is registered
  with a <code>WatchService</code>.
 <p> This release does not define any <em>standard</em> modifiers.
 @since 1.7
 - seealso: Watchable#register
 */
@protocol JavaNioFileWatchEvent_Modifier < JavaObject >

/*!
 @brief Returns the name of the modifier.
 @return the name of the modifier
 */
- (NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileWatchEvent_Modifier)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileWatchEvent_Modifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileWatchEvent")
