//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/WatchService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileWatchService")
#ifdef RESTRICT_JavaNioFileWatchService
#define INCLUDE_ALL_JavaNioFileWatchService 0
#else
#define INCLUDE_ALL_JavaNioFileWatchService 1
#endif
#undef RESTRICT_JavaNioFileWatchService

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileWatchService_) && (INCLUDE_ALL_JavaNioFileWatchService || defined(INCLUDE_JavaNioFileWatchService))
#define JavaNioFileWatchService_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class JavaLangLong;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaNioFileWatchKey;

/*!
 @brief A watch service that <em>watches</em> registered objects for changes and
  events.For example a file manager may use a watch service to monitor a
  directory for changes so that it can update its display of the list of files
  when files are created or deleted.
 <p> A <code>Watchable</code> object is registered with a watch service by invoking
  its <code>register</code> method, returning a <code>WatchKey</code>
  to represent the registration. When an event for an object is detected the
  key is <em>signalled</em>, and if not currently signalled, it is queued to
  the watch service so that it can be retrieved by consumers that invoke the 
 <code>poll</code> or <code>take</code> methods to retrieve keys
  and process events. Once the events have been processed the consumer
  invokes the key's <code>reset</code> method to reset the key which
  allows the key to be signalled and re-queued with further events. 
 <p> Registration with a watch service is cancelled by invoking the key's 
 <code>cancel</code> method. A key that is queued at the time that
  it is cancelled remains in the queue until it is retrieved. Depending on the
  object, a key may be cancelled automatically. For example, suppose a
  directory is watched and the watch service detects that it has been deleted
  or its file system is no longer accessible. When a key is cancelled in this
  manner it is signalled and queued, if not currently signalled. To ensure
  that the consumer is notified the return value from the <code>reset</code>
  method indicates if the key is valid. 
 <p> A watch service is safe for use by multiple concurrent consumers. To
  ensure that only one consumer processes the events for a particular object at
  any time then care should be taken to ensure that the key's <code>reset</code>
  method is only invoked after its events have been processed. The <code>close</code>
  method may be invoked at any time to close the service causing
  any threads waiting to retrieve keys, to throw <code>ClosedWatchServiceException</code>
 .
  
 <p> File systems may report events faster than they can be retrieved or
  processed and an implementation may impose an unspecified limit on the number
  of events that it may accumulate. Where an implementation <em>knowingly</em>
  discards events then it arranges for the key's <code>pollEvents</code>
  method to return an element with an event type of <code>OVERFLOW</code>
 . This event can be used by the
  consumer as a trigger to re-examine the state of the object. 
 <p> When an event is reported to indicate that a file in a watched directory
  has been modified then there is no guarantee that the program (or programs)
  that have modified the file have completed. Care should be taken to coordinate
  access with other programs that may be updating the file.
  The <code>FileChannel</code> class defines methods
  to lock regions of a file against access by other programs. 
 <h2>Platform dependencies</h2>
  
 <p> The implementation that observes events from the file system is intended
  to map directly on to the native file event notification facility where
  available, or to use a primitive mechanism, such as polling, when a native
  facility is not available. Consequently, many of the details on how events
  are detected, their timeliness, and whether their ordering is preserved are
  highly implementation specific. For example, when a file in a watched
  directory is modified then it may result in a single <code>ENTRY_MODIFY</code>
  event in some
  implementations but several events in other implementations. Short-lived
  files (meaning files that are deleted very quickly after they are created)
  may not be detected by primitive implementations that periodically poll the
  file system to detect changes. 
 <p> If a watched file is not located on a local storage device then it is
  implementation specific if changes to the file can be detected. In particular,
  it is not required that changes to files carried out on remote systems be
  detected.
 @since 1.7
 - seealso: FileSystem#newWatchService
 */
@protocol JavaNioFileWatchService < JavaIoCloseable, JavaObject >

/*!
 @brief Closes this watch service.
 <p> If a thread is currently blocked in the <code>take</code> or <code>poll</code>
  methods waiting for a key to be queued then
  it immediately receives a <code>ClosedWatchServiceException</code>. Any
  valid keys associated with this watch service are <code>invalidated</code>
 .
  
 <p> After a watch service is closed, any further attempt to invoke
  operations upon it will throw <code>ClosedWatchServiceException</code>.
  If this watch service is already closed then invoking this method
  has no effect.
 @throw IOException
 if an I/O error occurs
 */
- (void)close;

/*!
 @brief Retrieves and removes the next watch key, or <code>null</code> if none are
  present.
 @return the next watch key, or <code>null</code>
 @throw ClosedWatchServiceException
 if this watch service is closed
 */
- (id<JavaNioFileWatchKey>)poll;

/*!
 @brief Retrieves and removes the next watch key, waiting if necessary up to the
  specified wait time if none are yet present.
 @param timeout how to wait before giving up, in units of unit
 @param unit a 
 <code>TimeUnit</code>  determining how to interpret the timeout           parameter
 @return the next watch key, or <code>null</code>
 @throw ClosedWatchServiceException
 if this watch service is closed, or it is closed while waiting
           for the next key
 @throw InterruptedException
 if interrupted while waiting
 */
- (id<JavaNioFileWatchKey>)pollWithLong:(jlong)timeout
         withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Retrieves and removes next watch key, waiting if none are yet present.
 @return the next watch key
 @throw ClosedWatchServiceException
 if this watch service is closed, or it is closed while waiting
           for the next key
 @throw InterruptedException
 if interrupted while waiting
 */
- (id<JavaNioFileWatchKey>)take;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileWatchService)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileWatchService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileWatchService")
