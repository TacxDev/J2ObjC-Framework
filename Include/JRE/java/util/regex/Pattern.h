//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/regex/Pattern.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilRegexPattern")
#ifdef RESTRICT_JavaUtilRegexPattern
#define INCLUDE_ALL_JavaUtilRegexPattern 0
#else
#define INCLUDE_ALL_JavaUtilRegexPattern 1
#endif
#undef RESTRICT_JavaUtilRegexPattern

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilRegexPattern_) && (INCLUDE_ALL_JavaUtilRegexPattern || defined(INCLUDE_JavaUtilRegexPattern))
#define JavaUtilRegexPattern_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaUtilRegexMatcher;
@protocol JavaLangCharSequence;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilStreamStream;

/*!
 @brief A compiled representation of a regular expression.
 <p> A regular expression, specified as a string, must first be compiled into
  an instance of this class.  The resulting pattern can then be used to create
  a <code>Matcher</code> object that can match arbitrary character sequences
  against the regular
  expression.  All of the state involved in performing a match resides in the
  matcher, so many matchers can share the same pattern. 
 <p> A typical invocation sequence is thus 
 <blockquote>@code

  Pattern p = Pattern.<code>compile</code>("a*b");
  Matcher m = p.<code>matcher</code>("aaaaab");
  boolean b = m.<code>matches</code>();
@endcode</blockquote>
  
 <p> A <code>matches</code> method is defined by this class as a
  convenience for when a regular expression is used just once.  This method
  compiles an expression and matches an input sequence against it in a single
  invocation.  The statement 
 <blockquote>@code

  boolean b = Pattern.matches("a*b", "aaaaab");
@endcode</blockquote>
  is equivalent to the three statements above, though for repeated matches it
  is less efficient since it does not allow the compiled pattern to be reused. 
 <p> Instances of this class are immutable and are safe for use by multiple
  concurrent threads.  Instances of the <code>Matcher</code> class are not safe for
  such use. 
 <h2><a id="sum">Summary of regular-expression constructs</a></h2>
  
 <table class="borderless">
  <caption style="display:none">Regular expression constructs, and what they match</caption>
  <thead style="text-align:left">
  <tr>
  <th id="construct">Construct</th>
  <th id="matches">Matches</th>
  </tr>
  </thead>
  <tbody style="text-align:left">
  
 <tr><th colspan="2" style="padding-top:20px" id="characters">Characters</th></tr>
  
 <tr><th style="vertical-align:top; font-weight: normal" id="x"><i>x</i></th>
      <td headers="matches characters x">The character <i>x</i></td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="backslash"><code>\\</code></th>
      <td headers="matches characters backslash">The backslash character</td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="octal_n"><code>\0</code><i>n</i></th>
      <td headers="matches characters octal_n">The character with octal value <code>0</code><i>n</i>
          (0&nbsp;<code><=</code>&nbsp;<i>n</i>&nbsp;<code><=</code>&nbsp;7)</td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="octal_nn"><code>\0</code><i>nn</i></th>
      <td headers="matches characters octal_nn">The character with octal value <code>0</code><i>nn</i>
          (0&nbsp;<code><=</code>&nbsp;<i>n</i>&nbsp;<code><=</code>&nbsp;7)</td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="octal_nnn"><code>\0</code><i>mnn</i></th>
      <td headers="matches characters octal_nnn">The character with octal value <code>0</code><i>mnn</i>
          (0&nbsp;<code><=</code>&nbsp;<i>m</i>&nbsp;<code><=</code>&nbsp;3,
          0&nbsp;<code><=</code>&nbsp;<i>n</i>&nbsp;<code><=</code>&nbsp;7)</td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="hex_hh"><code>\x</code><i>hh</i></th>
      <td headers="matches characters hex_hh">The character with hexadecimal value <code>0x</code><i>hh</i></td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="hex_hhhh"><code>&#92;u</code><i>hhhh</i></th>
      <td headers="matches characters hex_hhhh">The character with hexadecimal&nbsp;value&nbsp;<code>0x</code><i>hhhh</i></td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="hex_h_h"><code>&#92;x</code><i>{h...h}</i></th>
      <td headers="matches characters hex_h_h">The character with hexadecimal value <code>0x</code><i>h...h</i>
          (<code>Character.MIN_CODE_POINT</code>
          &nbsp;&lt;=&nbsp;<code>0x</code><i>h...h</i>&nbsp;&lt;=&nbsp;
           <code>Character.MAX_CODE_POINT</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight: normal" id="unicode_name"><code>&#92;N{</code><i>name</i><code>}</code></th>
      <td headers="matches characters unicode_name">The character with Unicode character name <i>'name'</i></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="tab"><code>\t</code></th>
      <td headers="matches characters tab">The tab character (<code>'&#92;u0009'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="newline"><code>\n</code></th>
      <td headers="matches characters newline">The newline (line feed) character (<code>'&#92;u000A'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="return"><code>\r</code></th>
      <td headers="matches characters return">The carriage-return character (<code>'&#92;u000D'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="form_feed"><code>\f</code></th>
      <td headers="matches characters form_feed">The form-feed character (<code>'&#92;u000C'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="bell"><code>\a</code></th>
      <td headers="matches characters bell">The alert (bell) character (<code>'&#92;u0007'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="escape"><code>\e</code></th>
      <td headers="matches characters escape">The escape character (<code>'&#92;u001B'</code>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="ctrl_x"><code>\c</code><i>x</i></th>
      <td headers="matches characters ctrl_x">The control character corresponding to <i>x</i></td></tr>
   <tr><th colspan="2" style="padding-top:20px" id="classes">Character classes</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="simple"><code>[abc]</code></th>
      <td headers="matches classes simple"><code>a</code>, <code>b</code>, or <code>c</code> (simple class)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="negation"><code>[^abc]</code></th>
      <td headers="matches classes negation">Any character except <code>a</code>, <code>b</code>, or <code>c</code> (negation)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="range"><code>[a-zA-Z]</code></th>
      <td headers="matches classes range"><code>a</code> through <code>z</code>
          or <code>A</code> through <code>Z</code>, inclusive (range)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="union"><code>[a-d[m-p]]</code></th>
      <td headers="matches classes union"><code>a</code> through <code>d</code>,
       or <code>m</code> through <code>p</code>: <code>[a-dm-p]</code> (union)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="intersection"><code>[a-z&&[def]]</code></th>
      <td headers="matches classes intersection"><code>d</code>, <code>e</code>, or <code>f</code> (intersection)</tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="subtraction1"><code>[a-z&&[^bc]]</code></th>
      <td headers="matches classes subtraction1"><code>a</code> through <code>z</code>,
          except for <code>b</code> and <code>c</code>: <code>[ad-z]</code> (subtraction)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="subtraction2"><code>[a-z&&[^m-p]]</code></th>
      <td headers="matches classes subtraction2"><code>a</code> through <code>z</code>,
           and not <code>m</code> through <code>p</code>: <code>[a-lq-z]</code>(subtraction)</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="predef">Predefined character classes</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="any"><code>.</code></th>
      <td headers="matches predef any">Any character (may or may not match <a href="#lt">line terminators</a>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="digit"><code>\d</code></th>
      <td headers="matches predef digit">A digit: <code>\p{IsDigit}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_digit"><code>\D</code></th>
      <td headers="matches predef non_digit">A non-digit: <code>[^\d]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="horiz_white"><code>\h</code></th>
      <td headers="matches predef horiz_white">A horizontal whitespace character:
      <code>[ \t\xA0&#92;u1680&#92;u180e&#92;u2000-&#92;u200a&#92;u202f&#92;u205f&#92;u3000]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_horiz_white"><code>\H</code></th>
      <td headers="matches predef non_horiz_white">A non-horizontal whitespace character: <code>[^\h]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="white"><code>\s</code></th>
      <td headers="matches predef white">A whitespace character: <code>\p{IsWhite_Space}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_white"><code>\S</code></th>
      <td headers="matches predef non_white">A non-whitespace character: <code>[^\s]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="vert_white"><code>\v</code></th>
      <td headers="matches predef vert_white">A vertical whitespace character: <code>[\n\x0B\f\r\x85&#92;u2028&#92;u2029]</code>
      </td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_vert_white"><code>\V</code></th>
      <td headers="matches predef non_vert_white">A non-vertical whitespace character: <code>[^\v]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="word"><code>\w</code></th>
      <td headers="matches predef word">A word character: <code>[\p{alpha}\p{gc=Mark}\p{digit}\p{gc=Connector_Punctuation}\p{Join_Control}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_word"><code>\W</code></th>
      <td headers="matches predef non_word">A non-word character: <code>[^\w]</code></td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="posix"><b>POSIX character classes (Unicode-aware)</b></th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="Lower"><code>\p{Lower}</code></th>
      <td headers="matches posix Lower">A lower-case alphabetic character: <code>\p{IsLowercase}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Upper"><code>\p{Upper}</code></th>
      <td headers="matches posix Upper">An upper-case alphabetic character:<code>\p{IsUppercase}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="ASCII"><code>\p{ASCII}</code></th>
      <td headers="matches posix ASCII">All ASCII:<code>[\x00-\x7F]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Alpha"><code>\p{Alpha}</code></th>
      <td headers="matches posix Alpha">An alphabetic character:<code>[\p{IsAlphabetic}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Digit"><code>\p{IsDigit}</code></th>
      <td headers="matches posix Digit">A decimal digit: <code>\p{gc=Decimal_Number}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Alnum"><code>\p{Alnum}</code></th>
      <td headers="matches posix Alnum">An alphanumeric character:<code>[\p{Alpha}\p{Digit}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Punct"><code>\p{Punct}</code></th>
      <td headers="matches posix Punct">Punctuation: <code>\p{IsPunctuation}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Graph"><code>\p{Graph}</code></th>
      <td headers="matches posix Graph">A visible character:
      <code>[^p{space}\p{gc=Control}\p{gc=Surrogate}\p{gc=Unassigned}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Print"><code>\p{Print}</code></th>
      <td headers="matches posix Print">A printable character: <code>[\p{Graph}\p{Blank}&&[^\p{Cntrl}]]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Blank"><code>\p{Blank}</code></th>
      <td headers="matches posix Blank">A space or a tab: <code>[\p{gc=Space_Separator}\N{CHARACTER TABULATION}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Cntrl"><code>\p{Cntrl}</code></th>
      <td headers="matches posix Cntrl">A control character: <code>\p{gc=Control}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="XDigit"><code>\p{XDigit}</code></th>
      <td headers="matches posix XDigit">A hexadecimal digit: <code>[\p{gc=Decimal_Number}\p{IsHex_Digit}]</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Space"><code>\p{Space}</code></th>
      <td headers="matches posix Space">A whitespace character: <code>\p{IsWhite_Space}</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="PosixCompatible">POSIX-Compatible expression</th>
      <td headers="matches posix PosixCompatible">See <a href="http://www.unicode.org/reports/tr18/#Compatibility_Properties">Unicode documentation</a></td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="java">java.lang.Character classes (simple <a href="#jcc">java character type</a>)</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="javaLowerCase"><code>\p{javaLowerCase}</code></th>
      <td headers="matches java javaLowerCase">Equivalent to java.lang.Character.isLowerCase()</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="javaUpperCase"><code>\p{javaUpperCase}</code></th>
      <td headers="matches java javaUpperCase">Equivalent to java.lang.Character.isUpperCase()</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="javaWhitespace"><code>\p{javaWhitespace}</code></th>
      <td headers="matches java javaWhitespace">Equivalent to java.lang.Character.isWhitespace()</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="javaMirrored"><code>\p{javaMirrored}</code></th>
      <td headers="matches java javaMirrored">Equivalent to java.lang.Character.isMirrored()</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="unicode">Classes for Unicode scripts, blocks, categories and binary properties</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="IsLatin"><code>\p{IsLatin}</code></th>
      <td headers="matches unicode IsLatin">A Latin&nbsp;script character (<a href="#usc">script</a>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="InGreek"><code>\p{InGreek}</code></th>
      <td headers="matches unicode InGreek">A character in the Greek&nbsp;block (<a href="#ubc">block</a>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Lu"><code>\p{Lu}</code></th>
      <td headers="matches unicode Lu">An uppercase letter (<a href="#ucc">category</a>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="IsAlphabetic"><code>\p{IsAlphabetic}</code></th>
      <td headers="matches unicode IsAlphabetic">An alphabetic character (<a href="#ubpc">binary property</a>)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="Sc"><code>\p{Sc}</code></th>
      <td headers="matches unicode Sc">A currency symbol</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="not_InGreek"><code>\P{InGreek}</code></th>
      <td headers="matches unicode not_InGreek">Any character except one in the Greek block (negation)</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="not_uppercase"><code>[\p{L}&&[^\p{Lu}]]</code></th>
      <td headers="matches unicode not_uppercase">Any letter except an uppercase letter (subtraction)</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="bounds">Boundary matchers</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="begin_line"><code>^</code></th>
      <td headers="matches bounds begin_line">The beginning of a line</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="end_line"><code>$</code></th>
      <td headers="matches bounds end_line">The end of a line</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="word_boundary"><code>\b</code></th>
      <td headers="matches bounds word_boundary">A word boundary</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_word_boundary"><code>\B</code></th>
      <td headers="matches bounds non_word_boundary">A non-word boundary</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="begin_input"><code>\A</code></th>
      <td headers="matches bounds begin_input">The beginning of the input</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="end_prev_match"><code>\G</code></th>
      <td headers="matches bounds end_prev_match">The end of the previous match</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="end_input_except_term"><code>\Z</code></th>
      <td headers="matches bounds end_input_except_term">The end of the input but for the final
          <a href="#lt">terminator</a>, if&nbsp;any</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="end_input"><code>\z</code></th>
      <td headers="matches bounds end_input">The end of the input</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="linebreak">Linebreak matcher</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="any_unicode_linebreak"><code>\R</code></th>
      <td headers="matches linebreak any_unicode_linebreak">Any Unicode linebreak sequence, is equivalent to
      <code>&#92;u000D&#92;u000A|[&#92;u000A&#92;u000B&#92;u000C&#92;u000D&#92;u0085&#92;u2028&#92;u2029]
      </code></td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="grapheme">Unicode Extended Grapheme matcher</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="grapheme_any"><code>\X</code></th>
      <td headers="matches grapheme grapheme_any">Any Unicode extended grapheme cluster</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="greedy">Greedy quantifiers</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="greedy_once_or_not"><i>X</i><code>?</code></th>
      <td headers="matches greedy greedy_once_or_not"><i>X</i>, once or not at all</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="greedy_zero_or_more"><i>X</i><code>*</code></th>
      <td headers="matches greedy greedy_zero_or_more"><i>X</i>, zero or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="greedy_one_or_more"><i>X</i><code>+</code></th>
      <td headers="matches greedy greedy_one_or_more"><i>X</i>, one or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="greedy_exactly"><i>X</i><code>{</code><i>n</i><code>}</code></th>
      <td headers="matches greedy greedy_exactly"><i>X</i>, exactly <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="greedy_at_least"><i>X</i><code>{</code><i>n</i><code>,</code>}</th>
      <td headers="matches greedy greedy_at_least"><i>X</i>, at least <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="greedy_at_least_up_to"><i>X</i><code>{</code><i>n</i><code>,</code><i>m</i><code>}</code></th>
      <td headers="matches greedy greedy_at_least_up_to"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="reluc">Reluctant quantifiers</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="reluc_once_or_not"><i>X</i><code>??</code></th>
      <td headers="matches reluc reluc_once_or_not"><i>X</i>, once or not at all</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="reluc_zero_or_more"><i>X</i><code>*?</code></th>
      <td headers="matches reluc reluc_zero_or_more"><i>X</i>, zero or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="reluc_one_or_more"><i>X</i><code>+?</code></th>
      <td headers="matches reluc reluc_one_or_more"><i>X</i>, one or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="reluc_exactly"><i>X</i><code>{</code><i>n</i><code>}?</code></th>
      <td headers="matches reluc reluc_exactly"><i>X</i>, exactly <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="reluc_at_least"><i>X</i><code>{</code><i>n</i><code>,}?</code></th>
      <td headers="matches reluc reluc_at_least"><i>X</i>, at least <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="reluc_at_least_up_to"><i>X</i><code>{</code><i>n</i><code>,</code><i>m</i><code>}?</code></th>
      <td headers="matches reluc reluc_at_least_up_to"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="poss">Possessive quantifiers</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="poss_once_or_not"><i>X</i><code>?+</code></th>
      <td headers="matches poss poss_once_or_not"><i>X</i>, once or not at all</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="poss_zero_or_more"><i>X</i><code>*+</code></th>
      <td headers="matches poss poss_zero_or_more"><i>X</i>, zero or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="poss_one_or_more"><i>X</i><code>++</code></th>
      <td headers="matches poss poss_one_or_more"><i>X</i>, one or more times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="poss_exactly"><i>X</i><code>{</code><i>n</i><code>}+</code></th>
      <td headers="matches poss poss_exactly"><i>X</i>, exactly <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="poss_at_least"><i>X</i><code>{</code><i>n</i><code>,}+</code></th>
      <td headers="matches poss poss_at_least"><i>X</i>, at least <i>n</i> times</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="poss_at_least_up_to"><i>X</i><code>{</code><i>n</i><code>,</code><i>m</i><code>}+</code></th>
      <td headers="matches poss poss_at_least_up_to"><i>X</i>, at least <i>n</i> but not more than <i>m</i> times</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="logical">Logical operators</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="concat"><i>XY</i></th>
      <td headers="matches logical concat"><i>X</i> followed by <i>Y</i></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="alternate"><i>X</i><code>|</code><i>Y</i></th>
      <td headers="matches logical alternate">Either <i>X</i> or <i>Y</i></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="group"><code>(</code><i>X</i><code>)</code></th>
      <td headers="matches logical group">X, as a <a href="#cg">capturing group</a></td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="backref">Back references</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="back_nth"><code>\</code><i>n</i></th>
      <td headers="matches backref back_nth">Whatever the <i>n</i><sup>th</sup>
      <a href="#cg">capturing group</a> matched</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="back_named"><code>\</code><i>k</i>&lt;<i>name</i>&gt;</th>
      <td headers="matches backref back_named">Whatever the
      <a href="#groupname">named-capturing group</a> "name" matched. Only available for API 26 or above</td></tr>
  
 <tr><th colspan="2" style="padding-top:20px" id="quote">Quotation</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="quote_follow"><code>\</code></th>
      <td headers="matches quote quote_follow">Nothing, but quotes the following character</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="quote_begin"><code>\Q</code></th>
      <td headers="matches quote quote_begin">Nothing, but quotes all characters until <code>\E</code></td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="quote_end"><code>\E</code></th>
      <td headers="matches quote quote_end">Nothing, but ends quoting started by <code>\Q</code></td></tr>
      <!-- Metachars: !$()*+.<>?[\]^{|} -->
  
 <tr><th colspan="2" style="padding-top:20px" id="special">Special constructs (named-capturing and non-capturing)</th></tr>
  
 <tr><th style="vertical-align:top; font-weight:normal" id="named_group"><code>(?&lt;<a href="#groupname">name</a>&gt;</code><i>X</i><code>)</code></th>
      <td headers="matches special named_group"><i>X</i>, as a named-capturing group. Only available for API 26 or above.</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_capture_group"><code>(?:</code><i>X</i><code>)</code></th>
      <td headers="matches special non_capture_group"><i>X</i>, as a non-capturing group</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="flags"><code>(?idmsux-idmsux)&nbsp;</code></th>
  <a href="#UNIX_LINES">d</a> <a href="#MULTILINE">m</a> <a href="#DOTALL">s</a>
  <a href="#UNICODE_CASE">u</a> <a href="#COMMENTS">x</a> <a href="#UNICODE_CHARACTER_CLASS">U</a>
  on - off</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="non_capture_group_flags"><code>(?idmsuxU-idmsuxU:</code><i>X</i><code>)</code>&nbsp;&nbsp;</th>
      <td headers="matches special non_capture_group_flags"><i>X</i>, as a <a href="#cg">non-capturing group</a> with the
          given flags <a href="#CASE_INSENSITIVE">i</a> <a href="#UNIX_LINES">d</a>
  <a href="#MULTILINE">m</a> <a href="#DOTALL">s</a> <a href="#UNICODE_CASE">u</a>
  <a href="#COMMENTS">x</a> <a href="#UNICODE_CHARACTER_CLASS">U</a> on - off</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="pos_lookahead"><code>(?=</code><i>X</i><code>)</code></th>
      <td headers="matches special pos_lookahead"><i>X</i>, via zero-width positive lookahead</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="neg_lookahead"><code>(?!</code><i>X</i><code>)</code></th>
      <td headers="matches special neg_lookahead"><i>X</i>, via zero-width negative lookahead</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="pos_lookbehind"><code>(?<=</code><i>X</i><code>)</code></th>
      <td headers="matches special pos_lookbehind"><i>X</i>, via zero-width positive lookbehind</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="neg_lookbehind"><code>(?<!</code><i>X</i><code>)</code></th>
      <td headers="matches special neg_lookbehind"><i>X</i>, via zero-width negative lookbehind</td></tr>
  <tr><th style="vertical-align:top; font-weight:normal" id="indep_non_capture_group"><code>(?></code><i>X</i><code>)</code></th>
      <td headers="matches special indep_non_capture_group"><i>X</i>, as an independent, non-capturing group</td></tr>
  
 </tbody>
  </table>
  
 <hr>
  
 <h2><a id="bs">Backslashes, escapes, and quoting</a></h2>
  
 <p> The backslash character (<code>'\'</code>) serves to introduce escaped
  constructs, as defined in the table above, as well as to quote characters
  that otherwise would be interpreted as unescaped constructs.  Thus the
  expression <code>\\</code> matches a single backslash and <code>\{</code> matches a
  left brace. 
 <p> It is an error to use a backslash prior to any alphabetic character that
  does not denote an escaped construct; these are reserved for future
  extensions to the regular-expression language.  A backslash may be used
  prior to a non-alphabetic character regardless of whether that character is
  part of an unescaped construct. 
 <p> Backslashes within string literals in Java source code are interpreted
  as required by 
 <cite>The Java Language Specification</cite>
  as either Unicode escapes (section 3.3) or other character escapes (section 3.10.6)
  It is therefore necessary to double backslashes in string
  literals that represent regular expressions to protect them from
  interpretation by the Java bytecode compiler.  The string literal 
 <code>"&#92;b"</code>, for example, matches a single backspace character when
  interpreted as a regular expression, while <code>"\\b"</code> matches a
  word boundary.  The string literal <code>"\(hello\)"</code> is illegal
  and leads to a compile-time error; in order to match the string 
 <code>(hello)</code> the string literal <code>"\\(hello\\)"</code>
  must be used. 
 <h2><a id="cc">Character Classes</a></h2>
     <p> Character classes may appear within other character classes, and
     may be composed by the union operator (implicit) and the intersection
     operator (<code>&&</code>).
     The union operator denotes a class that contains every character that is
     in at least one of its operand classes.  The intersection operator
     denotes a class that contains every character that is in both of its
     operand classes.    
 <p> The precedence of character-class operators is as follows, from
     highest to lowest:    
 <table class="striped" style="margin-left: 2em;">
       <caption style="display:none">Precedence of character class operators.</caption>
       <thead>
       <tr><th scope="col">Precedence<th scope="col">Name<th scope="col">Example
       </thead>
       <tbody>
       <tr><th scope="row">1</th>
         <td>Literal escape&nbsp;&nbsp;&nbsp;&nbsp;</td>
         <td><code>\x</code></td></tr>
      <tr><th scope="row">2</th>
         <td>Grouping</td>
         <td><code>[...]</code></td></tr>
      <tr><th scope="row">3</th>
         <td>Range</td>
         <td><code>a-z</code></td></tr>
       <tr><th scope="row">4</th>
         <td>Union</td>
         <td><code>[a-e][i-u]</code></td></tr>
       <tr><th scope="row">5</th>
         <td>Intersection</td>
         <td><code>[a-z&&[aeiou]]</code></td></tr>
       </tbody>
     </table>
     <p> Note that a different set of metacharacters are in effect inside
     a character class than outside a character class. For instance, the
     regular expression <code>.</code> loses its special meaning inside a
     character class, while the expression <code>-</code> becomes a range
     forming metacharacter. 
 <h2><a id="lt">Line terminators</a></h2>
  
 <p> A <i>line terminator</i> is a one- or two-character sequence that marks
  the end of a line of the input character sequence.  The following are
  recognized as line terminators: 
 <ul>
    <li> A newline (line feed) character (<code>'\n'</code>),
    <li> A carriage-return character followed immediately by a newline
    character (<code>"\r\n"</code>),
    <li> A standalone carriage-return character (<code>'\r'</code>),
    <li> A next-line character (<code>'&#92;u0085'</code>),
    <li> A line-separator character (<code>'&#92;u2028'</code>), or
    <li> A paragraph-separator character (<code>'&#92;u2029'</code>).
  
 </ul>
  <p>If <code>UNIX_LINES</code> mode is activated, then the only line terminators
  recognized are newline characters. 
 <p> The regular expression <code>.</code> matches any character except a line
  terminator unless the <code>DOTALL</code> flag is specified. 
 <p> By default, the regular expressions <code>^</code> and <code>$</code> ignore
  line terminators and only match at the beginning and the end, respectively,
  of the entire input sequence. If <code>MULTILINE</code> mode is activated then 
 <code>^</code> matches at the beginning of input and after any line terminator
  except at the end of input. When in <code>MULTILINE</code> mode <code>$</code>
  matches just before a line terminator or the end of the input sequence. 
 <h2><a id="cg">Groups and capturing</a></h2>
  
 <h3><a id="gnumber">Group number</a></h3>
  <p> Capturing groups are numbered by counting their opening parentheses from
  left to right.  In the expression <code>((A)(B(C)))</code>, for example, there
  are four such groups: </p>
  
 <ol style="margin-left:2em;">
    <li> <code>((A)(B(C)))</code>
    <li> <code>(A)</code>
    <li> <code>(B(C))</code>
    <li> <code>(C)</code>
  </ol>
  
 <p> Group zero always stands for the entire expression. 
 <p> Capturing groups are so named because, during a match, each subsequence
  of the input sequence that matches such a group is saved.  The captured
  subsequence may be used later in the expression, via a back reference, and
  may also be retrieved from the matcher once the match operation is complete. 
 <h3><a id="groupname">Group name</a></h3>
  <p>The constructs and APIs are available since API level 26. A capturing group
  can also be assigned a "name", a <code>named-capturing group</code>,
  and then be back-referenced later by the "name". Group names are composed of
  the following characters. The first character must be a <code>letter</code>.
  
 <ul>
    <li> The uppercase letters <code>'A'</code> through <code>'Z'</code>
         (<code>'&#92;u0041'</code>&nbsp;through&nbsp;<code>'&#92;u005a'</code>),
    <li> The lowercase letters <code>'a'</code> through <code>'z'</code>
         (<code>'&#92;u0061'</code>&nbsp;through&nbsp;<code>'&#92;u007a'</code>),
    <li> The digits <code>'0'</code> through <code>'9'</code>
         (<code>'&#92;u0030'</code>&nbsp;through&nbsp;<code>'&#92;u0039'</code>),
  </ul>
  
 <p> A <code>named-capturing group</code> is still numbered as described in 
 <a href="#gnumber">Group number</a>.
  
 <p> The captured input associated with a group is always the subsequence
  that the group most recently matched.  If a group is evaluated a second time
  because of quantification then its previously-captured value, if any, will
  be retained if the second evaluation fails.  Matching the string 
 <code>"aba"</code> against the expression <code>(a(b)?)+</code>, for example, leaves
  group two set to <code>"b"</code>.  All captured input is discarded at the
  beginning of each match. 
 <p> Groups beginning with <code>(?</code> are either pure, <i>non-capturing</i> groups
  that do not capture text and do not count towards the group total, or 
 <i>named-capturing</i> group. 
 <h2> Unicode support </h2>
  
 <p> This class is in conformance with Level 1 of <a href="http://www.unicode.org/reports/tr18/">
 <i>Unicode Technical
  Standard #18: Unicode Regular Expressions</i></a>, plus RL2.1
  Canonical Equivalents and RL2.2 Extended Grapheme Clusters. 
 <p>
  <b>Unicode escape sequences</b> such as <code>&#92;u2014</code> in Java source code
  are processed as described in section 3.3 of 
 <cite>The Java Language Specification</cite>.
  Such escape sequences are also implemented directly by the regular-expression
  parser so that Unicode escapes can be used in expressions that are read from
  files or from the keyboard.  Thus the strings <code>"&#92;u2014"</code> and 
 <code>"\\u2014"</code>, while not equal, compile into the same pattern, which
  matches the character with hexadecimal value <code>0x2014</code>.
  <p>
  A Unicode character can also be represented by using its <b>Hex notation</b>
  (hexadecimal code point value) directly as described in construct 
 <code>&#92;x{...}</code>, for example a supplementary character U+2011F can be
  specified as <code>&#92;x{2011F}</code>, instead of two consecutive Unicode escape
  sequences of the surrogate pair <code>&#92;uD840</code><code>&#92;uDD1F</code>.
  <p>
  <b>Unicode character names</b> are supported by the named character construct 
 <code>\N{</code>...<code>}</code>, for example, <code>\N{WHITE SMILING FACE}</code>
  specifies character <code>&#92;u263A</code>. The character names supported
  by this class are the valid Unicode character names matched by 
 <code>java.lang.Character.codePointOf(String) Character.codePointOf(name)</code>.
  <p>
  <a href="http://www.unicode.org/reports/tr18/#Default_Grapheme_Clusters">
  <b>Unicode extended grapheme clusters</b></a> are supported by the grapheme
  cluster matcher <code>\X</code>.
  <p>
  Unicode scripts, blocks, categories and binary properties are written with
  the <code>\p</code> and <code>\P</code> constructs as in Perl. 
 <code>\p{</code><i>prop</i><code>}</code> matches if
  the input has the property <i>prop</i>, while <code>\P{</code><i>prop</i><code>}</code>
  does not match if the input has that property. 
 <p>
  Scripts, blocks, categories and binary properties can be used both inside
  and outside of a character class. 
 <p>
  <b><a id="usc">Scripts</a></b> are specified either with the prefix <code>Is</code>, as in 
 <code>IsHiragana</code>, or by using  the <code>script</code> keyword (or its short
  form <code>sc</code>) as in <code>script=Hiragana</code> or <code>sc=Hiragana</code>.
  <p>
  The script names supported by <code>Pattern</code> are the valid script names
  accepted and defined by 
 <code>UnicodeScript.forName</code>.
  
 <p>
  <b><a id="ubc">Blocks</a></b> are specified with the prefix <code>In</code>, as in 
 <code>InMongolian</code>, or by using the keyword <code>block</code> (or its short
  form <code>blk</code>) as in <code>block=Mongolian</code> or <code>blk=Mongolian</code>.
  <p>
  The block names supported by <code>Pattern</code> are the valid block names
  accepted and defined by 
 <code>UnicodeBlock.forName</code>.
  <p>
  
 <b><a id="ucc">Categories</a></b> may be specified with the optional prefix <code>Is</code>:
  Both <code>\p{L}</code> and <code>\p{IsL}</code> denote the category of Unicode
  letters. Same as scripts and blocks, categories can also be specified
  by using the keyword <code>general_category</code> (or its short form 
 <code>gc</code>) as in <code>general_category=Lu</code> or <code>gc=Lu</code>.
  <p>
  The supported categories are those of 
 <a href="http://www.unicode.org/standard/standard.html">
  <i>The Unicode Standard</i></a> in the version specified by the 
 <code>Character</code> class. The category names are those
  defined in the Standard, both normative and informative. 
 <p>
  
 <b><a id="ubpc">Binary properties</a></b> are specified with the prefix <code>Is</code>, as in 
 <code>IsAlphabetic</code>. The supported binary properties by <code>Pattern</code>
  are 
 <ul>
    <li> Alphabetic
    <li> Ideographic
    <li> Letter
    <li> Lowercase
    <li> Uppercase
    <li> Titlecase
    <li> Punctuation
    <Li> Control
    <li> White_Space
    <li> Digit
    <li> Hex_Digit
    <li> Join_Control
    <li> Noncharacter_Code_Point
    <li> Assigned 
 </ul>
  <p>
  The <b>Predefined Character classes</b> and <b>POSIX character classes</b>
  are in conformance with the recommendation of <i>Annex C: Compatibility Properties</i>
  of <a href="http://www.unicode.org/reports/tr18/"><i>Unicode Technical Standard #18:
  Unicode Regular Expressions</i></a>.
  
 <p>
  <a id="jcc">
  Categories that behave like the java.lang.Character
  boolean is<i>methodname</i> methods (except for the deprecated ones) are
  available through the same <code>\p{</code><i>prop</i><code>}</code> syntax where
  the specified property has the name <code>java<i>methodname</i></code></a>.
  
 <h3> Behavior starting from API level 10 (Android 2.3) </h3>
  
 <p> Starting from Android 2.3 Gingerbread, ICU4C becomes the backend of the regular expression
  implementation. Android could behave differently compared with other regex implementation, e.g.
  literal right brace ('}') has to be escaped on Android.</p>
  
 <p> Some other behavior differences can be found in the 
 <a href="https://unicode-org.github.io/icu/userguide/strings/regexp.html#differences-with-java-regular-expressions">
  ICU documentation</a>. </p>
  
 <h2> Comparison to Perl 5 </h2>
  
 <p>The <code>Pattern</code> engine performs traditional NFA-based matching
  with ordered alternation as occurs in Perl 5. 
 <p> Perl constructs not supported by this class: </p>
  
 <ul>
     <li><p> The backreference constructs, <code>\g{</code><i>n</i><code>}</code> for
     the <i>n</i><sup>th</sup><a href="#cg">capturing group</a> and
     <code>\g{</code><i>name</i><code>}</code> for
     <a href="#groupname">named-capturing group</a>.
     </p></li>
     <li><p> The conditional constructs
     <code>(?(</code><i>condition</i><code>)</code><i>X</i><code>)</code> and
     <code>(?(</code><i>condition</i><code>)</code><i>X</i><code>|</code><i>Y</i><code>)</code>,
     </p></li>
     <li><p> The embedded code constructs <code>(?{</code><i>code</i><code>})</code>
     and <code>(??{</code><i>code</i><code>})</code>,</p></li>
     <li><p> The embedded comment syntax <code>(?#comment)</code>, and </p></li>
     <li><p> The preprocessing operations <code>\l</code> <code>&#92;u</code>,
     <code>\L</code>, and <code>\U</code>.  </p></li>
  
 </ul>
  
 <p> Constructs supported by this class but not by Perl: </p>
  
 <ul>
     <li><p> Character-class union and intersection as described
     <a href="#cc">above</a>.</p></li>
  
 </ul>
  
 <p> Notable differences from Perl: </p>
  
 <ul>
     <li><p> In Perl, <code>\1</code> through <code>\9</code> are always interpreted
     as back references; a backslash-escaped number greater than <code>9</code> is
     treated as a back reference if at least that many subexpressions exist,
     otherwise it is interpreted, if possible, as an octal escape.  In this
     class octal escapes must always begin with a zero. In this class,    
 <code>compile(String)</code> throws <code>PatternSyntaxException</code> for any
     non-existent back references. Please use <code>\Q</code> and <code>\E</code> to
     quote any digit literals followed by back references.    
 </p></li>
     <li><p> Perl uses the <code>g</code> flag to request a match that resumes
     where the last match left off.  This functionality is provided implicitly
     by the <code>Matcher</code> class: Repeated invocations of the <code>find</code>
  method will resume where the last match left off,
     unless the matcher is reset.  </p></li>
     <li><p> In Perl, embedded flags at the top level of an expression affect
     the whole expression.  In this class, embedded flags always take effect
     at the point at which they appear, whether they are at the top level or
     within a group; in the latter case, flags are restored at the end of the
     group just as in Perl.  </p></li>
  
 </ul>
  
 <p> For a more precise description of the behavior of regular expression
  constructs, please see <a href="http://www.oreilly.com/catalog/regex3/">
  <i>Mastering Regular Expressions, 3rd Edition</i>, Jeffrey E. F. Friedl,
  O'Reilly and Associates, 2006.</a>
  </p>
 - seealso: java.lang.String#split(String, int)
 - seealso: java.lang.String#split(String)
 @author Mike McCloskey
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaUtilRegexPattern : NSObject < JavaIoSerializable > {
 @public
  jlong address_;
}

#pragma mark Public

/*!
 @brief Creates a predicate that tests if this pattern matches a given input string.
 @return The predicate which can be used for matching an input string
           against this pattern.
 @since 11
 - seealso: Matcher#matches
 */
- (id<JavaUtilFunctionPredicate>)asMatchPredicate;

/*!
 @brief Creates a predicate that tests if this pattern is found in a given input
  string.
 @return The predicate which can be used for finding a match on a
           subsequence of a string
 @since 1.8
 - seealso: Matcher#find
 */
- (id<JavaUtilFunctionPredicate> __nonnull)asPredicate;

/*!
 @brief Compiles the given regular expression into a pattern.
 @param regex The expression to be compiled
 @return the given regular expression compiled into a pattern
 @throw PatternSyntaxException
 If the expression's syntax is invalid
 */
+ (JavaUtilRegexPattern * __nonnull)compileWithNSString:(NSString *)regex;

/*!
 @brief Compiles the given regular expression into a pattern with the given
  flags.
 @param regex The expression to be compiled
 @param flags Match flags, a bit mask that may include
           <code>CASE_INSENSITIVE</code>
  , <code>MULTILINE</code> , <code>DOTALL</code> ,          <code>UNICODE_CASE</code>
  , <code>UNIX_LINES</code> , <code>LITERAL</code> ,          and <code>COMMENTS</code>
 @return the given regular expression compiled into a pattern with the given flags
 @throw IllegalArgumentException
 If bit values other than those corresponding to the defined
           match flags are set in <code>flags</code>
 @throw PatternSyntaxException
 If the expression's syntax is invalid
 */
+ (JavaUtilRegexPattern * __nonnull)compileWithNSString:(NSString *)regex
                                                withInt:(jint)flags;

/*!
 @brief Returns a result equivalent to <code>s.split(separator, limit)</code> if it's able
  to compute it more cheaply than native impl, or null if the caller should fall back to
  using native impl.
 fastpath will work  if the regex is a
    (1)one-char String and this character is not one of the
       RegEx's meta characters ".$|()[{^?*+\\", or
    (2)two-char String and the first char is the backslash and
       the second is one of regEx's meta characters ".$|()[{^?*+\\".
 */
+ (IOSObjectArray *)fastSplitWithNSString:(NSString *)re
                             withNSString:(NSString *)input
                                  withInt:(jint)limit;

/*!
 @brief Returns this pattern's match flags.
 @return The match flags specified when this pattern was compiled
 */
- (jint)flags;

/*!
 @brief Creates a matcher that will match the given input against this pattern.
 @param input The character sequence to be matched
 @return A new matcher for this pattern
 */
- (JavaUtilRegexMatcher * __nonnull)matcherWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

/*!
 @brief Compiles the given regular expression and attempts to match the given
  input against it.
 <p> An invocation of this convenience method of the form 
 <blockquote>@code

  Pattern.matches(regex, input);
@endcode</blockquote>
  behaves in exactly the same way as the expression 
 <blockquote>@code

  Pattern.compile(regex).matcher(input).matches()
@endcode</blockquote>
  
 <p> If a pattern is to be used multiple times, compiling it once and reusing
  it will be more efficient than invoking this method each time.  </p>
 @param regex The expression to be compiled
 @param input The character sequence to be matched
 @return whether or not the regular expression matches on the input
 @throw PatternSyntaxException
 If the expression's syntax is invalid
 */
+ (jboolean)matchesWithNSString:(NSString *)regex
       withJavaLangCharSequence:(id<JavaLangCharSequence>)input;

/*!
 @brief Returns the regular expression from which this pattern was compiled.
 @return The source of this pattern
 */
- (NSString * __nonnull)pattern;

/*!
 @brief Returns a literal pattern <code>String</code> for the specified 
 <code>String</code>.
 <p>This method produces a <code>String</code> that can be used to
  create a <code>Pattern</code> that would match the string 
 <code>s</code> as if it were a literal pattern.</p> Metacharacters
  or escape sequences in the input sequence will be given no special
  meaning.
 @param s The string to be literalized
 @return A literal string replacement
 @since 1.5
 */
+ (NSString * __nonnull)quoteWithNSString:(NSString *)s;

/*!
 @brief Splits the given input sequence around matches of this pattern.
 <p> This method works as if by invoking the two-argument <code>split</code>
  method with the given input
  sequence and a limit argument of zero.  Trailing empty strings are
  therefore not included in the resulting array. </p>
  
 <p> The input <code>"boo:and:foo"</code>, for example, yields the following
  results with these expressions: 
 <table class="plain" style="margin-left:2em">
  <caption style="display:none">Split examples showing regex and result</caption>
  <thead>
  <tr>
   <th scope="col">Regex</th>
   <th scope="col">Result</th>
  </tr>
  </thead>
  <tbody>
  <tr><th scope="row" style="text-weight:normal">:</th>
      <td><code>{ "boo", "and", "foo" }</code></td></tr>
  <tr><th scope="row" style="text-weight:normal">o</th>
      <td><code>{ "b", "", ":and:f" }</code></td></tr>
  </tbody>
  </table>
 @param input The character sequence to be split
 @return The array of strings computed by splitting the input
           around matches of this pattern
 */
- (IOSObjectArray * __nonnull)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

/*!
 @brief Splits the given input sequence around matches of this pattern.
 <p> The array returned by this method contains each substring of the
  input sequence that is terminated by another subsequence that matches
  this pattern or is terminated by the end of the input sequence.  The
  substrings in the array are in the order in which they occur in the
  input. If this pattern does not match any subsequence of the input then
  the resulting array has just one element, namely the input sequence in
  string form. 
 <p> When there is a positive-width match at the beginning of the input
  sequence then an empty leading substring is included at the beginning
  of the resulting array. A zero-width match at the beginning however
  can only produce such an empty leading substring for apps running on or
  targeting API versions <= 28. 
 <p> The <code>limit</code> parameter controls the number of times the
  pattern is applied and therefore affects the length of the resulting
  array. 
 <ul>
     <li><p>
     If the <i>limit</i> is positive then the pattern will be applied
     at most <i>limit</i>&nbsp;-&nbsp;1 times, the array's length will be
     no greater than <i>limit</i>, and the array's last entry will contain
     all input beyond the last matched delimiter.</p></li>
     
 <li><p>
     If the <i>limit</i> is zero then the pattern will be applied as
     many times as possible, the array can have any length, and trailing
     empty strings will be discarded.</p></li>
     
 <li><p>
     If the <i>limit</i> is negative then the pattern will be applied
     as many times as possible and the array can have any length.</p></li>
  </ul>
  
 <p> The input <code>"boo:and:foo"</code>, for example, yields the following
  results with these parameters: 
 <table class="plain" style="margin-left:2em;">
  <caption style="display:none">Split example showing regex, limit, and result</caption>
  <thead>
  <tr>
      <th scope="col">Regex</th>
      <th scope="col">Limit</th>
      <th scope="col">Result</th>
  </tr>
  </thead>
  <tbody>
  <tr><th scope="row" rowspan="3" style="font-weight:normal">:</th>
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">2</th>
      <td><code>{ "boo", "and:foo" }</code></td></tr>
  <tr><!-- : -->
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">5</th>
      <td><code>{ "boo", "and", "foo" }</code></td></tr>
  <tr><!-- : -->
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">-2</th>
      <td><code>{ "boo", "and", "foo" }</code></td></tr>
  <tr><th scope="row" rowspan="3" style="font-weight:normal">o</th>
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">5</th>
      <td><code>{ "b", "", ":and:f", "", "" }</code></td></tr>
  <tr><!-- o -->
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">-2</th>
      <td><code>{ "b", "", ":and:f", "", "" }</code></td></tr>
  <tr><!-- o -->
      <th scope="row" style="font-weight:normal; text-align:right; padding-right:1em">0</th>
      <td><code>{ "b", "", ":and:f" }</code></td></tr>
  </tbody>
  </table>
 @param input The character sequence to be split
 @param limit The result threshold, as described above
 @return The array of strings computed by splitting the input
           around matches of this pattern
 */
- (IOSObjectArray * __nonnull)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                                    withInt:(jint)limit;

/*!
 @brief Creates a stream from the given input sequence around matches of this
  pattern.
 <p> The stream returned by this method contains each substring of the
  input sequence that is terminated by another subsequence that matches
  this pattern or is terminated by the end of the input sequence.  The
  substrings in the stream are in the order in which they occur in the
  input. Trailing empty strings will be discarded and not encountered in
  the stream. 
 <p> If this pattern does not match any subsequence of the input then
  the resulting stream has just one element, namely the input sequence in
  string form. 
 <p> When there is a positive-width match at the beginning of the input
  sequence then an empty leading substring is included at the beginning
  of the stream. A zero-width match at the beginning however never produces
  such empty leading substring. 
 <p> If the input sequence is mutable, it must remain constant during the
  execution of the terminal stream operation.  Otherwise, the result of the
  terminal stream operation is undefined.
 @param input The character sequence to be split
 @return The stream of strings computed by splitting the input
           around matches of this pattern
 - seealso: #split(CharSequence)
 @since 1.8
 */
- (id<JavaUtilStreamStream> __nonnull)splitAsStreamWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

/*!
 @brief <p>Returns the string representation of this pattern.This
  is the regular expression from which this pattern was
  compiled.
 </p>
 @return The string representation of this pattern
 @since 1.5
 */
- (NSString * __nonnull)description;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

+ (jboolean)matchesWithNSString:(NSString *)regularExpression
                   withNSString:(NSString *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilRegexPattern)

/*!
 @brief Enables Unix lines mode.
 <p> In this mode, only the <code>'\n'</code> line terminator is recognized
  in the behavior of <code>.</code>, <code>^</code>, and <code>$</code>.
  
 <p> Unix lines mode can also be enabled via the embedded flag
  expression&nbsp;<code>(?d)</code>.
 */
inline jint JavaUtilRegexPattern_get_UNIX_LINES(void);
#define JavaUtilRegexPattern_UNIX_LINES 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, UNIX_LINES, jint)

/*!
 @brief Enables case-insensitive matching.
 <p> Case-insensitive matching is Unicode-aware on Android. 
 <p> Case-insensitive matching can also be enabled via the embedded flag
  expression&nbsp;<code>(?i)</code>.
  
 <p> Specifying this flag may impose a slight performance penalty.  </p>
 */
inline jint JavaUtilRegexPattern_get_CASE_INSENSITIVE(void);
#define JavaUtilRegexPattern_CASE_INSENSITIVE 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, CASE_INSENSITIVE, jint)

/*!
 @brief Permits whitespace and comments in pattern.
 <p> In this mode, whitespace is ignored, and embedded comments starting
  with <code>#</code> are ignored until the end of a line. 
 <p> Comments mode can also be enabled via the embedded flag
  expression&nbsp;<code>(?x)</code>.
 */
inline jint JavaUtilRegexPattern_get_COMMENTS(void);
#define JavaUtilRegexPattern_COMMENTS 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, COMMENTS, jint)

/*!
 @brief Enables multiline mode.
 <p> In multiline mode the expressions <code>^</code> and <code>$</code> match
  just after or just before, respectively, a line terminator or the end of
  the input sequence.  By default these expressions only match at the
  beginning and the end of the entire input sequence. 
 <p> Multiline mode can also be enabled via the embedded flag
  expression&nbsp;<code>(?m)</code>.  </p>
 */
inline jint JavaUtilRegexPattern_get_MULTILINE(void);
#define JavaUtilRegexPattern_MULTILINE 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, MULTILINE, jint)

/*!
 @brief Enables literal parsing of the pattern.
 <p> When this flag is specified then the input string that specifies
  the pattern is treated as a sequence of literal characters.
  Metacharacters or escape sequences in the input sequence will be
  given no special meaning. 
 <p>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on
  matching when used in conjunction with this flag. The other flags
  become superfluous. 
 <p> There is no embedded flag character for enabling literal parsing.
 @since 1.5
 */
inline jint JavaUtilRegexPattern_get_LITERAL(void);
#define JavaUtilRegexPattern_LITERAL 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, LITERAL, jint)

/*!
 @brief Enables dotall mode.
 <p> In dotall mode, the expression <code>.</code> matches any character,
  including a line terminator.  By default this expression does not match
  line terminators. 
 <p> Dotall mode can also be enabled via the embedded flag
  expression&nbsp;<code>(?s)</code>.  (The <code>s</code> is a mnemonic for
  "single-line" mode, which is what this is called in Perl.)  </p>
 */
inline jint JavaUtilRegexPattern_get_DOTALL(void);
#define JavaUtilRegexPattern_DOTALL 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, DOTALL, jint)

/*!
 @brief Enables Unicode-aware case folding.This flag is ignoredon Android.
 When <code>CASE_INSENSITIVE</code> flag is provided, case-insensitive
  matching is always done in a manner consistent with the Unicode Standard. 
 <p> The embedded flag &nbsp;<code>(?u)</code> is ignored. 
 <p> Specifying this flag may impose a performance penalty.  </p>
 */
inline jint JavaUtilRegexPattern_get_UNICODE_CASE(void);
#define JavaUtilRegexPattern_UNICODE_CASE 64
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, UNICODE_CASE, jint)

/*!
 @brief This flag is not supported on Android.
 */
inline jint JavaUtilRegexPattern_get_CANON_EQ(void);
#define JavaUtilRegexPattern_CANON_EQ 128
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, CANON_EQ, jint)

/*!
 @brief This flag is not supported on Android, and Unicode character classes are always
  used.
 <p>
  See the Unicode version of 
 <i>Predefined character classes</i> and <i>POSIX character classes</i>
  are in conformance with 
 <a href="http://www.unicode.org/reports/tr18/"><i>Unicode Technical
  Standard #18: Unicode Regular Expressions</i></a>
  <i>Annex C: Compatibility Properties</i>.
  <p>
 @since 1.7
 */
inline jint JavaUtilRegexPattern_get_UNICODE_CHARACTER_CLASS(void);
#define JavaUtilRegexPattern_UNICODE_CHARACTER_CLASS 256
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilRegexPattern, UNICODE_CHARACTER_CLASS, jint)

FOUNDATION_EXPORT JavaUtilRegexPattern *JavaUtilRegexPattern_compileWithNSString_(NSString *regex);

FOUNDATION_EXPORT JavaUtilRegexPattern *JavaUtilRegexPattern_compileWithNSString_withInt_(NSString *regex, jint flags);

FOUNDATION_EXPORT jboolean JavaUtilRegexPattern_matchesWithNSString_withJavaLangCharSequence_(NSString *regex, id<JavaLangCharSequence> input);

FOUNDATION_EXPORT jboolean JavaUtilRegexPattern_matchesWithNSString_withNSString_(NSString *regularExpression, NSString *input);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilRegexPattern_fastSplitWithNSString_withNSString_withInt_(NSString *re, NSString *input, jint limit);

FOUNDATION_EXPORT NSString *JavaUtilRegexPattern_quoteWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilRegexPattern)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaUtilRegexPattern")
