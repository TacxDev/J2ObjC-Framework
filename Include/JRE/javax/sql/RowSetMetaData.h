//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/sql/RowSetMetaData.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSqlRowSetMetaData")
#ifdef RESTRICT_JavaxSqlRowSetMetaData
#define INCLUDE_ALL_JavaxSqlRowSetMetaData 0
#else
#define INCLUDE_ALL_JavaxSqlRowSetMetaData 1
#endif
#undef RESTRICT_JavaxSqlRowSetMetaData

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSqlRowSetMetaData_) && (INCLUDE_ALL_JavaxSqlRowSetMetaData || defined(INCLUDE_JavaxSqlRowSetMetaData))
#define JavaxSqlRowSetMetaData_

#define RESTRICT_JavaSqlResultSetMetaData 1
#define INCLUDE_JavaSqlResultSetMetaData 1
#include "java/sql/ResultSetMetaData.h"

@class JavaLangBoolean;
@class JavaLangInteger;

/*!
 @brief An object that contains information about the columns in a 
 <code>RowSet</code> object.This interface is
  an extension of the <code>ResultSetMetaData</code> interface with
  methods for setting the values in a <code>RowSetMetaData</code> object.
 When a <code>RowSetReader</code> object reads data into a <code>RowSet</code>
  object, it creates a <code>RowSetMetaData</code> object and initializes it
  using the methods in the <code>RowSetMetaData</code> interface.  Then the
  reader passes the <code>RowSetMetaData</code> object to the rowset. 
 <P>
  The methods in this interface are invoked internally when an application
  calls the method <code>RowSet.execute</code>; an application
  programmer would not use them directly.
 @since 1.4
 */
@protocol JavaxSqlRowSetMetaData < JavaSqlResultSetMetaData, JavaObject >

/*!
 @brief Sets the number of columns in the <code>RowSet</code> object to
  the given number.
 @param columnCount the number of columns in the  <code> RowSet </code>  object
 @throw SQLExceptionif a database access error occurs
 */
- (void)setColumnCountWithInt:(jint)columnCount;

/*!
 @brief Sets whether the designated column is automatically numbered,
  The default is for a <code>RowSet</code> object's
  columns not to be automatically numbered.
 @param columnIndex the first column is 1, the second is 2, ...
 @param property <code> true </code>  if the column is automatically
                   numbered;  <code> false </code>  if it is not
 @throw SQLExceptionif a database access error occurs
 */
- (void)setAutoIncrementWithInt:(jint)columnIndex
                    withBoolean:(jboolean)property;

/*!
 @brief Sets whether the designated column is case sensitive.
 The default is <code>false</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param property <code> true </code>  if the column is case sensitive;
                    <code> false </code>  if it is not
 @throw SQLExceptionif a database access error occurs
 */
- (void)setCaseSensitiveWithInt:(jint)columnIndex
                    withBoolean:(jboolean)property;

/*!
 @brief Sets whether the designated column can be used in a where clause.
 The default is <code>false</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param property <code> true </code>  if the column can be used in a
                    <code> WHERE </code>  clause;  <code> false </code>  if it cannot
 @throw SQLExceptionif a database access error occurs
 */
- (void)setSearchableWithInt:(jint)columnIndex
                 withBoolean:(jboolean)property;

/*!
 @brief Sets whether the designated column is a cash value.
 The default is <code>false</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param property <code> true </code>  if the column is a cash value;
                    <code> false </code>  if it is not
 @throw SQLExceptionif a database access error occurs
 */
- (void)setCurrencyWithInt:(jint)columnIndex
               withBoolean:(jboolean)property;

/*!
 @brief Sets whether the designated column's value can be set to 
 <code>NULL</code>.
 The default is <code>ResultSetMetaData.columnNullableUnknown</code>
 @param columnIndex the first column is 1, the second is 2, ...
 @param property one of the following constants:                  
  <code> ResultSetMetaData.columnNoNulls </code> ,                  
  <code> ResultSetMetaData.columnNullable </code> , or                  
  <code> ResultSetMetaData.columnNullableUnknown </code>
 @throw SQLExceptionif a database access error occurs
 */
- (void)setNullableWithInt:(jint)columnIndex
                   withInt:(jint)property;

/*!
 @brief Sets whether the designated column is a signed number.
 The default is <code>false</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param property <code> true </code>  if the column is a signed number;
                    <code> false </code>  if it is not
 @throw SQLExceptionif a database access error occurs
 */
- (void)setSignedWithInt:(jint)columnIndex
             withBoolean:(jboolean)property;

/*!
 @brief Sets the designated column's normal maximum width in chars to the
  given <code>int</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param size the normal maximum number of characters for            the designated column
 @throw SQLExceptionif a database access error occurs
 */
- (void)setColumnDisplaySizeWithInt:(jint)columnIndex
                            withInt:(jint)size;

/*!
 @brief Sets the suggested column title for use in printouts and
  displays, if any, to the given <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param label the column title
 @throw SQLExceptionif a database access error occurs
 */
- (void)setColumnLabelWithInt:(jint)columnIndex
                 withNSString:(NSString *)label;

/*!
 @brief Sets the name of the designated column to the given <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param columnName the designated column's name
 @throw SQLExceptionif a database access error occurs
 */
- (void)setColumnNameWithInt:(jint)columnIndex
                withNSString:(NSString *)columnName;

/*!
 @brief Sets the name of the designated column's table's schema, if any, to
  the given <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param schemaName the schema name
 @throw SQLExceptionif a database access error occurs
 */
- (void)setSchemaNameWithInt:(jint)columnIndex
                withNSString:(NSString *)schemaName;

/*!
 @brief Sets the designated column's number of decimal digits to the
  given <code>int</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param precision the total number of decimal digits
 @throw SQLExceptionif a database access error occurs
 */
- (void)setPrecisionWithInt:(jint)columnIndex
                    withInt:(jint)precision;

/*!
 @brief Sets the designated column's number of digits to the
  right of the decimal point to the given <code>int</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param scale_ the number of digits to right of decimal point
 @throw SQLExceptionif a database access error occurs
 */
- (void)setScaleWithInt:(jint)columnIndex
                withInt:(jint)scale_;

/*!
 @brief Sets the designated column's table name, if any, to the given 
 <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param tableName the column's table name
 @throw SQLExceptionif a database access error occurs
 */
- (void)setTableNameWithInt:(jint)columnIndex
               withNSString:(NSString *)tableName;

/*!
 @brief Sets the designated column's table's catalog name, if any, to the given 
 <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param catalogName the column's catalog name
 @throw SQLExceptionif a database access error occurs
 */
- (void)setCatalogNameWithInt:(jint)columnIndex
                 withNSString:(NSString *)catalogName;

/*!
 @brief Sets the designated column's SQL type to the one given.
 @param columnIndex the first column is 1, the second is 2, ...
 @param SQLType the column's SQL type
 @throw SQLExceptionif a database access error occurs
 - seealso: Types
 */
- (void)setColumnTypeWithInt:(jint)columnIndex
                     withInt:(jint)SQLType;

/*!
 @brief Sets the designated column's type name that is specific to the
  data source, if any, to the given <code>String</code>.
 @param columnIndex the first column is 1, the second is 2, ...
 @param typeName data source specific type name.
 @throw SQLExceptionif a database access error occurs
 */
- (void)setColumnTypeNameWithInt:(jint)columnIndex
                    withNSString:(NSString *)typeName;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSqlRowSetMetaData)

J2OBJC_TYPE_LITERAL_HEADER(JavaxSqlRowSetMetaData)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxSqlRowSetMetaData")
