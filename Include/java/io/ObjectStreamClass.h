//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/ObjectStreamClass.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoObjectStreamClass")
#ifdef RESTRICT_JavaIoObjectStreamClass
#define INCLUDE_ALL_JavaIoObjectStreamClass 0
#else
#define INCLUDE_ALL_JavaIoObjectStreamClass 1
#endif
#undef RESTRICT_JavaIoObjectStreamClass

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoObjectStreamClass_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass))
#define JavaIoObjectStreamClass_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaIoObjectStreamField;
@class JavaLangBoolean;
@class JavaLangClassNotFoundException;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangRefReferenceQueue;
@protocol JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener;
@protocol JavaUtilConcurrentConcurrentMap;

/*!
 @brief Serialization's descriptor for classes.It contains the name and
  serialVersionUID of the class.
 The ObjectStreamClass for a specific class
  loaded in this Java VM can be found/created using the lookup method. 
 <p>The algorithm to compute the SerialVersionUID is described in 
 <a href="../../../platform/serialization/spec/class.html#4100">Object
  Serialization Specification, Section 4.6, Stream Unique Identifiers</a>.
 @author Mike Warres
 @author Roger Riggs
 - seealso: ObjectStreamField
 - seealso: <a href="../../../platform/serialization/spec/class.html">Object Serialization Specification, Section 4, Class Descriptors</a>
 @since JDK1.1
 */
@interface JavaIoObjectStreamClass : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Return the class in the local VM that this version is mapped to.Null
  is returned if there is no corresponding local class.
 @return the <code>Class</code> instance that this descriptor represents
 */
- (IOSClass *)forClass;

/*!
 @brief Get the field of this class by name.
 @param name the name of the data field to look for
 @return The ObjectStreamField object of the named field or null if
           there is no such named field.
 */
- (JavaIoObjectStreamField *)getFieldWithNSString:(NSString *)name;

/*!
 @brief Return an array of the fields of this serializable class.
 @return an array containing an element for each persistent field of
           this class. Returns an array of length zero if there are no
           fields.
 @since 1.2
 */
- (IOSObjectArray *)getFields;

/*!
 @brief Returns the name of the class described by this descriptor.
 This method returns the name of the class in the format that
  is used by the <code>Class.getName</code> method.
 @return a string representing the name of the class
 */
- (NSString *)getName;

/*!
 @brief Return the serialVersionUID for this class.The serialVersionUID
  defines a set of classes all with the same name that have evolved from a
  common root class and agree to be serialized and deserialized using a
  common format.
 NonSerializable classes have a serialVersionUID of 0L.
 @return the SUID of the class described by this descriptor
 */
- (jlong)getSerialVersionUID;

/*!
 @brief Find the descriptor for a class that can be serialized.Creates an
  ObjectStreamClass instance if one does not exist yet for class.
 Null is
  returned if the specified class does not implement java.io.Serializable
  or java.io.Externalizable.
 @param cl class for which to get the descriptor
 @return the class descriptor for the specified class
 */
+ (JavaIoObjectStreamClass *)lookupWithIOSClass:(IOSClass *)cl;

/*!
 @brief Returns the descriptor for any class, regardless of whether it
  implements <code>Serializable</code>.
 @param cl class for which to get the descriptor
 @return the class descriptor for the specified class
 @since 1.6
 */
+ (JavaIoObjectStreamClass *)lookupAnyWithIOSClass:(IOSClass *)cl;

/*!
 @brief Return a string describing this ObjectStreamClass.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Creates blank class descriptor which should be initialized via a
  subsequent call to initProxy(), initNonProxy() or readNonProxy().
 */
- (instancetype __nonnull)init;

/*!
 @brief Throws an InvalidClassException if objects whose class is represented by
  this descriptor should not be permitted to use default serialization
  (e.g., if the class declares serializable fields that do not correspond
  to actual fields, and hence must use the GetField API).This method
  does not apply to deserialization of enum constants.
 */
- (void)checkDefaultSerialize;

/*!
 @brief Throws an InvalidClassException if object instances referencing this
  class descriptor should not be allowed to deserialize.This method does
  not apply to deserialization of enum constants.
 */
- (void)checkDeserialize;

/*!
 @brief Throws an InvalidClassException if objects whose class is represented by
  this descriptor should not be allowed to serialize.This method does
  not apply to serialization of enum constants.
 */
- (void)checkSerialize;

/*!
 @brief Returns array of ClassDataSlot instances representing the data layout
  (including superclass data) for serialized objects described by this
  class descriptor.ClassDataSlots are ordered by inheritance with those
  containing "higher" superclasses appearing first.
 The final
  ClassDataSlot contains a reference to this descriptor.
 */
- (IOSObjectArray *)getClassDataLayout;

/*!
 @brief Looks up a serializable field of the represented class by name and type.
 A specified type of null matches all types, Object.class matches all
  non-primitive types, and any other non-null type matches assignable
  types only.  Returns matching field, or null if no match found.
 */
- (JavaIoObjectStreamField *)getFieldWithNSString:(NSString *)name
                                     withIOSClass:(IOSClass *)type;

/*!
 @brief Returns arrays of ObjectStreamFields representing the serializable
  fields of the represented class.If copy is true, a clone of this class
  descriptor's field array is returned, otherwise the array itself is
  returned.
 */
- (IOSObjectArray *)getFieldsWithBoolean:(jboolean)copy_;

/*!
 @brief Returns the "local" class descriptor for the class associated with this
  class descriptor (i.e., the result of
  ObjectStreamClass.lookup(this.forClass())) or null if there is no class
  associated with this descriptor.
 */
- (JavaIoObjectStreamClass *)getLocalDesc;

/*!
 @brief Returns number of non-primitive serializable fields of represented
  class.
 */
- (jint)getNumObjFields;

/*!
 @brief Fetches the serializable object field values of object obj and stores
  them in array vals starting at offset 0.It is the responsibility of
  the caller to ensure that obj is of the proper type if non-null.
 */
- (void)getObjFieldValuesWithId:(id)obj
              withNSObjectArray:(IOSObjectArray *)vals;

/*!
 @brief Returns aggregate size (in bytes) of marshalled primitive field values
  for represented class.
 */
- (jint)getPrimDataSize;

/*!
 @brief Fetches the serializable primitive field values of object obj and
  marshals them into byte array buf starting at offset 0.It is the
  responsibility of the caller to ensure that obj is of the proper type if
  non-null.
 */
- (void)getPrimFieldValuesWithId:(id)obj
                   withByteArray:(IOSByteArray *)buf;

/*!
 @brief Returns ClassNotFoundException (if any) thrown while attempting to
  resolve local class corresponding to this class descriptor.
 */
- (JavaLangClassNotFoundException *)getResolveException;

/*!
 @brief Returns superclass descriptor.Note that on the receiving side, the
  superclass descriptor may be bound to a class that is not a superclass
  of the subclass descriptor's bound class.
 */
- (JavaIoObjectStreamClass *)getSuperDesc;

/*!
 @brief Returns true if class descriptor represents externalizable class that
  has written its data in 1.2 (block data) format, false otherwise.
 */
- (jboolean)hasBlockExternalData;

/*!
 @brief Returns true if represented class is serializable (but not
  externalizable) and defines a conformant readObject method.Otherwise,
  returns false.
 */
- (jboolean)hasReadObjectMethod;

/*!
 @brief Returns true if represented class is serializable (but not
  externalizable) and defines a conformant readObjectNoData method.
 Otherwise, returns false.
 */
- (jboolean)hasReadObjectNoDataMethod;

/*!
 @brief Returns true if represented class is serializable or externalizable and
  defines a conformant readResolve method.Otherwise, returns false.
 */
- (jboolean)hasReadResolveMethod;

/*!
 @brief Returns true if class descriptor represents serializable (but not
  externalizable) class which has written its data via a custom
  writeObject() method, false otherwise.
 */
- (jboolean)hasWriteObjectData;

/*!
 @brief Returns true if represented class is serializable (but not
  externalizable) and defines a conformant writeObject method.Otherwise,
  returns false.
 */
- (jboolean)hasWriteObjectMethod;

/*!
 @brief Returns true if represented class is serializable or externalizable and
  defines a conformant writeReplace method.Otherwise, returns false.
 */
- (jboolean)hasWriteReplaceMethod;

/*!
 @brief Initializes class descriptor representing a non-proxy class.
 */
- (void)initNonProxyWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)model
                                   withIOSClass:(IOSClass *)cl
             withJavaLangClassNotFoundException:(JavaLangClassNotFoundException *)resolveEx
                    withJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)superDesc OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initializes class descriptor representing a proxy class.
 */
- (void)initProxyWithIOSClass:(IOSClass *)cl
withJavaLangClassNotFoundException:(JavaLangClassNotFoundException *)resolveEx
  withJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)superDesc OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Invokes the readObject method of the represented serializable class.
 Throws UnsupportedOperationException if this class descriptor is not
  associated with a class, or if the class is externalizable,
  non-serializable or does not define readObject.
 */
- (void)invokeReadObjectWithId:(id)obj
   withJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

/*!
 @brief Invokes the readObjectNoData method of the represented serializable
  class.Throws UnsupportedOperationException if this class descriptor is
  not associated with a class, or if the class is externalizable,
  non-serializable or does not define readObjectNoData.
 */
- (void)invokeReadObjectNoDataWithId:(id)obj;

/*!
 @brief Invokes the readResolve method of the represented serializable class and
  returns the result.Throws UnsupportedOperationException if this class
  descriptor is not associated with a class, or if the class is
  non-serializable or does not define readResolve.
 */
- (id)invokeReadResolveWithId:(id)obj;

/*!
 @brief Invokes the writeObject method of the represented serializable class.
 Throws UnsupportedOperationException if this class descriptor is not
  associated with a class, or if the class is externalizable,
  non-serializable or does not define writeObject.
 */
- (void)invokeWriteObjectWithId:(id)obj
   withJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

/*!
 @brief Invokes the writeReplace method of the represented serializable class and
  returns the result.Throws UnsupportedOperationException if this class
  descriptor is not associated with a class, or if the class is
  non-serializable or does not define writeReplace.
 */
- (id)invokeWriteReplaceWithId:(id)obj;

/*!
 @brief Returns true if class descriptor represents an enum type, false
  otherwise.
 */
- (jboolean)isEnum;

/*!
 @brief Returns true if represented class implements Externalizable, false
  otherwise.
 */
- (jboolean)isExternalizable;

/*!
 @brief Returns true if represented class is serializable/externalizable and can
  be instantiated by the serialization runtime--i.e., if it is
  externalizable and defines a public no-arg constructor, or if it is
  non-externalizable and its first non-serializable superclass defines an
  accessible no-arg constructor.Otherwise, returns false.
 */
- (jboolean)isInstantiable;

/*!
 @brief Returns true if class descriptor represents a dynamic proxy class, false
  otherwise.
 */
- (jboolean)isProxy__;

/*!
 @brief Returns true if represented class implements Serializable, false
  otherwise.
 */
- (jboolean)isSerializable;

/*!
 @brief Looks up and returns class descriptor for given class, or null if class
  is non-serializable and "all" is set to false.
 @param cl class to look up
 @param all if true, return descriptors for all classes; if false, only           return descriptors for serializable classes
 */
+ (JavaIoObjectStreamClass *)lookupWithIOSClass:(IOSClass *)cl
                                    withBoolean:(jboolean)all;

/*!
 @brief Creates a new instance of the represented class.If the class is
  externalizable, invokes its public no-arg constructor; otherwise, if the
  class is serializable, invokes the no-arg constructor of the first
  non-serializable superclass.
 Throws UnsupportedOperationException if
  this class descriptor is not associated with a class, if the associated
  class is non-serializable or if the appropriate no-arg constructor is
  inaccessible/unavailable.
 */
- (id)newInstance OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Removes from the specified map any keys that have been enqueued
  on the specified reference queue.
 */
+ (void)processQueueWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue
              withJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)map;

/*!
 @brief Reads non-proxy class descriptor information from given input stream.
 The resulting class descriptor is not fully functional; it can only be
  used as input to the ObjectInputStream.resolveClass() and
  ObjectStreamClass.initNonProxy() methods.
 */
- (void)readNonProxyWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

/*!
 @brief Sets the serializable object fields of object obj using values from
  array vals starting at offset 0.It is the responsibility of the caller
  to ensure that obj is of the proper type if non-null.
 */
- (void)setObjFieldValuesWithId:(id)obj
              withNSObjectArray:(IOSObjectArray *)vals;

/*!
 @brief Sets the serializable primitive fields of object obj using values
  unmarshalled from byte array buf starting at offset 0.It is the
  responsibility of the caller to ensure that obj is of the proper type if
  non-null.
 */
- (void)setPrimFieldValuesWithId:(id)obj
                   withByteArray:(IOSByteArray *)buf;

/*!
 @brief Writes non-proxy class descriptor information to given output stream.
 */
- (void)writeNonProxyWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(JavaIoObjectStreamClass)

/*!
 @brief serialPersistentFields value indicating no serializable fields
 */
inline IOSObjectArray *JavaIoObjectStreamClass_get_NO_FIELDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *JavaIoObjectStreamClass_NO_FIELDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, NO_FIELDS, IOSObjectArray *)

/*!
 @brief Public and mutable for testing purposes.
 */
inline id<JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener> JavaIoObjectStreamClass_get_suidCompatibilityListener(void);
inline id<JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener> JavaIoObjectStreamClass_set_suidCompatibilityListener(id<JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener> JavaIoObjectStreamClass_suidCompatibilityListener;
J2OBJC_STATIC_FIELD_OBJ(JavaIoObjectStreamClass, suidCompatibilityListener, id<JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener>)

/*!
 @brief Max SDK target version for which we use buggy hasStaticInitializer implementation.
 */
inline jint JavaIoObjectStreamClass_get_MAX_SDK_TARGET_FOR_CLINIT_UIDGEN_WORKAROUND(void);
#define JavaIoObjectStreamClass_MAX_SDK_TARGET_FOR_CLINIT_UIDGEN_WORKAROUND 23
J2OBJC_STATIC_FIELD_CONSTANT(JavaIoObjectStreamClass, MAX_SDK_TARGET_FOR_CLINIT_UIDGEN_WORKAROUND, jint)

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupAnyWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupWithIOSClass_withBoolean_(IOSClass *cl, jboolean all);

FOUNDATION_EXPORT void JavaIoObjectStreamClass_init(JavaIoObjectStreamClass *self);

FOUNDATION_EXPORT JavaIoObjectStreamClass *new_JavaIoObjectStreamClass_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamClass *create_JavaIoObjectStreamClass_init(void);

FOUNDATION_EXPORT void JavaIoObjectStreamClass_processQueueWithJavaLangRefReferenceQueue_withJavaUtilConcurrentConcurrentMap_(JavaLangRefReferenceQueue *queue, id<JavaUtilConcurrentConcurrentMap> map);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass)

#endif

#if !defined (JavaIoObjectStreamClass_ClassDataSlot_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass_ClassDataSlot))
#define JavaIoObjectStreamClass_ClassDataSlot_

@class JavaIoObjectStreamClass;
@class JavaLangBoolean;

/*!
 @brief Class representing the portion of an object's serialized form allotted
  to data described by a given class descriptor.If "hasData" is false,
  the object's serialized form does not contain data associated with the
  class descriptor.
 */
@interface JavaIoObjectStreamClass_ClassDataSlot : NSObject {
 @public
  /*!
   @brief class descriptor "occupying" this slot
   */
  WEAK_ JavaIoObjectStreamClass *desc_;
  /*!
   @brief true if serialized form includes data for this slot's descriptor
   */
  jboolean hasData_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)desc
                                              withBoolean:(jboolean)hasData;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamClass_ClassDataSlot)

FOUNDATION_EXPORT void JavaIoObjectStreamClass_ClassDataSlot_initWithJavaIoObjectStreamClass_withBoolean_(JavaIoObjectStreamClass_ClassDataSlot *self, JavaIoObjectStreamClass *desc, jboolean hasData);

FOUNDATION_EXPORT JavaIoObjectStreamClass_ClassDataSlot *new_JavaIoObjectStreamClass_ClassDataSlot_initWithJavaIoObjectStreamClass_withBoolean_(JavaIoObjectStreamClass *desc, jboolean hasData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamClass_ClassDataSlot *create_JavaIoObjectStreamClass_ClassDataSlot_initWithJavaIoObjectStreamClass_withBoolean_(JavaIoObjectStreamClass *desc, jboolean hasData);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass_ClassDataSlot)

#endif

#if !defined (JavaIoObjectStreamClass_Digest_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass_Digest))
#define JavaIoObjectStreamClass_Digest_

@class IOSByteArray;

@protocol JavaIoObjectStreamClass_Digest < JavaObject >

- (IOSByteArray *)digestWithByteArray:(IOSByteArray *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamClass_Digest)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass_Digest)

#endif

#if !defined (JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener))
#define JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener_

@class IOSClass;
@class JavaLangLong;

/*!
 @brief Created for testing as there is no nice way to detect when a message is logged.
 */
@protocol JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener < JavaObject >

/*!
 @brief Called when a class being serialized/deserialized relies on the default SUID computation
  (because it has no explicit <code>serialVersionUID</code> field) where that computation is
  dependent on the app's targetSdkVersion.
 @param clazz the clazz for which the default SUID is being computed.
 @param hash_ the computed value.
 */
- (void)warnDefaultSUIDTargetVersionDependentWithIOSClass:(IOSClass *)clazz
                                                 withLong:(jlong)hash_;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass_DefaultSUIDCompatibilityListener)

#endif

#if !defined (JavaIoObjectStreamClass_WeakClassKey_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass_WeakClassKey))
#define JavaIoObjectStreamClass_WeakClassKey_

#define RESTRICT_JavaLangRefWeakReference 1
#define INCLUDE_JavaLangRefWeakReference 1
#include "java/lang/ref/WeakReference.h"

@class IOSClass;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangRefReferenceQueue;

/*!
 @brief Weak key for Class objects.
 */
@interface JavaIoObjectStreamClass_WeakClassKey : JavaLangRefWeakReference

#pragma mark Public

/*!
 @brief Returns true if the given object is this identical
  WeakClassKey instance, or, if this object's referent has not
  been cleared, if the given object is another WeakClassKey
  instance with the identical non-null referent as this one.
 */
- (jboolean)isEqual:(id)obj;

- (IOSClass *)get;

/*!
 @brief Returns the identity hash code of the original referent.
 */
- (NSUInteger)hash;

#pragma mark Package-Private

/*!
 @brief Create a new WeakClassKey to the given object, registered
  with a queue.
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)cl
             withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)refQueue;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0
       withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamClass_WeakClassKey)

FOUNDATION_EXPORT void JavaIoObjectStreamClass_WeakClassKey_initWithIOSClass_withJavaLangRefReferenceQueue_(JavaIoObjectStreamClass_WeakClassKey *self, IOSClass *cl, JavaLangRefReferenceQueue *refQueue);

FOUNDATION_EXPORT JavaIoObjectStreamClass_WeakClassKey *new_JavaIoObjectStreamClass_WeakClassKey_initWithIOSClass_withJavaLangRefReferenceQueue_(IOSClass *cl, JavaLangRefReferenceQueue *refQueue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamClass_WeakClassKey *create_JavaIoObjectStreamClass_WeakClassKey_initWithIOSClass_withJavaLangRefReferenceQueue_(IOSClass *cl, JavaLangRefReferenceQueue *refQueue);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass_WeakClassKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoObjectStreamClass")
