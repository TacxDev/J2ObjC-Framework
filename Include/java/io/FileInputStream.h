//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/FileInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoFileInputStream")
#ifdef RESTRICT_JavaIoFileInputStream
#define INCLUDE_ALL_JavaIoFileInputStream 0
#else
#define INCLUDE_ALL_JavaIoFileInputStream 1
#endif
#undef RESTRICT_JavaIoFileInputStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoFileInputStream_) && (INCLUDE_ALL_JavaIoFileInputStream || defined(INCLUDE_JavaIoFileInputStream))
#define JavaIoFileInputStream_

#define RESTRICT_JavaIoInputStream 1
#define INCLUDE_JavaIoInputStream 1
#include "java/io/InputStream.h"

@class IOSByteArray;
@class JavaIoFile;
@class JavaIoFileDescriptor;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaNioChannelsFileChannel;

/*!
 @brief A <code>FileInputStream</code> obtains input bytes
  from a file in a file system.What files
  are  available depends on the host environment.
 <p><code>FileInputStream</code> is meant for reading streams of raw bytes
  such as image data. For reading streams of characters, consider using 
 <code>FileReader</code>.
 @author Arthur van Hoff
 - seealso: java.io.File
 - seealso: java.io.FileDescriptor
 - seealso: java.io.FileOutputStream
 - seealso: java.nio.file.Files#newInputStream
 @since JDK1.0
 */
@interface JavaIoFileInputStream : JavaIoInputStream

#pragma mark Public

/*!
 @brief Creates a <code>FileInputStream</code> by
  opening a connection to an actual file,
  the file named by the <code>File</code>
  object <code>file</code> in the file system.
 A new <code>FileDescriptor</code> object
  is created to represent this file connection. 
 <p>
  First, if there is a security manager,
  its <code>checkRead</code> method  is called
  with the path represented by the <code>file</code>
  argument as its argument. 
 <p>
  If the named file does not exist, is a directory rather than a regular
  file, or for some other reason cannot be opened for reading then a 
 <code>FileNotFoundException</code> is thrown.
 @param file the file to be opened for reading.
 @throw FileNotFoundExceptionif the file does not exist,
                    is a directory rather than a regular file,
                    or for some other reason cannot be opened for
                    reading.
 @throw SecurityExceptionif a security manager exists and its
                <code>checkRead</code> method denies read access to the file.
 - seealso: java.io.File#getPath()
 - seealso: java.lang.SecurityManager#checkRead(java.lang.String)
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Creates a <code>FileInputStream</code> by using the file descriptor 
 <code>fdObj</code>, which represents an existing connection to an
  actual file in the file system.
 <p>
  If there is a security manager, its <code>checkRead</code> method is
  called with the file descriptor <code>fdObj</code> as its argument to
  see if it's ok to read the file descriptor. If read access is denied
  to the file descriptor a <code>SecurityException</code> is thrown. 
 <p>
  If <code>fdObj</code> is null then a <code>NullPointerException</code>
  is thrown. 
 <p>
  This constructor does not throw an exception if <code>fdObj</code>
  is <code>invalid</code>.
  However, if the methods are invoked on the resulting stream to attempt
  I/O on the stream, an <code>IOException</code> is thrown. 
 <p>
  Android-specific warning: <code>close()</code> method doesn't close the <code>fdObj</code> provided,
  because this object doesn't own the file descriptor, but the caller does. The caller can
  call <code>android.system.Os.close(FileDescriptor)</code> to close the fd.
 @param fdObj the file descriptor to be opened for reading.
 */
- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fdObj;

/*!
 */
- (instancetype __nonnull)initWithJavaIoFileDescriptor:(JavaIoFileDescriptor *)fdObj
                                           withBoolean:(jboolean)isFdOwner;

/*!
 @brief Creates a <code>FileInputStream</code> by
  opening a connection to an actual file,
  the file named by the path name <code>name</code>
  in the file system.A new <code>FileDescriptor</code>
  object is created to represent this file
  connection.
 <p>
  First, if there is a security
  manager, its <code>checkRead</code> method
  is called with the <code>name</code> argument
  as its argument. 
 <p>
  If the named file does not exist, is a directory rather than a regular
  file, or for some other reason cannot be opened for reading then a 
 <code>FileNotFoundException</code> is thrown.
 @param name the system-dependent file name.
 @throw FileNotFoundExceptionif the file does not exist,
                    is a directory rather than a regular file,
                    or for some other reason cannot be opened for
                    reading.
 @throw SecurityExceptionif a security manager exists and its
                <code>checkRead</code> method denies read access
                to the file.
 - seealso: java.lang.SecurityManager#checkRead(java.lang.String)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Returns an estimate of the number of remaining bytes that can be read (or
  skipped over) from this input stream without blocking by the next
  invocation of a method for this input stream.Returns 0 when the file
  position is beyond EOF.
 The next invocation might be the same thread
  or another thread. A single read or skip of this many bytes will not
  block, but may read or skip fewer bytes. 
 <p> In some cases, a non-blocking read (or skip) may appear to be
  blocked when it is merely slow, for example when reading large
  files over slow networks.
 @return an estimate of the number of remaining bytes that can be read
              (or skipped over) from this input stream without blocking.
 @throw IOExceptionif this file input stream has been closed by calling
              <code>close</code> or an I/O error occurs.
 */
- (jint)available;

/*!
 @brief Closes this file input stream and releases any system resources
  associated with the stream.
 <p> If this stream has an associated channel then the channel is closed
  as well.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)close;

/*!
 @brief Returns the unique <code>FileChannel</code>
  object associated with this file input stream.
 <p> The initial <code>position</code>
  of the returned channel will be equal to the
  number of bytes read from the file so far.  Reading bytes from this
  stream will increment the channel's position.  Changing the channel's
  position, either explicitly or by reading, will change this stream's
  file position.
 @return the file channel associated with this file input stream
 @since 1.4
 */
- (JavaNioChannelsFileChannel *)getChannel;

/*!
 @brief Returns the <code>FileDescriptor</code>
  object  that represents the connection to
  the actual file in the file system being
  used by this <code>FileInputStream</code>.
 @return the file descriptor object associated with this stream.
 @throw IOExceptionif an I/O error occurs.
 - seealso: java.io.FileDescriptor
 */
- (JavaIoFileDescriptor *)getFD;

/*!
 @brief Reads a byte of data from this input stream.This method blocks
  if no input is yet available.
 @return the next byte of data, or <code>-1</code> if the end of the
              file is reached.
 @throw IOExceptionif an I/O error occurs.
 */
- (jint)read;

/*!
 @brief Reads up to <code>b.length</code> bytes of data from this input
  stream into an array of bytes.This method blocks until some input
  is available.
 @param b the buffer into which the data is read.
 @return the total number of bytes read into the buffer, or
              <code>-1</code> if there is no more data because the end of
              the file has been reached.
 @throw IOExceptionif an I/O error occurs.
 */
- (jint)readWithByteArray:(IOSByteArray *)b;

/*!
 @brief Reads up to <code>len</code> bytes of data from this input stream
  into an array of bytes.If <code>len</code> is not zero, the method
  blocks until some input is available; otherwise, no
  bytes are read and <code>0</code> is returned.
 @param b the buffer into which the data is read.
 @param off the start offset in the destination array  <code> b </code>
 @param len the maximum number of bytes read.
 @return the total number of bytes read into the buffer, or
              <code>-1</code> if there is no more data because the end of
              the file has been reached.
 @throw NullPointerExceptionIf <code>b</code> is <code>null</code>.
 @throw IndexOutOfBoundsExceptionIf <code>off</code> is negative, 
 <code>len</code> is negative, or <code>len</code> is greater than 
 <code>b.length - off</code>
 @throw IOExceptionif an I/O error occurs.
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 @brief Skips over and discards <code>n</code> bytes of data from the
  input stream.
 <p>The <code>skip</code> method may, for a variety of
  reasons, end up skipping over some smaller number of bytes,
  possibly <code>0</code>. If <code>n</code> is negative, the method
  will try to skip backwards. In case the backing file does not support
  backward skip at its current position, an <code>IOException</code> is
  thrown. The actual number of bytes skipped is returned. If it skips
  forwards, it returns a positive value. If it skips backwards, it
  returns a negative value. 
 <p>This method may skip more bytes than what are remaining in the
  backing file. This produces no exception and the number of bytes skipped
  may include some number of bytes that were beyond the EOF of the
  backing file. Attempting to read from the stream after skipping past
  the end will result in -1 indicating the end of the file.
 @param byteCount the number of bytes to be skipped.
 @return the actual number of bytes skipped.
 @throw IOExceptionif n is negative, if the stream does not
              support seek, or if an I/O error occurs.
 */
- (jlong)skipWithLong:(jlong)byteCount;

#pragma mark Protected

/*!
 @brief Ensures that the <code>close</code> method of this file input stream is
  called when there are no more references to it.
 @throw IOExceptionif an I/O error occurs.
 - seealso: java.io.FileInputStream#close()
 */
- (void)java_finalize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoFileInputStream)

FOUNDATION_EXPORT void JavaIoFileInputStream_initWithNSString_(JavaIoFileInputStream *self, NSString *name);

FOUNDATION_EXPORT JavaIoFileInputStream *new_JavaIoFileInputStream_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileInputStream *create_JavaIoFileInputStream_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void JavaIoFileInputStream_initWithJavaIoFile_(JavaIoFileInputStream *self, JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFileInputStream *new_JavaIoFileInputStream_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileInputStream *create_JavaIoFileInputStream_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void JavaIoFileInputStream_initWithJavaIoFileDescriptor_(JavaIoFileInputStream *self, JavaIoFileDescriptor *fdObj);

FOUNDATION_EXPORT JavaIoFileInputStream *new_JavaIoFileInputStream_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *fdObj) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileInputStream *create_JavaIoFileInputStream_initWithJavaIoFileDescriptor_(JavaIoFileDescriptor *fdObj);

FOUNDATION_EXPORT void JavaIoFileInputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileInputStream *self, JavaIoFileDescriptor *fdObj, jboolean isFdOwner);

FOUNDATION_EXPORT JavaIoFileInputStream *new_JavaIoFileInputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileDescriptor *fdObj, jboolean isFdOwner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFileInputStream *create_JavaIoFileInputStream_initWithJavaIoFileDescriptor_withBoolean_(JavaIoFileDescriptor *fdObj, jboolean isFdOwner);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoFileInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoFileInputStream")
