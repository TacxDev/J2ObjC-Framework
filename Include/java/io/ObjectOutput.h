//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/ObjectOutput.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoObjectOutput")
#ifdef RESTRICT_JavaIoObjectOutput
#define INCLUDE_ALL_JavaIoObjectOutput 0
#else
#define INCLUDE_ALL_JavaIoObjectOutput 1
#endif
#undef RESTRICT_JavaIoObjectOutput

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoObjectOutput_) && (INCLUDE_ALL_JavaIoObjectOutput || defined(INCLUDE_JavaIoObjectOutput))
#define JavaIoObjectOutput_

#define RESTRICT_JavaIoDataOutput 1
#define INCLUDE_JavaIoDataOutput 1
#include "java/io/DataOutput.h"

#define RESTRICT_JavaLangAutoCloseable 1
#define INCLUDE_JavaLangAutoCloseable 1
#include "java/lang/AutoCloseable.h"

@class IOSByteArray;
@class JavaLangInteger;

/*!
 @brief ObjectOutput extends the DataOutput interface to include writing of objects.
 DataOutput includes methods for output of primitive types, ObjectOutput
  extends that interface to include objects, arrays, and Strings.
 @author unascribed
 - seealso: java.io.InputStream
 - seealso: java.io.ObjectOutputStream
 - seealso: java.io.ObjectInputStream
 @since 1.1
 */
@protocol JavaIoObjectOutput < JavaIoDataOutput, JavaLangAutoCloseable, JavaObject >

/*!
 @brief Write an object to the underlying storage or stream.The
  class that implements this interface defines how the object is
  written.
 @param obj the object to be written
 @throw IOExceptionAny of the usual Input/Output related exceptions.
 */
- (void)writeObjectWithId:(id)obj;

/*!
 @brief Writes a byte.This method will block until the byte is actually
  written.
 @param b the byte
 @throw IOExceptionIf an I/O error has occurred.
 */
- (void)writeWithInt:(jint)b;

/*!
 @brief Writes an array of bytes.This method will block until the bytes
  are actually written.
 @param b the data to be written
 @throw IOExceptionIf an I/O error has occurred.
 */
- (void)writeWithByteArray:(IOSByteArray *)b;

/*!
 @brief Writes a sub array of bytes.
 @param b the data to be written
 @param off the start offset in the data
 @param len the number of bytes that are written
 @throw IOExceptionIf an I/O error has occurred.
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Flushes the stream.This will write any buffered
  output bytes.
 @throw IOExceptionIf an I/O error has occurred.
 */
- (void)flush;

/*!
 @brief Closes the stream.This method must be called
  to release any resources associated with the
  stream.
 @throw IOExceptionIf an I/O error has occurred.
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectOutput)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectOutput)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoObjectOutput")
