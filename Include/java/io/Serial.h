//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/Serial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoSerial")
#ifdef RESTRICT_JavaIoSerial
#define INCLUDE_ALL_JavaIoSerial 0
#else
#define INCLUDE_ALL_JavaIoSerial 1
#endif
#undef RESTRICT_JavaIoSerial

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoSerial_) && (INCLUDE_ALL_JavaIoSerial || defined(INCLUDE_JavaIoSerial))
#define JavaIoSerial_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

/*!
 @brief Indicates that an annotated field or method is part of the serialization mechanism
  defined by the 
 <cite>Java Object Serialization Specification</cite>.This
  annotation type is intended to allow compile-time checking of
  serialization-related declarations, analogous to the checking
  enabled by the <code>java.lang.Override</code> annotation type to
  validate method overriding.
 <code>Serializable</code> classes are encouraged to
  use <code>@@Serial</code> annotations to help a compiler catch
  mis-declared serialization-related fields and methods,
  mis-declarations that may otherwise be difficult to detect. 
 <p>Specifically, annotations of this type should be
  applied to serialization-related methods and fields in classes
  declared to be <code>Serializable</code>. The five serialization-related
  methods are: 
 <ul>
  <li><code>private void writeObject(java.io.ObjectOutputStream stream) throws IOException</code>
  <li><code>private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException</code>
  <li><code>private void readObjectNoData() throws ObjectStreamException</code>
  <li><i>ANY-ACCESS-MODIFIER</i> <code>Object writeReplace() throws ObjectStreamException</code>
  <li><i>ANY-ACCESS-MODIFIER</i> <code>Object readResolve() throws ObjectStreamException</code>
  </ul>
  The two serialization-related fields are: 
 <ul>
  <li><code>private static final ObjectStreamField[] serialPersistentFields</code>
  <li><code>private static final long serialVersionUID</code>
  </ul>
  Compilers are encouraged to validate that a method or field marked with a 
 <code>@@Serial</code> annotation is one of the defined serialization-related
  methods or fields declared in a meaningful context and issue a warning
  if that is not the case. 
 <p>It is a semantic error to apply this annotation to other fields or methods, including: 
 <ul>
  <li>fields or methods in a class that is not <code>Serializable</code>
  
 <li>fields or methods of the proper structural declaration, but in
  a type where they are ineffectual. For example, <code>enum</code> types
  are defined to have a <code>serialVersionUID</code> of <code>0L</code> so a 
 <code>serialVersionUID</code> field declared in an <code>enum</code> type is
  ignored. The five serialization-related methods identified above
  are likewise ignored for an <code>enum</code> type. 
 <li>in a class that is <code>Externalizable</code>:
  <ul>
    <li> method declarations of <code>writeObject</code>, <code>readObject</code>
 , and <code>readObjectNoData</code>
   <li>a field declaration for <code>serialPersistentFields</code>
  </ul>
  While the <code>Externalizable</code> interface extends <code>Serializable</code>
 , the three methods and one field above are 
 <em>not</em> used for externalizable classes. 
 </ul>
  Note that serialization mechanism accesses its designated fields
  and methods reflectively and those fields and methods may appear
  otherwise unused in a <code>Serializable</code> class.
 - seealso: Serializable
 - seealso: Externalizable
 @since 14
 */
@protocol JavaIoSerial < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoSerial)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoSerial)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaIoSerial")
