//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/CopyOnWriteArrayList.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList")
#ifdef RESTRICT_JavaUtilConcurrentCopyOnWriteArrayList
#define INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList 1
#endif
#undef RESTRICT_JavaUtilConcurrentCopyOnWriteArrayList

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentCopyOnWriteArrayList_) && (INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList || defined(INCLUDE_JavaUtilConcurrentCopyOnWriteArrayList))
#define JavaUtilConcurrentCopyOnWriteArrayList_

#define RESTRICT_JavaUtilList 1
#define INCLUDE_JavaUtilList 1
#include "java/util/List.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilFunctionUnaryOperator;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamStream;

/*!
 @brief A thread-safe variant of <code>java.util.ArrayList</code> in which all mutative
  operations (<code>add</code>, <code>set</code>, and so on) are implemented by
  making a fresh copy of the underlying array.
 <p>This is ordinarily too costly, but may be <em>more</em> efficient
  than alternatives when traversal operations vastly outnumber
  mutations, and is useful when you cannot or don't want to
  synchronize traversals, yet need to preclude interference among
  concurrent threads.  The "snapshot" style iterator method uses a
  reference to the state of the array at the point that the iterator
  was created. This array never changes during the lifetime of the
  iterator, so interference is impossible and the iterator is
  guaranteed not to throw <code>ConcurrentModificationException</code>.
  The iterator will not reflect additions, removals, or changes to
  the list since the iterator was created.  Element-changing
  operations on iterators themselves (<code>remove</code>, <code>set</code>, and 
 <code>add</code>) are not supported. These methods throw 
 <code>UnsupportedOperationException</code>.
  
 <p>All elements are permitted, including <code>null</code>.
  
 <p>Memory consistency effects: As with other concurrent
  collections, actions in a thread prior to placing an object into a 
 <code>CopyOnWriteArrayList</code>
  <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
  actions subsequent to the access or removal of that element from the 
 <code>CopyOnWriteArrayList</code> in another thread. 
 <p>This class is a member of the 
 <a href="{@@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework">
  Java Collections Framework</a>.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentCopyOnWriteArrayList : NSObject < JavaUtilList, JavaUtilRandomAccess, NSCopying, JavaIoSerializable > {
 @public
  /*!
   @brief The lock protecting all mutators.
   (We have a mild preference
  for builtin monitors over ReentrantLock when either will do.)
   */
  id lock_;
}

#pragma mark Public

/*!
 @brief Creates an empty list.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a list containing the elements of the specified
  collection, in the order they are returned by the collection's
  iterator.
 @param c the collection of initially held elements
 @throw NullPointerExceptionif the specified collection is null
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Creates a list holding a copy of the given array.
 @param toCopyIn the array (a copy of this array is used as the         internal array)
 @throw NullPointerExceptionif the specified array is null
 */
- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)toCopyIn;

/*!
 @brief Appends the specified element to the end of this list.
 @param e element to be appended to this list
 @return <code>true</code> (as specified by <code>Collection.add</code>)
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element at the specified position in this
  list.Shifts the element currently at that position (if any) and
  any subsequent elements to the right (adds one to their indices).
 @throw IndexOutOfBoundsException
 */
- (void)addWithInt:(jint)index
            withId:(id)element;

/*!
 @brief Appends all of the elements in the specified collection to the end
  of this list, in the order that they are returned by the specified
  collection's iterator.
 @param c collection containing elements to be added to this list
 @return <code>true</code> if this list changed as a result of the call
 @throw NullPointerExceptionif the specified collection is null
 - seealso: #add(Object)
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts all of the elements in the specified collection into this
  list, starting at the specified position.Shifts the element
  currently at that position (if any) and any subsequent elements to
  the right (increases their indices).
 The new elements will appear
  in this list in the order that they are returned by the
  specified collection's iterator.
 @param index index at which to insert the first element         from the specified collection
 @param c collection containing elements to be added to this list
 @return <code>true</code> if this list changed as a result of the call
 @throw IndexOutOfBoundsException
 @throw NullPointerExceptionif the specified collection is null
 - seealso: #add(int,Object)
 */
- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Appends all of the elements in the specified collection that
  are not already contained in this list, to the end of
  this list, in the order that they are returned by the
  specified collection's iterator.
 @param c collection containing elements to be added to this list
 @return the number of elements added
 @throw NullPointerExceptionif the specified collection is null
 - seealso: #addIfAbsent(Object)
 */
- (jint)addAllAbsentWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Appends the element, if not present.
 @param e element to be added to this list, if absent
 @return <code>true</code> if the element was added
 */
- (jboolean)addIfAbsentWithId:(id)e;

/*!
 @brief Removes all of the elements from this list.
 The list will be empty after this call returns.
 */
- (void)clear;

/*!
 @brief Returns a shallow copy of this list.
 (The elements themselves
  are not copied.)
 @return a clone of this list
 */
- (id __nonnull)java_clone;

/*!
 @brief Returns <code>true</code> if this list contains the specified element.
 More formally, returns <code>true</code> if and only if this list contains
  at least one element <code>e</code> such that <code>Objects.equals(o, e)</code>.
 @param o element whose presence in this list is to be tested
 @return <code>true</code> if this list contains the specified element
 */
- (jboolean)containsWithId:(id)o;

/*!
 @brief Returns <code>true</code> if this list contains all of the elements of the
  specified collection.
 @param c collection to be checked for containment in this list
 @return <code>true</code> if this list contains all of the elements of the
          specified collection
 @throw NullPointerExceptionif the specified collection is null
 - seealso: #contains(Object)
 */
- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Compares the specified object with this list for equality.
 Returns <code>true</code> if the specified object is the same object
  as this object, or if it is also a <code>List</code> and the sequence
  of elements returned by an iterator
  over the specified list is the same as the sequence returned by
  an iterator over this list.  The two sequences are considered to
  be the same if they have the same length and corresponding
  elements at the same position in the sequence are <em>equal</em>.
  Two elements <code>e1</code> and <code>e2</code> are considered 
 <em>equal</em> if <code>Objects.equals(e1, e2)</code>.
 @param o the object to be compared for equality with this list
 @return <code>true</code> if the specified object is equal to this list
 */
- (jboolean)isEqual:(id)o;

/*!
 @throw NullPointerException
 */
- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @throw IndexOutOfBoundsException
 */
- (id)getWithInt:(jint)index;

/*!
 @brief Returns the hash code value for this list.
 <p>This implementation uses the definition in <code>List.hashCode</code>.
 @return the hash code value for this list
 */
- (NSUInteger)hash;

/*!
 @brief Returns the index of the first occurrence of the specified element in
  this list, searching forwards from <code>index</code>, or returns -1 if
  the element is not found.
 More formally, returns the lowest index <code>i</code> such that 
 <code>i >= index && Objects.equals(get(i), e)</code>,
  or -1 if there is no such index.
 @param e element to search for
 @param index index to start searching from
 @return the index of the first occurrence of the element in
          this list at position <code>index</code> or later in the list;
          <code>-1</code> if the element is not found.
 @throw IndexOutOfBoundsExceptionif the specified index is negative
 */
- (jint)indexOfWithId:(id)e
              withInt:(jint)index;

/*!
 */
- (jint)indexOfWithId:(id)o;

/*!
 @brief Returns <code>true</code> if this list contains no elements.
 @return <code>true</code> if this list contains no elements
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator over the elements in this list in proper sequence.
 <p>The returned iterator provides a snapshot of the state of the list
  when the iterator was constructed. No synchronization is needed while
  traversing the iterator. The iterator does <em>NOT</em> support the 
 <code>remove</code> method.
 @return an iterator over the elements in this list in proper sequence
 */
- (id<JavaUtilIterator> __nonnull)iterator;

/*!
 @brief Returns the index of the last occurrence of the specified element in
  this list, searching backwards from <code>index</code>, or returns -1 if
  the element is not found.
 More formally, returns the highest index <code>i</code> such that 
 <code>i <= index && Objects.equals(get(i), e)</code>,
  or -1 if there is no such index.
 @param e element to search for
 @param index index to start searching backwards from
 @return the index of the last occurrence of the element at position
          less than or equal to <code>index</code> in this list;
          -1 if the element is not found.
 @throw IndexOutOfBoundsExceptionif the specified index is greater
          than or equal to the current size of this list
 */
- (jint)lastIndexOfWithId:(id)e
                  withInt:(jint)index;

/*!
 */
- (jint)lastIndexOfWithId:(id)o;

/*!
 @brief  
 <p>The returned iterator provides a snapshot of the state of the list
  when the iterator was constructed.
 No synchronization is needed while
  traversing the iterator. The iterator does <em>NOT</em> support the 
 <code>remove</code>, <code>set</code> or <code>add</code> methods.
 */
- (id<JavaUtilListIterator> __nonnull)listIterator;

/*!
 @brief  
 <p>The returned iterator provides a snapshot of the state of the list
  when the iterator was constructed.
 No synchronization is needed while
  traversing the iterator. The iterator does <em>NOT</em> support the 
 <code>remove</code>, <code>set</code> or <code>add</code> methods.
 @throw IndexOutOfBoundsException
 */
- (id<JavaUtilListIterator> __nonnull)listIteratorWithInt:(jint)index;

/*!
 @brief Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
  indices).  Returns the element that was removed from the list.
 @throw IndexOutOfBoundsException
 */
- (id)removeWithInt:(jint)index;

/*!
 @brief Removes the first occurrence of the specified element from this list,
  if it is present.If this list does not contain the element, it is
  unchanged.
 More formally, removes the element with the lowest index 
 <code>i</code> such that <code>Objects.equals(o, get(i))</code>
  (if such an element exists).  Returns <code>true</code> if this list
  contained the specified element (or equivalently, if this list
  changed as a result of the call).
 @param o element to be removed from this list, if present
 @return <code>true</code> if this list contained the specified element
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Removes from this list all of its elements that are contained in
  the specified collection.This is a particularly expensive operation
  in this class because of the need for an internal temporary array.
 @param c collection containing elements to be removed from this list
 @return <code>true</code> if this list changed as a result of the call
 @throw ClassCastExceptionif the class of an element of this list
          is incompatible with the specified collection
  (<a href="{@@docRoot}/java.base/java/util/Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this list contains a null element and the
          specified collection does not permit null elements
  (<a href="{@@docRoot}/java.base/java/util/Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 - seealso: #remove(Object)
 */
- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @throw NullPointerException
 */
- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)operator_;

/*!
 @brief Retains only the elements in this list that are contained in the
  specified collection.In other words, removes from this list all of
  its elements that are not contained in the specified collection.
 @param c collection containing elements to be retained in this list
 @return <code>true</code> if this list changed as a result of the call
 @throw ClassCastExceptionif the class of an element of this list
          is incompatible with the specified collection
  (<a href="{@@docRoot}/java.base/java/util/Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this list contains a null element and the
          specified collection does not permit null elements
  (<a href="{@@docRoot}/java.base/java/util/Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 - seealso: #remove(Object)
 */
- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Replaces the element at the specified position in this list with the
  specified element.
 @throw IndexOutOfBoundsException
 */
- (id)setWithInt:(jint)index
          withId:(id)element;

/*!
 @brief Returns the number of elements in this list.
 @return the number of elements in this list
 */
- (jint)size;

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)c;

/*!
 @brief Returns a <code>Spliterator</code> over the elements in this list.
 <p>The <code>Spliterator</code> reports <code>Spliterator.IMMUTABLE</code>,
  <code>Spliterator.ORDERED</code>, <code>Spliterator.SIZED</code>, and 
 <code>Spliterator.SUBSIZED</code>.
  
 <p>The spliterator provides a snapshot of the state of the list
  when the spliterator was constructed. No synchronization is needed while
  operating on the spliterator.
 @return a <code>Spliterator</code> over the elements in this list
 @since 1.8
 */
- (id<JavaUtilSpliterator> __nonnull)spliterator;

/*!
 @brief Returns a view of the portion of this list between 
 <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.
 The returned list is backed by this list, so changes in the
  returned list are reflected in this list. 
 <p>The semantics of the list returned by this method become
  undefined if the backing list (i.e., this list) is modified in
  any way other than via the returned list.
 @param fromIndex low endpoint (inclusive) of the subList
 @param toIndex high endpoint (exclusive) of the subList
 @return a view of the specified range within this list
 @throw IndexOutOfBoundsException
 */
- (id<JavaUtilList> __nonnull)subListWithInt:(jint)fromIndex
                                     withInt:(jint)toIndex;

/*!
 @brief Returns an array containing all of the elements in this list
  in proper sequence (from first to last element).
 <p>The returned array will be "safe" in that no references to it are
  maintained by this list.  (In other words, this method must allocate
  a new array).  The caller is thus free to modify the returned array. 
 <p>This method acts as bridge between array-based and collection-based
  APIs.
 @return an array containing all the elements in this list
 */
- (IOSObjectArray * __nonnull)toArray;

/*!
 @brief Returns an array containing all of the elements in this list in
  proper sequence (from first to last element); the runtime type of
  the returned array is that of the specified array.If the list fits
  in the specified array, it is returned therein.
 Otherwise, a new
  array is allocated with the runtime type of the specified array and
  the size of this list. 
 <p>If this list fits in the specified array with room to spare
  (i.e., the array has more elements than this list), the element in
  the array immediately following the end of the list is set to 
 <code>null</code>.  (This is useful in determining the length of this
  list <i>only</i> if the caller knows that this list does not contain
  any null elements.) 
 <p>Like the <code>toArray()</code> method, this method acts as bridge between
  array-based and collection-based APIs.  Further, this method allows
  precise control over the runtime type of the output array, and may,
  under certain circumstances, be used to save allocation costs. 
 <p>Suppose <code>x</code> is a list known to contain only strings.
  The following code can be used to dump the list into a newly
  allocated array of <code>String</code>:
  
 @code
 String[] y = x.toArray(new String[0]);
@endcode
  Note that <code>toArray(new Object[0])</code> is identical in function to 
 <code>toArray()</code>.
 @param a the array into which the elements of the list are to           be stored, if it is big enough; otherwise, a new array of the
            same runtime type is allocated for this purpose.
 @return an array containing all the elements in this list
 @throw ArrayStoreExceptionif the runtime type of the specified array
          is not a supertype of the runtime type of every element in
          this list
 @throw NullPointerExceptionif the specified array is null
 */
- (IOSObjectArray * __nonnull)toArrayWithNSObjectArray:(IOSObjectArray *)a;

/*!
 @brief Returns a string representation of this list.The string
  representation consists of the string representations of the list's
  elements in the order they are returned by its iterator, enclosed in
  square brackets (<code>"[]"</code>).
 Adjacent elements are separated by
  the characters <code>", "</code> (comma and space).  Elements are
  converted to strings as by <code>String.valueOf(Object)</code>.
 @return a string representation of this list
 */
- (NSString * __nonnull)description;

#pragma mark Package-Private

- (jboolean)bulkRemoveWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                            withInt:(jint)i
                                            withInt:(jint)end;

+ (id)elementAtWithNSObjectArray:(IOSObjectArray *)a
                         withInt:(jint)index;

/*!
 @brief Gets the array.Non-private so as to also be accessible
  from CopyOnWriteArraySet class.
 */
- (IOSObjectArray *)getArray;

+ (NSString *)outOfBoundsWithInt:(jint)index
                         withInt:(jint)size;

/*!
 @brief Removes from this list all of the elements whose index is between 
 <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.
 Shifts any succeeding elements to the left (reduces their index).
  This call shortens the list by <code>(toIndex - fromIndex)</code> elements.
  (If <code>toIndex==fromIndex</code>, this operation has no effect.)
 @param fromIndex index of first element to be removed
 @param toIndex index after last element to be removed
 @throw IndexOutOfBoundsExceptionif fromIndex or toIndex out of range
          (<code>fromIndex < 0 || toIndex > size() || toIndex < fromIndex</code>)
 */
- (void)removeRangeWithInt:(jint)fromIndex
                   withInt:(jint)toIndex;

- (void)replaceAllRangeWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)operator_
                                                 withInt:(jint)i
                                                 withInt:(jint)end;

/*!
 @brief Sets the array.
 */
- (void)setArrayWithNSObjectArray:(IOSObjectArray *)a;

- (void)sortRangeWithJavaUtilComparator:(id<JavaUtilComparator>)c
                                withInt:(jint)i
                                withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentCopyOnWriteArrayList)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentCopyOnWriteArrayList, lock_, id)

FOUNDATION_EXPORT void JavaUtilConcurrentCopyOnWriteArrayList_init(JavaUtilConcurrentCopyOnWriteArrayList *self);

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *new_JavaUtilConcurrentCopyOnWriteArrayList_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *create_JavaUtilConcurrentCopyOnWriteArrayList_init(void);

FOUNDATION_EXPORT void JavaUtilConcurrentCopyOnWriteArrayList_initWithJavaUtilCollection_(JavaUtilConcurrentCopyOnWriteArrayList *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *new_JavaUtilConcurrentCopyOnWriteArrayList_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *create_JavaUtilConcurrentCopyOnWriteArrayList_initWithJavaUtilCollection_(id<JavaUtilCollection> c);

FOUNDATION_EXPORT void JavaUtilConcurrentCopyOnWriteArrayList_initWithNSObjectArray_(JavaUtilConcurrentCopyOnWriteArrayList *self, IOSObjectArray *toCopyIn);

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *new_JavaUtilConcurrentCopyOnWriteArrayList_initWithNSObjectArray_(IOSObjectArray *toCopyIn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList *create_JavaUtilConcurrentCopyOnWriteArrayList_initWithNSObjectArray_(IOSObjectArray *toCopyIn);

FOUNDATION_EXPORT id JavaUtilConcurrentCopyOnWriteArrayList_elementAtWithNSObjectArray_withInt_(IOSObjectArray *a, jint index);

FOUNDATION_EXPORT NSString *JavaUtilConcurrentCopyOnWriteArrayList_outOfBoundsWithInt_withInt_(jint index, jint size);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCopyOnWriteArrayList)

#endif

#if !defined (JavaUtilConcurrentCopyOnWriteArrayList_COWIterator_) && (INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList || defined(INCLUDE_JavaUtilConcurrentCopyOnWriteArrayList_COWIterator))
#define JavaUtilConcurrentCopyOnWriteArrayList_COWIterator_

#define RESTRICT_JavaUtilListIterator 1
#define INCLUDE_JavaUtilListIterator 1
#include "java/util/ListIterator.h"

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilConcurrentCopyOnWriteArrayList_COWIterator : NSObject < JavaUtilListIterator >

#pragma mark Public

/*!
 @brief Not supported.Always throws UnsupportedOperationException.
 @throw UnsupportedOperationExceptionalways; <code>add</code>
          is not supported by this iterator.
 */
- (void)addWithId:(id)e;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)hasNext;

- (jboolean)hasPrevious;

- (id)next;

- (jint)nextIndex;

- (id)previous;

- (jint)previousIndex;

/*!
 @brief Not supported.Always throws UnsupportedOperationException.
 @throw UnsupportedOperationExceptionalways; <code>remove</code>
          is not supported by this iterator.
 */
- (void)remove;

/*!
 @brief Not supported.Always throws UnsupportedOperationException.
 @throw UnsupportedOperationExceptionalways; <code>set</code>
          is not supported by this iterator.
 */
- (void)setWithId:(id)e;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)es
                                        withInt:(jint)initialCursor;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentCopyOnWriteArrayList_COWIterator)

FOUNDATION_EXPORT void JavaUtilConcurrentCopyOnWriteArrayList_COWIterator_initWithNSObjectArray_withInt_(JavaUtilConcurrentCopyOnWriteArrayList_COWIterator *self, IOSObjectArray *es, jint initialCursor);

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList_COWIterator *new_JavaUtilConcurrentCopyOnWriteArrayList_COWIterator_initWithNSObjectArray_withInt_(IOSObjectArray *es, jint initialCursor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCopyOnWriteArrayList_COWIterator *create_JavaUtilConcurrentCopyOnWriteArrayList_COWIterator_initWithNSObjectArray_withInt_(IOSObjectArray *es, jint initialCursor);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCopyOnWriteArrayList_COWIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentCopyOnWriteArrayList")
