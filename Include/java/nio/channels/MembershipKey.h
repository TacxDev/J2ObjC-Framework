//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/MembershipKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsMembershipKey")
#ifdef RESTRICT_JavaNioChannelsMembershipKey
#define INCLUDE_ALL_JavaNioChannelsMembershipKey 0
#else
#define INCLUDE_ALL_JavaNioChannelsMembershipKey 1
#endif
#undef RESTRICT_JavaNioChannelsMembershipKey

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsMembershipKey_) && (INCLUDE_ALL_JavaNioChannelsMembershipKey || defined(INCLUDE_JavaNioChannelsMembershipKey))
#define JavaNioChannelsMembershipKey_

@class JavaLangBoolean;
@class JavaNetInetAddress;
@class JavaNetNetworkInterface;
@protocol JavaNioChannelsMulticastChannel;

/*!
 @brief A token representing the membership of an Internet Protocol (IP) multicast
  group.
 <p> A membership key may represent a membership to receive all datagrams sent
  to the group, or it may be <em>source-specific</em>, meaning that it
  represents a membership that receives only datagrams from a specific source
  address. Whether or not a membership key is source-specific may be determined
  by invoking its <code>sourceAddress</code> method. 
 <p> A membership key is valid upon creation and remains valid until the
  membership is dropped by invoking the <code>drop</code> method, or
  the channel is closed. The validity of the membership key may be tested
  by invoking its <code>isValid</code> method. 
 <p> Where a membership key is not source-specific and the underlying operation
  system supports source filtering, then the <code>block</code> and <code>unblock</code>
  methods can be used to block or unblock multicast datagrams
  from particular source addresses.
 - seealso: MulticastChannel
 @since 1.7
 */
@interface JavaNioChannelsMembershipKey : NSObject

#pragma mark Public

/*!
 @brief Block multicast datagrams from the given source address.
 <p> If this membership key is not source-specific, and the underlying
  operating system supports source filtering, then this method blocks
  multicast datagrams from the given source address. If the given source
  address is already blocked then this method has no effect.
  After a source address is blocked it may still be possible to receive
  datagrams from that source. This can arise when datagrams are waiting to
  be received in the socket's receive buffer.
 @param source The source address to block
 @return This membership key
 @throw IllegalArgumentException
 If the <code>source</code> parameter is not a unicast address or
           is not the same address type as the multicast group
 @throw IllegalStateException
 If this membership key is source-specific or is no longer valid
 @throw UnsupportedOperationException
 If the underlying operating system does not support source
           filtering
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsMembershipKey *)blockWithJavaNetInetAddress:(JavaNetInetAddress *)source;

/*!
 @brief Returns the channel for which this membership key was created.This
  method will continue to return the channel even after the membership
  becomes <code>invalid</code>.
 @return the channel
 */
- (id<JavaNioChannelsMulticastChannel>)channel;

/*!
 @brief Drop membership.
 <p> If the membership key represents a membership to receive all datagrams
  then the membership is dropped and the channel will no longer receive any
  datagrams sent to the group. If the membership key is source-specific
  then the channel will no longer receive datagrams sent to the group from
  that source address. 
 <p> After membership is dropped it may still be possible to receive
  datagrams sent to the group. This can arise when datagrams are waiting to
  be received in the socket's receive buffer. After membership is dropped
  then the channel may <code>join</code> the group again
  in which case a new membership key is returned. 
 <p> Upon return, this membership object will be <code>invalid</code>.
  If the multicast group membership is already invalid then invoking this
  method has no effect. Once a multicast group membership is invalid,
  it remains invalid forever.
 */
- (void)drop;

/*!
 @brief Returns the multicast group for which this membership key was created.
 This method will continue to return the group even after the membership
  becomes <code>invalid</code>.
 @return the multicast group
 */
- (JavaNetInetAddress *)group;

/*!
 @brief Tells whether or not this membership is valid.
 <p> A multicast group membership is valid upon creation and remains
  valid until the membership is dropped by invoking the <code>drop</code>
  method, or the channel is closed.
 @return <code>true</code> if this membership key is valid, <code>false</code>
           otherwise
 */
- (jboolean)isValid;

/*!
 @brief Returns the network interface for which this membership key was created.
 This method will continue to return the network interface even after the
  membership becomes <code>invalid</code>.
 @return the network interface
 */
- (JavaNetNetworkInterface *)networkInterface;

/*!
 @brief Returns the source address if this membership key is source-specific,
  or <code>null</code> if this membership is not source-specific.
 @return The source address if this membership key is source-specific,
           otherwise <code>null</code>
 */
- (JavaNetInetAddress *)sourceAddress;

/*!
 @brief Unblock multicast datagrams from the given source address that was
  previously blocked using the <code>block</code> method.
 @param source The source address to unblock
 @return This membership key
 @throw IllegalStateException
 If the given source address is not currently blocked or the
           membership key is no longer valid
 */
- (JavaNioChannelsMembershipKey *)unblockWithJavaNetInetAddress:(JavaNetInetAddress *)source;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsMembershipKey)

FOUNDATION_EXPORT void JavaNioChannelsMembershipKey_init(JavaNioChannelsMembershipKey *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsMembershipKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsMembershipKey")
