//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/SelectionKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsSelectionKey")
#ifdef RESTRICT_JavaNioChannelsSelectionKey
#define INCLUDE_ALL_JavaNioChannelsSelectionKey 0
#else
#define INCLUDE_ALL_JavaNioChannelsSelectionKey 1
#endif
#undef RESTRICT_JavaNioChannelsSelectionKey

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsSelectionKey_) && (INCLUDE_ALL_JavaNioChannelsSelectionKey || defined(INCLUDE_JavaNioChannelsSelectionKey))
#define JavaNioChannelsSelectionKey_

@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaNioChannelsSelectableChannel;
@class JavaNioChannelsSelector;

/*!
 @brief A token representing the registration of a <code>SelectableChannel</code> with a 
 <code>Selector</code>.
 <p> A selection key is created each time a channel is registered with a
  selector.  A key remains valid until it is <i>cancelled</i> by invoking its 
 <code>cancel</code> method, by closing its channel, or by closing its
  selector.  Cancelling a key does not immediately remove it from its
  selector; it is instead added to the selector's <a href="Selector.html#ks">
 <i>cancelled-key set</i></a> for removal during the
  next selection operation.  The validity of a key may be tested by invoking
  its <code>isValid</code> method. 
 <a id="opsets"></a>
  
 <p> A selection key contains two <i>operation sets</i> represented as
  integer values.  Each bit of an operation set denotes a category of
  selectable operations that are supported by the key's channel. 
 <ul>
    <li><p> The <i>interest set</i> determines which operation categories will
    be tested for readiness the next time one of the selector's selection
    methods is invoked.  The interest set is initialized with the value given
    when the key is created; it may later be changed via the <code>interestOps(int)</code>
  method. </p></li>
    <li><p> The <i>ready set</i> identifies the operation categories for which
    the key's channel has been detected to be ready by the key's selector.
    The ready set is initialized to zero when the key is created; it may later
    be updated by the selector during a selection operation, but it cannot be
    updated directly. </p></li>
  
 </ul>
  
 <p> That a selection key's ready set indicates that its channel is ready for
  some operation category is a hint, but not a guarantee, that an operation in
  such a category may be performed by a thread without causing the thread to
  block.  A ready set is most likely to be accurate immediately after the
  completion of a selection operation.  It is likely to be made inaccurate by
  external events and by I/O operations that are invoked upon the
  corresponding channel. 
 <p> This class defines all known operation-set bits, but precisely which
  bits are supported by a given channel depends upon the type of the channel.
  Each subclass of <code>SelectableChannel</code> defines an <code>validOps()</code>
  method which returns a set
  identifying just those operations that are supported by the channel.  An
  attempt to set or test an operation-set bit that is not supported by a key's
  channel will result in an appropriate run-time exception. 
 <p> It is often necessary to associate some application-specific data with a
  selection key, for example an object that represents the state of a
  higher-level protocol and handles readiness notifications in order to
  implement that protocol.  Selection keys therefore support the 
 <i>attachment</i> of a single arbitrary object to a key.  An object can be
  attached via the <code>attach</code> method and then later retrieved via
  the <code>attachment</code> method. 
 <p> Selection keys are safe for use by multiple concurrent threads.  A
  selection operation will always use the interest-set value that was current
  at the moment that the operation began.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 - seealso: SelectableChannel
 - seealso: Selector
 */
@interface JavaNioChannelsSelectionKey : NSObject

#pragma mark Public

/*!
 @brief Attaches the given object to this key.
 <p> An attached object may later be retrieved via the <code>attachment</code>
  method.  Only one object may be attached at a time; invoking
  this method causes any previous attachment to be discarded.  The current
  attachment may be discarded by attaching <code>null</code>.  </p>
 @param ob The object to be attached; may be 
 <code>null</code>
 @return The previously-attached object, if any,
           otherwise <code>null</code>
 */
- (id)attachWithId:(id)ob;

/*!
 @brief Retrieves the current attachment.
 @return The object currently attached to this key,
           or <code>null</code> if there is no attachment
 */
- (id)attachment;

/*!
 @brief Requests that the registration of this key's channel with its selector
  be cancelled.Upon return the key will be invalid and will have been
  added to its selector's cancelled-key set.
 The key will be removed from
  all of the selector's key sets during the next selection operation. 
 <p> If this key has already been cancelled then invoking this method has
  no effect.  Once cancelled, a key remains forever invalid. </p>
  
 <p> This method may be invoked at any time.  It synchronizes on the
  selector's cancelled-key set, and therefore may block briefly if invoked
  concurrently with a cancellation or selection operation involving the
  same selector.  </p>
 */
- (void)cancel;

/*!
 @brief Returns the channel for which this key was created.This method will
  continue to return the channel even after the key is cancelled.
 @return This key's channel
 */
- (JavaNioChannelsSelectableChannel *)channel;

/*!
 @brief Retrieves this key's interest set.
 <p> It is guaranteed that the returned set will only contain operation
  bits that are valid for this key's channel. </p>
 @return This key's interest set
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jint)interestOps;

/*!
 @brief Sets this key's interest set to the given value.
 <p> This method may be invoked at any time.  If this method is invoked
  while a selection operation is in progress then it has no effect upon
  that operation; the change to the key's interest set will be seen by the
  next selection operation.
 @param ops The new interest set
 @return This selection key
 @throw IllegalArgumentException
 If a bit in the set does not correspond to an operation that
           is supported by this key's channel, that is, if          
 <code>(ops & ~channel().validOps()) != 0</code>
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (JavaNioChannelsSelectionKey *)interestOpsWithInt:(jint)ops;

/*!
 @brief Atomically sets this key's interest set to the bitwise intersection ("and")
  of the existing interest set and the given value.This method is guaranteed
  to be atomic with respect to other concurrent calls to this method or to 
 <code>interestOpsOr(int)</code>.
 <p> This method may be invoked at any time.  If this method is invoked
  while a selection operation is in progress then it has no effect upon
  that operation; the change to the key's interest set will be seen by the
  next selection operation.
 @param ops The interest set to apply
 @return The previous interest set
 @throw CancelledKeyException
 If this key has been cancelled
 @since 11
 */
- (jint)interestOpsAndWithInt:(jint)ops;

/*!
 @brief Atomically sets this key's interest set to the bitwise union ("or") of
  the existing interest set and the given value.This method is guaranteed
  to be atomic with respect to other concurrent calls to this method or to 
 <code>interestOpsAnd(int)</code>.
 <p> This method may be invoked at any time.  If this method is invoked
  while a selection operation is in progress then it has no effect upon
  that operation; the change to the key's interest set will be seen by the
  next selection operation.
 @param ops The interest set to apply
 @return The previous interest set
 @throw IllegalArgumentException
 If a bit in the set does not correspond to an operation that
           is supported by this key's channel, that is, if          
 <code>(ops & ~channel().validOps()) != 0</code>
 @throw CancelledKeyException
 If this key has been cancelled
 @since 11
 */
- (jint)interestOpsOrWithInt:(jint)ops;

/*!
 @brief Tests whether this key's channel is ready to accept a new socket
  connection.
 <p> An invocation of this method of the form <code>k.isAcceptable()</code>
  behaves in exactly the same way as the expression 
 <blockquote>@code
 k.readyOps() & OP_ACCEPT != 0 
 
@endcode</blockquote>
  
 <p> If this key's channel does not support socket-accept operations then
  this method always returns <code>false</code>.  </p>
 @return <code>true</code> if, and only if,
           <code>readyOps() & OP_ACCEPT</code> is nonzero
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jboolean)isAcceptable;

/*!
 @brief Tests whether this key's channel has either finished, or failed to
  finish, its socket-connection operation.
 <p> An invocation of this method of the form <code>k.isConnectable()</code>
  behaves in exactly the same way as the expression 
 <blockquote>@code
 k.readyOps() & OP_CONNECT != 0 
 
@endcode</blockquote>
  
 <p> If this key's channel does not support socket-connect operations
  then this method always returns <code>false</code>.  </p>
 @return <code>true</code> if, and only if,
           <code>readyOps() & OP_CONNECT</code> is nonzero
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jboolean)isConnectable;

/*!
 @brief Tests whether this key's channel is ready for reading.
 <p> An invocation of this method of the form <code>k.isReadable()</code>
  behaves in exactly the same way as the expression 
 <blockquote>@code
 k.readyOps() & OP_READ != 0 
 
@endcode</blockquote>
  
 <p> If this key's channel does not support read operations then this
  method always returns <code>false</code>.  </p>
 @return <code>true</code> if, and only if,
                 <code>readyOps() & OP_READ</code> is nonzero
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jboolean)isReadable;

/*!
 @brief Tells whether or not this key is valid.
 <p> A key is valid upon creation and remains so until it is cancelled,
  its channel is closed, or its selector is closed.  </p>
 @return <code>true</code> if, and only if, this key is valid
 */
- (jboolean)isValid;

/*!
 @brief Tests whether this key's channel is ready for writing.
 <p> An invocation of this method of the form <code>k.isWritable()</code>
  behaves in exactly the same way as the expression 
 <blockquote>@code
 k.readyOps() & OP_WRITE != 0 
 
@endcode</blockquote>
  
 <p> If this key's channel does not support write operations then this
  method always returns <code>false</code>.  </p>
 @return <code>true</code> if, and only if,
           <code>readyOps() & OP_WRITE</code> is nonzero
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jboolean)isWritable;

/*!
 @brief Retrieves this key's ready-operation set.
 <p> It is guaranteed that the returned set will only contain operation
  bits that are valid for this key's channel.  </p>
 @return This key's ready-operation set
 @throw CancelledKeyException
 If this key has been cancelled
 */
- (jint)readyOps;

/*!
 @brief Returns the selector for which this key was created.This method will
  continue to return the selector even after the key is cancelled.
 @return This key's selector
 */
- (JavaNioChannelsSelector *)selector;

#pragma mark Protected

/*!
 @brief Constructs an instance of this class.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(JavaNioChannelsSelectionKey)

/*!
 @brief Operation-set bit for read operations.
 <p> Suppose that a selection key's interest set contains 
 <code>OP_READ</code> at the start of a <a href="Selector.html#selop">
 selection operation</a>.  If the selector
  detects that the corresponding channel is ready for reading, has reached
  end-of-stream, has been remotely shut down for further reading, or has
  an error pending, then it will add <code>OP_READ</code> to the key's
  ready-operation set.  </p>
 */
inline jint JavaNioChannelsSelectionKey_get_OP_READ(void);
#define JavaNioChannelsSelectionKey_OP_READ 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioChannelsSelectionKey, OP_READ, jint)

/*!
 @brief Operation-set bit for write operations.
 <p> Suppose that a selection key's interest set contains 
 <code>OP_WRITE</code> at the start of a <a href="Selector.html#selop">
 selection operation</a>.  If the selector
  detects that the corresponding channel is ready for writing, has been
  remotely shut down for further writing, or has an error pending, then it
  will add <code>OP_WRITE</code> to the key's ready set.  </p>
 */
inline jint JavaNioChannelsSelectionKey_get_OP_WRITE(void);
#define JavaNioChannelsSelectionKey_OP_WRITE 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioChannelsSelectionKey, OP_WRITE, jint)

/*!
 @brief Operation-set bit for socket-connect operations.
 <p> Suppose that a selection key's interest set contains 
 <code>OP_CONNECT</code> at the start of a <a href="Selector.html#selop">
 selection operation</a>.  If the selector
  detects that the corresponding socket channel is ready to complete its
  connection sequence, or has an error pending, then it will add 
 <code>OP_CONNECT</code> to the key's ready set.  </p>
 */
inline jint JavaNioChannelsSelectionKey_get_OP_CONNECT(void);
#define JavaNioChannelsSelectionKey_OP_CONNECT 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioChannelsSelectionKey, OP_CONNECT, jint)

/*!
 @brief Operation-set bit for socket-accept operations.
 <p> Suppose that a selection key's interest set contains 
 <code>OP_ACCEPT</code> at the start of a <a href="Selector.html#selop">
 selection operation</a>.  If the selector
  detects that the corresponding server-socket channel is ready to accept
  another connection, or has an error pending, then it will add 
 <code>OP_ACCEPT</code> to the key's ready set.  </p>
 */
inline jint JavaNioChannelsSelectionKey_get_OP_ACCEPT(void);
#define JavaNioChannelsSelectionKey_OP_ACCEPT 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioChannelsSelectionKey, OP_ACCEPT, jint)

FOUNDATION_EXPORT void JavaNioChannelsSelectionKey_init(JavaNioChannelsSelectionKey *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsSelectionKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsSelectionKey")
