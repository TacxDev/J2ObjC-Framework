//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/MulticastChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsMulticastChannel")
#ifdef RESTRICT_JavaNioChannelsMulticastChannel
#define INCLUDE_ALL_JavaNioChannelsMulticastChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsMulticastChannel 1
#endif
#undef RESTRICT_JavaNioChannelsMulticastChannel

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsMulticastChannel_) && (INCLUDE_ALL_JavaNioChannelsMulticastChannel || defined(INCLUDE_JavaNioChannelsMulticastChannel))
#define JavaNioChannelsMulticastChannel_

#define RESTRICT_JavaNioChannelsNetworkChannel 1
#define INCLUDE_JavaNioChannelsNetworkChannel 1
#include "java/nio/channels/NetworkChannel.h"

@class JavaNetInetAddress;
@class JavaNetNetworkInterface;
@class JavaNioChannelsMembershipKey;

/*!
 @brief A network channel that supports Internet Protocol (IP) multicasting.
 <p> IP multicasting is the transmission of IP datagrams to members of
  a <em>group</em> that is zero or more hosts identified by a single destination
  address. 
 <p> In the case of a channel to an <code>IPv4</code> socket,
  the underlying operating system supports <a href="http://www.ietf.org/rfc/rfc2236.txt">
  <i>RFC&nbsp;2236: Internet Group Management Protocol, Version 2 (IGMPv2)</i></a>.
  It may optionally support source filtering as specified by <a href="http://www.ietf.org/rfc/rfc3376.txt">
  <i>RFC&nbsp;3376: Internet Group
  Management Protocol, Version 3 (IGMPv3)</i></a>.
  For channels to an <code>IPv6</code> socket, the equivalent
  standards are <a href="http://www.ietf.org/rfc/rfc2710.txt"> <i>RFC&nbsp;2710:
  Multicast Listener Discovery (MLD) for IPv6</i></a> and <a href="http://www.ietf.org/rfc/rfc3810.txt">
  <i>RFC&nbsp;3810: Multicast Listener
  Discovery Version 2 (MLDv2) for IPv6</i></a>.
  
 <p> The <code>join(InetAddress,NetworkInterface)</code> method is used to
  join a group and receive all multicast datagrams sent to the group. A channel
  may join several multicast groups and may join the same group on several 
 <code>interfaces</code>. Membership is dropped by invoking the <code>drop</code>
  method on the returned <code>MembershipKey</code>. If the
  underlying platform supports source filtering then the <code>block</code>
  and <code>unblock</code> methods can be used to block or
  unblock multicast datagrams from particular source addresses. 
 <p> The <code>join(InetAddress,NetworkInterface,InetAddress)</code> method
  is used to begin receiving datagrams sent to a group whose source address matches
  a given source address. This method throws <code>UnsupportedOperationException</code>
  if the underlying platform does not support source filtering.  Membership is 
 <em>cumulative</em> and this method may be invoked again with the same group
  and interface to allow receiving datagrams from other source addresses. The
  method returns a <code>MembershipKey</code> that represents membership to receive
  datagrams from the given source address. Invoking the key's <code>drop</code>
  method drops membership so that datagrams from the
  source address can no longer be received. 
 <h2>Platform dependencies</h2>
  The multicast implementation is intended to map directly to the native
  multicasting facility. Consequently, the following items should be considered
  when developing an application that receives IP multicast datagrams: 
 <ol>
  
 <li><p> The creation of the channel should specify the <code>ProtocolFamily</code>
  that corresponds to the address type of the multicast groups that the channel
  will join. There is no guarantee that a channel to a socket in one protocol
  family can join and receive multicast datagrams when the address of the
  multicast group corresponds to another protocol family. For example, it is
  implementation specific if a channel to an <code>IPv6</code>
  socket can join an <code>IPv4</code> multicast group and receive
  multicast datagrams sent to the group. </p></li>
  
 <li><p> The channel's socket should be bound to the <code>wildcard</code>
  address. If the socket is bound to
  a specific address, rather than the wildcard address then it is implementation
  specific if multicast datagrams are received by the socket. </p></li>
  
 <li><p> The <code>SO_REUSEADDR</code> option should be
  enabled prior to <code>binding</code> the socket. This is
  required to allow multiple members of the group to bind to the same
  address. </p></li>
  
 </ol>
  
 <p> <b>Usage Example:</b>
  @code

      // join multicast group on this interface, and also use this
      // interface for outgoing multicast datagrams
      NetworkInterface ni = NetworkInterface.getByName("hme0");
      DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)
          .setOption(StandardSocketOptions.SO_REUSEADDR, true)
          .bind(new InetSocketAddress(5000))
          .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni);
      InetAddress group = InetAddress.getByName("225.4.5.6");
      MembershipKey key = dc.join(group, ni); 
  
@endcode
 @since 1.7
 */
@protocol JavaNioChannelsMulticastChannel < JavaNioChannelsNetworkChannel, JavaObject >

/*!
 @brief Closes this channel.
 <p> If the channel is a member of a multicast group then the membership is 
 <code>dropped</code>. Upon return, the <code>membership-key</code>
  will be <code>invalid</code>
 .
  
 <p> This method otherwise behaves exactly as specified by the <code>Channel</code>
  interface.
 @throw IOException
 If an I/O error occurs
 */
- (void)close;

/*!
 @brief Joins a multicast group to begin receiving all datagrams sent to the group,
  returning a membership key.
 <p> If this channel is currently a member of the group on the given
  interface to receive all datagrams then the membership key, representing
  that membership, is returned. Otherwise this channel joins the group and
  the resulting new membership key is returned. The resulting membership key
  is not <code>source-specific</code>.
  
 <p> A multicast channel may join several multicast groups, including
  the same group on more than one interface. An implementation may impose a
  limit on the number of groups that may be joined at the same time.
 @param group The multicast address to join
 @param interf The network interface on which to join the group
 @return The membership key
 @throw IllegalArgumentException
 If the group parameter is not a <code>multicast</code>
  address, or the group parameter is an address type
           that is not supported by this channel
 @throw IllegalStateException
 If the channel already has source-specific membership of the
           group on the interface
 @throw UnsupportedOperationException
 If the channel's socket is not an Internet Protocol socket
 @throw ClosedChannelException
 If this channel is closed
 @throw IOException
 If an I/O error occurs
 @throw SecurityException
 If a security manager is set, and its
           <code>checkMulticast</code>
           method denies access to the multiast group
 */
- (JavaNioChannelsMembershipKey *)joinWithJavaNetInetAddress:(JavaNetInetAddress *)group
                                 withJavaNetNetworkInterface:(JavaNetNetworkInterface *)interf;

/*!
 @brief Joins a multicast group to begin receiving datagrams sent to the group
  from a given source address.
 <p> If this channel is currently a member of the group on the given
  interface to receive datagrams from the given source address then the
  membership key, representing that membership, is returned. Otherwise this
  channel joins the group and the resulting new membership key is returned.
  The resulting membership key is <code>source-specific</code>
 .
  
 <p> Membership is <em>cumulative</em> and this method may be invoked
  again with the same group and interface to allow receiving datagrams sent
  by other source addresses to the group.
 @param group The multicast address to join
 @param interf The network interface on which to join the group
 @param source The source address
 @return The membership key
 @throw IllegalArgumentException
 If the group parameter is not a <code>multicast</code>
  address, the
           source parameter is not a unicast address, the group
           parameter is an address type that is not supported by this channel,
           or the source parameter is not the same address type as the group
 @throw IllegalStateException
 If the channel is currently a member of the group on the given
           interface to receive all datagrams
 @throw UnsupportedOperationException
 If the channel's socket is not an Internet Protocol socket or
           source filtering is not supported
 @throw ClosedChannelException
 If this channel is closed
 @throw IOException
 If an I/O error occurs
 @throw SecurityException
 If a security manager is set, and its
           <code>checkMulticast</code>
           method denies access to the multiast group
 */
- (JavaNioChannelsMembershipKey *)joinWithJavaNetInetAddress:(JavaNetInetAddress *)group
                                 withJavaNetNetworkInterface:(JavaNetNetworkInterface *)interf
                                      withJavaNetInetAddress:(JavaNetInetAddress *)source;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsMulticastChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsMulticastChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsMulticastChannel")
