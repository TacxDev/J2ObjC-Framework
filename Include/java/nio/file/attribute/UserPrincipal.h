//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/attribute/UserPrincipal.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileAttributeUserPrincipal")
#ifdef RESTRICT_JavaNioFileAttributeUserPrincipal
#define INCLUDE_ALL_JavaNioFileAttributeUserPrincipal 0
#else
#define INCLUDE_ALL_JavaNioFileAttributeUserPrincipal 1
#endif
#undef RESTRICT_JavaNioFileAttributeUserPrincipal

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileAttributeUserPrincipal_) && (INCLUDE_ALL_JavaNioFileAttributeUserPrincipal || defined(INCLUDE_JavaNioFileAttributeUserPrincipal))
#define JavaNioFileAttributeUserPrincipal_

#define RESTRICT_JavaSecurityPrincipal 1
#define INCLUDE_JavaSecurityPrincipal 1
#include "java/security/Principal.h"

/*!
 @brief A <code>Principal</code> representing an identity used to determine access rights
  to objects in a file system.
 <p> On many platforms and file systems an entity requires appropriate access
  rights or permissions in order to access objects in a file system. The
  access rights are generally performed by checking the identity of the entity.
  For example, on implementations that use Access Control Lists (ACLs) to
  enforce privilege separation then a file in the file system may have an
  associated ACL that determines the access rights of identities specified in
  the ACL. 
 <p> A <code>UserPrincipal</code> object is an abstract representation of an
  identity. It has a <code>name</code> that is typically the username or
  account name that it represents. User principal objects may be obtained using
  a <code>UserPrincipalLookupService</code>, or returned by <code>FileAttributeView</code>
  implementations that provide access to identity related
  attributes. For example, the <code>AclFileAttributeView</code> and <code>PosixFileAttributeView</code>
  provide access to a file's <code>owner</code>
 .
 @since 1.7
 */
@protocol JavaNioFileAttributeUserPrincipal < JavaSecurityPrincipal, JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileAttributeUserPrincipal)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileAttributeUserPrincipal)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileAttributeUserPrincipal")
