//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/attribute/PosixFileAttributeView.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileAttributePosixFileAttributeView")
#ifdef RESTRICT_JavaNioFileAttributePosixFileAttributeView
#define INCLUDE_ALL_JavaNioFileAttributePosixFileAttributeView 0
#else
#define INCLUDE_ALL_JavaNioFileAttributePosixFileAttributeView 1
#endif
#undef RESTRICT_JavaNioFileAttributePosixFileAttributeView

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileAttributePosixFileAttributeView_) && (INCLUDE_ALL_JavaNioFileAttributePosixFileAttributeView || defined(INCLUDE_JavaNioFileAttributePosixFileAttributeView))
#define JavaNioFileAttributePosixFileAttributeView_

#define RESTRICT_JavaNioFileAttributeBasicFileAttributeView 1
#define INCLUDE_JavaNioFileAttributeBasicFileAttributeView 1
#include "java/nio/file/attribute/BasicFileAttributeView.h"

#define RESTRICT_JavaNioFileAttributeFileOwnerAttributeView 1
#define INCLUDE_JavaNioFileAttributeFileOwnerAttributeView 1
#include "java/nio/file/attribute/FileOwnerAttributeView.h"

@protocol JavaNioFileAttributeGroupPrincipal;
@protocol JavaNioFileAttributePosixFileAttributes;
@protocol JavaUtilSet;

/*!
 @brief A file attribute view that provides a view of the file attributes commonly
  associated with files on file systems used by operating systems that implement
  the Portable Operating System Interface (POSIX) family of standards.
 <p> Operating systems that implement the <a href="http://www.opengroup.org">
  POSIX</a> family of standards commonly use file systems that have a file 
 <em>owner</em>, <em>group-owner</em>, and related <em>access
  permissions</em>. This file attribute view provides read and write access
  to these attributes. 
 <p> The <code>readAttributes</code> method is used to read the
  file's attributes. The file <code>owner</code> is
  represented by a <code>UserPrincipal</code> that is the identity of the file owner
  for the purposes of access control. The <code>group-owner</code>
 , represented by a <code>GroupPrincipal</code>, is the identity of the
  group owner, where a group is an identity created for administrative purposes
  so as to determine the access rights for the members of the group. 
 <p> The <code>permissions</code> attribute is a
  set of access permissions. This file attribute view provides access to the nine
  permission defined by the <code>PosixFilePermission</code> class.
  These nine permission bits determine the <em>read</em>, <em>write</em>, and 
 <em>execute</em> access for the file owner, group, and others (others
  meaning identities other than the owner and members of the group). Some
  operating systems and file systems may provide additional permission bits
  but access to these other bits is not defined by this class in this release. 
 <p> <b>Usage Example:</b>
  Suppose we need to print out the owner and access permissions of a file: 
 @code

      Path file = ...
      PosixFileAttributes attrs = Files.getFileAttributeView(file, PosixFileAttributeView.class)
          .readAttributes();
      System.out.format("%s %s%n",
          attrs.owner().getName(),
          PosixFilePermissions.toString(attrs.permissions())); 
  
@endcode
  
 <h2> Dynamic Access </h2>
  <p> Where dynamic access to file attributes is required, the attributes
  supported by this attribute view are as defined by <code>BasicFileAttributeView</code>
  and <code>FileOwnerAttributeView</code>, and in addition,
  the following attributes are supported: 
 <blockquote>
  <table class="striped">
  <caption style="display:none">Supported attributes</caption>
  <thead>
    <tr>
      <th scope="col"> Name </th>
      <th scope="col"> Type </th>
    </tr>
  </thead>
  <tbody>
   <tr>
      <th scope="row"> "permissions" </th>
      <td> <code>Set</code>&lt;<code>PosixFilePermission</code>&gt; </td>
    </tr>
    <tr>
      <th scope="row"> "group" </th>
      <td> <code>GroupPrincipal</code> </td>
    </tr>
  </tbody>
  </table>
  </blockquote>
  
 <p> The <code>getAttribute</code> method may be used to read
  any of these attributes, or any of the attributes defined by <code>BasicFileAttributeView</code>
  as if by invoking the <code>readAttributes()</code>
  method. 
 <p> The <code>setAttribute</code> method may be used to update
  the file's last modified time, last access time or create time attributes as
  defined by <code>BasicFileAttributeView</code>. It may also be used to update
  the permissions, owner, or group-owner as if by invoking the <code>setPermissions</code>
 , <code>setOwner</code>, and <code>setGroup</code>
  methods respectively. 
 <h2> Setting Initial Permissions </h2>
  <p> Implementations supporting this attribute view may also support setting
  the initial permissions when creating a file or directory. The
  initial permissions are provided to the <code>createFile</code>
  or <code>createDirectory</code> methods as a <code>FileAttribute</code>
  with <code>name</code> <code>"posix:permissions"</code>
  and a <code>value</code> that is the set of permissions. The
  following example uses the <code>asFileAttribute</code>
  method to construct a <code>FileAttribute</code> when creating a
  file: 
 @code

      Path path = ...
      Set&lt;PosixFilePermission&gt; perms =
          EnumSet.of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE, GROUP_READ);
      Files.createFile(path, PosixFilePermissions.asFileAttribute(perms)); 
  
@endcode
  
 <p> When the access permissions are set at file creation time then the actual
  value of the permissions may differ that the value of the attribute object.
  The reasons for this are implementation specific. On UNIX systems, for
  example, a process has a <em>umask</em> that impacts the permission bits
  of newly created files. Where an implementation supports the setting of
  the access permissions, and the underlying file system supports access
  permissions, then it is required that the value of the actual access
  permissions will be equal or less than the value of the attribute
  provided to the <code>createFile</code> or <code>createDirectory</code>
  methods. In other words, the file may
  be more secure than requested.
 @since 1.7
 */
@protocol JavaNioFileAttributePosixFileAttributeView < JavaNioFileAttributeBasicFileAttributeView, JavaNioFileAttributeFileOwnerAttributeView, JavaObject >

/*!
 @brief Returns the name of the attribute view.Attribute views of this type
  have the name <code>"posix"</code>.
 */
- (NSString *)name;

/*!
 @throw IOException
 @throw SecurityException
 In the case of the default provider, a security manager is
           installed, and it denies          
 <code>RuntimePermission</code><code>("accessUserInformation")</code>
           or its <code>checkRead</code> method
           denies read access to the file.
 */
- (id<JavaNioFileAttributePosixFileAttributes>)readAttributes;

/*!
 @brief Updates the file permissions.
 @param perms the new set of permissions
 @throw ClassCastException
 if the sets contains elements that are not of type <code>PosixFilePermission</code>
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, a security manager is
           installed, and it denies          
 <code>RuntimePermission</code><code>("accessUserInformation")</code>
           or its <code>checkWrite</code>
           method denies write access to the file.
 */
- (void)setPermissionsWithJavaUtilSet:(id<JavaUtilSet>)perms;

/*!
 @brief Updates the file group-owner.
 @param group the new file group-owner
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, it denies          
 <code>RuntimePermission</code><code>("accessUserInformation")</code>
           or its <code>checkWrite</code>
           method denies write access to the file.
 */
- (void)setGroupWithJavaNioFileAttributeGroupPrincipal:(id<JavaNioFileAttributeGroupPrincipal>)group;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileAttributePosixFileAttributeView)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileAttributePosixFileAttributeView)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileAttributePosixFileAttributeView")
