//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/attribute/PosixFilePermission.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileAttributePosixFilePermission")
#ifdef RESTRICT_JavaNioFileAttributePosixFilePermission
#define INCLUDE_ALL_JavaNioFileAttributePosixFilePermission 0
#else
#define INCLUDE_ALL_JavaNioFileAttributePosixFilePermission 1
#endif
#undef RESTRICT_JavaNioFileAttributePosixFilePermission

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileAttributePosixFilePermission_) && (INCLUDE_ALL_JavaNioFileAttributePosixFilePermission || defined(INCLUDE_JavaNioFileAttributePosixFilePermission))
#define JavaNioFileAttributePosixFilePermission_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(jint, JavaNioFileAttributePosixFilePermission_Enum) {
  JavaNioFileAttributePosixFilePermission_Enum_OWNER_READ = 0,
  JavaNioFileAttributePosixFilePermission_Enum_OWNER_WRITE = 1,
  JavaNioFileAttributePosixFilePermission_Enum_OWNER_EXECUTE = 2,
  JavaNioFileAttributePosixFilePermission_Enum_GROUP_READ = 3,
  JavaNioFileAttributePosixFilePermission_Enum_GROUP_WRITE = 4,
  JavaNioFileAttributePosixFilePermission_Enum_GROUP_EXECUTE = 5,
  JavaNioFileAttributePosixFilePermission_Enum_OTHERS_READ = 6,
  JavaNioFileAttributePosixFilePermission_Enum_OTHERS_WRITE = 7,
  JavaNioFileAttributePosixFilePermission_Enum_OTHERS_EXECUTE = 8,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define JavaNioFileAttributePosixFilePermission_ORDINAL jint
#else
#define JavaNioFileAttributePosixFilePermission_ORDINAL JavaNioFileAttributePosixFilePermission_Enum
#endif


/*!
 @brief Defines the bits for use with the <code>permissions</code>
  attribute.
 <p> The <code>PosixFilePermissions</code> class defines methods for manipulating
  set of permissions.
 @since 1.7
 */
@interface JavaNioFileAttributePosixFilePermission : JavaLangEnum

#pragma mark Public

+ (JavaNioFileAttributePosixFilePermission *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaNioFileAttributePosixFilePermission_Enum)toNSEnum;

- (JavaNioFileAttributePosixFilePermission_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(JavaNioFileAttributePosixFilePermission)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_values_[];

/*!
 @brief Read permission, owner.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OWNER_READ(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OWNER_READ)

/*!
 @brief Write permission, owner.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OWNER_WRITE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OWNER_WRITE)

/*!
 @brief Execute/search permission, owner.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OWNER_EXECUTE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OWNER_EXECUTE)

/*!
 @brief Read permission, group.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_GROUP_READ(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, GROUP_READ)

/*!
 @brief Write permission, group.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_GROUP_WRITE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, GROUP_WRITE)

/*!
 @brief Execute/search permission, group.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_GROUP_EXECUTE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, GROUP_EXECUTE)

/*!
 @brief Read permission, others.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OTHERS_READ(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OTHERS_READ)

/*!
 @brief Write permission, others.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OTHERS_WRITE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OTHERS_WRITE)

/*!
 @brief Execute/search permission, others.
 */
inline JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_get_OTHERS_EXECUTE(void);
J2OBJC_ENUM_CONSTANT(JavaNioFileAttributePosixFilePermission, OTHERS_EXECUTE)

FOUNDATION_EXPORT IOSObjectArray *JavaNioFileAttributePosixFilePermission_values(void);

FOUNDATION_EXPORT JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaNioFileAttributePosixFilePermission *JavaNioFileAttributePosixFilePermission_fromOrdinal(JavaNioFileAttributePosixFilePermission_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileAttributePosixFilePermission)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileAttributePosixFilePermission")
