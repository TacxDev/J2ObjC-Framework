//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/attribute/BasicFileAttributeView.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileAttributeBasicFileAttributeView")
#ifdef RESTRICT_JavaNioFileAttributeBasicFileAttributeView
#define INCLUDE_ALL_JavaNioFileAttributeBasicFileAttributeView 0
#else
#define INCLUDE_ALL_JavaNioFileAttributeBasicFileAttributeView 1
#endif
#undef RESTRICT_JavaNioFileAttributeBasicFileAttributeView

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileAttributeBasicFileAttributeView_) && (INCLUDE_ALL_JavaNioFileAttributeBasicFileAttributeView || defined(INCLUDE_JavaNioFileAttributeBasicFileAttributeView))
#define JavaNioFileAttributeBasicFileAttributeView_

#define RESTRICT_JavaNioFileAttributeFileAttributeView 1
#define INCLUDE_JavaNioFileAttributeFileAttributeView 1
#include "java/nio/file/attribute/FileAttributeView.h"

@class JavaNioFileAttributeFileTime;
@protocol JavaNioFileAttributeBasicFileAttributes;

/*!
 @brief A file attribute view that provides a view of a <em>basic set</em> of file
  attributes common to many file systems.The basic set of file attributes
  consist of <em>mandatory</em> and <em>optional</em> file attributes as
  defined by the <code>BasicFileAttributes</code> interface.
 <p> The file attributes are retrieved from the file system as a <em>bulk
  operation</em> by invoking the <code>readAttributes</code> method.
  This class also defines the <code>setTimes</code> method to update the
  file's time attributes. 
 <p> Where dynamic access to file attributes is required, the attributes
  supported by this attribute view have the following names and types: 
 <blockquote>
   <table class="striped">
   <caption style="display:none">Supported attributes</caption>
   <thead>
    <tr>
      <th scope="col"> Name </th>
      <th scope="col"> Type </th>
    </tr>
   </thead>
   <tbody>
   <tr>
      <th scope="row"> "lastModifiedTime" </th>
      <td> <code>FileTime</code> </td>
    </tr>
    <tr>
      <th scope="row"> "lastAccessTime" </th>
      <td> <code>FileTime</code> </td>
    </tr>
    <tr>
      <th scope="row"> "creationTime" </th>
      <td> <code>FileTime</code> </td>
    </tr>
    <tr>
      <th scope="row"> "size" </th>
      <td> <code>Long</code> </td>
    </tr>
    <tr>
      <th scope="row"> "isRegularFile" </th>
      <td> <code>Boolean</code> </td>
    </tr>
    <tr>
      <th scope="row"> "isDirectory" </th>
      <td> <code>Boolean</code> </td>
    </tr>
    <tr>
      <th scope="row"> "isSymbolicLink" </th>
      <td> <code>Boolean</code> </td>
    </tr>
    <tr>
      <th scope="row"> "isOther" </th>
      <td> <code>Boolean</code> </td>
    </tr>
    <tr>
      <th scope="row"> "fileKey" </th>
      <td> <code>Object</code> </td>
    </tr>
  </tbody>
  </table>
  </blockquote>
  
 <p> The <code>getAttribute</code> method may be
  used to read any of these attributes as if by invoking the <code>readAttributes()</code>
  method. 
 <p> The <code>setAttribute</code> method may be
  used to update the file's last modified time, last access time or create time
  attributes as if by invoking the <code>setTimes</code> method.
 @since 1.7
 */
@protocol JavaNioFileAttributeBasicFileAttributeView < JavaNioFileAttributeFileAttributeView, JavaObject >

/*!
 @brief Returns the name of the attribute view.Attribute views of this type
  have the name <code>"basic"</code>.
 */
- (NSString *)name;

/*!
 @brief Reads the basic file attributes as a bulk operation.
 <p> It is implementation specific if all file attributes are read as an
  atomic operation with respect to other file system operations.
 @return the file attributes
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, a security manager is
           installed, its <code>checkRead</code>
           method is invoked to check read access to the file
 */
- (id<JavaNioFileAttributeBasicFileAttributes>)readAttributes;

/*!
 @brief Updates any or all of the file's last modified time, last access time,
  and create time attributes.
 <p> This method updates the file's timestamp attributes. The values are
  converted to the epoch and precision supported by the file system.
  Converting from finer to coarser granularities result in precision loss.
  The behavior of this method when attempting to set a timestamp that is
  not supported or to a value that is outside the range supported by the
  underlying file store is not defined. It may or not fail by throwing an 
 <code>IOException</code>.
  
 <p> If any of the <code>lastModifiedTime</code>, <code>lastAccessTime</code>,
  or <code>createTime</code> parameters has the value <code>null</code> then the
  corresponding timestamp is not changed. An implementation may require to
  read the existing values of the file attributes when only some, but not
  all, of the timestamp attributes are updated. Consequently, this method
  may not be an atomic operation with respect to other file system
  operations. Reading and re-writing existing values may also result in
  precision loss. If all of the <code>lastModifiedTime</code>, <code>lastAccessTime</code>
  and <code>createTime</code> parameters are <code>null</code> then
  this method has no effect. 
 <p> <b>Usage Example:</b>
  Suppose we want to change a file's last access time. 
 @code

     Path path = ...
     FileTime time = ...
     Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null); 
  
@endcode
 @param lastModifiedTime the new last modified time, or 
 <code>null</code>  to not change the           value
 @param lastAccessTime the last access time, or 
 <code>null</code>  to not change the value
 @param createTime the file's create time, or 
 <code>null</code>  to not change the value
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, a security manager is
           installed, its  <code>checkWrite</code>
           method is invoked to check write access to the file
 - seealso: java.nio.file.Files#setLastModifiedTime
 */
- (void)setTimesWithJavaNioFileAttributeFileTime:(JavaNioFileAttributeFileTime *)lastModifiedTime
                withJavaNioFileAttributeFileTime:(JavaNioFileAttributeFileTime *)lastAccessTime
                withJavaNioFileAttributeFileTime:(JavaNioFileAttributeFileTime *)createTime;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileAttributeBasicFileAttributeView)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileAttributeBasicFileAttributeView)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileAttributeBasicFileAttributeView")
