//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/AtomicMoveNotSupportedException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileAtomicMoveNotSupportedException")
#ifdef RESTRICT_JavaNioFileAtomicMoveNotSupportedException
#define INCLUDE_ALL_JavaNioFileAtomicMoveNotSupportedException 0
#else
#define INCLUDE_ALL_JavaNioFileAtomicMoveNotSupportedException 1
#endif
#undef RESTRICT_JavaNioFileAtomicMoveNotSupportedException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileAtomicMoveNotSupportedException_) && (INCLUDE_ALL_JavaNioFileAtomicMoveNotSupportedException || defined(INCLUDE_JavaNioFileAtomicMoveNotSupportedException))
#define JavaNioFileAtomicMoveNotSupportedException_

#define RESTRICT_JavaNioFileFileSystemException 1
#define INCLUDE_JavaNioFileFileSystemException 1
#include "java/nio/file/FileSystemException.h"

@class JavaLangLong;

/*!
 @brief Checked exception thrown when a file cannot be moved as an atomic file system
  operation.
 @since 1.7
 */
@interface JavaNioFileAtomicMoveNotSupportedException : JavaNioFileFileSystemException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.
 @param source a string identifying the source file or 
 <code>null</code>  if not known
 @param target a string identifying the target file or 
 <code>null</code>  if not known
 @param reason a reason message with additional information or 
 <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)source
                              withNSString:(NSString *)target
                              withNSString:(NSString *)reason;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileAtomicMoveNotSupportedException)

inline jlong JavaNioFileAtomicMoveNotSupportedException_get_serialVersionUID(void);
#define JavaNioFileAtomicMoveNotSupportedException_serialVersionUID 5402760225333135579LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioFileAtomicMoveNotSupportedException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaNioFileAtomicMoveNotSupportedException_initWithNSString_withNSString_withNSString_(JavaNioFileAtomicMoveNotSupportedException *self, NSString *source, NSString *target, NSString *reason);

FOUNDATION_EXPORT JavaNioFileAtomicMoveNotSupportedException *new_JavaNioFileAtomicMoveNotSupportedException_initWithNSString_withNSString_withNSString_(NSString *source, NSString *target, NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileAtomicMoveNotSupportedException *create_JavaNioFileAtomicMoveNotSupportedException_initWithNSString_withNSString_withNSString_(NSString *source, NSString *target, NSString *reason);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileAtomicMoveNotSupportedException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileAtomicMoveNotSupportedException")
