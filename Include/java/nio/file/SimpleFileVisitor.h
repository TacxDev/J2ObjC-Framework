//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/SimpleFileVisitor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileSimpleFileVisitor")
#ifdef RESTRICT_JavaNioFileSimpleFileVisitor
#define INCLUDE_ALL_JavaNioFileSimpleFileVisitor 0
#else
#define INCLUDE_ALL_JavaNioFileSimpleFileVisitor 1
#endif
#undef RESTRICT_JavaNioFileSimpleFileVisitor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileSimpleFileVisitor_) && (INCLUDE_ALL_JavaNioFileSimpleFileVisitor || defined(INCLUDE_JavaNioFileSimpleFileVisitor))
#define JavaNioFileSimpleFileVisitor_

#define RESTRICT_JavaNioFileFileVisitor 1
#define INCLUDE_JavaNioFileFileVisitor 1
#include "java/nio/file/FileVisitor.h"

@class JavaIoIOException;
@class JavaNioFileFileVisitResult;
@protocol JavaNioFileAttributeBasicFileAttributes;

/*!
 @brief A simple visitor of files with default behavior to visit all files and to
  re-throw I/O errors.
 <p> Methods in this class may be overridden subject to their general contract.
 @since 1.7
 */
@interface JavaNioFileSimpleFileVisitor : NSObject < JavaNioFileFileVisitor >

#pragma mark Public

/*!
 @brief Invoked for a directory after entries in the directory, and all of their
  descendants, have been visited.
 <p> Unless overridden, this method returns <code>CONTINUE</code>
  if the directory iteration completes without an I/O exception;
  otherwise this method re-throws the I/O exception that caused the iteration
  of the directory to terminate prematurely.
 */
- (JavaNioFileFileVisitResult *)postVisitDirectoryWithId:(id)dir
                                   withJavaIoIOException:(JavaIoIOException *)exc;

/*!
 @brief Invoked for a directory before entries in the directory are visited.
 <p> Unless overridden, this method returns <code>CONTINUE</code>
 .
 */
- (JavaNioFileFileVisitResult *)preVisitDirectoryWithId:(id)dir
            withJavaNioFileAttributeBasicFileAttributes:(id<JavaNioFileAttributeBasicFileAttributes>)attrs;

/*!
 @brief Invoked for a file in a directory.
 <p> Unless overridden, this method returns <code>CONTINUE</code>
 .
 */
- (JavaNioFileFileVisitResult *)visitFileWithId:(id)file
    withJavaNioFileAttributeBasicFileAttributes:(id<JavaNioFileAttributeBasicFileAttributes>)attrs;

/*!
 @brief Invoked for a file that could not be visited.
 <p> Unless overridden, this method re-throws the I/O exception that prevented
  the file from being visited.
 */
- (JavaNioFileFileVisitResult *)visitFileFailedWithId:(id)file
                                withJavaIoIOException:(JavaIoIOException *)exc;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileSimpleFileVisitor)

FOUNDATION_EXPORT void JavaNioFileSimpleFileVisitor_init(JavaNioFileSimpleFileVisitor *self);

FOUNDATION_EXPORT JavaNioFileSimpleFileVisitor *new_JavaNioFileSimpleFileVisitor_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileSimpleFileVisitor *create_JavaNioFileSimpleFileVisitor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileSimpleFileVisitor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileSimpleFileVisitor")
