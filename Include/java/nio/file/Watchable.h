//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/Watchable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileWatchable")
#ifdef RESTRICT_JavaNioFileWatchable
#define INCLUDE_ALL_JavaNioFileWatchable 0
#else
#define INCLUDE_ALL_JavaNioFileWatchable 1
#endif
#undef RESTRICT_JavaNioFileWatchable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileWatchable_) && (INCLUDE_ALL_JavaNioFileWatchable || defined(INCLUDE_JavaNioFileWatchable))
#define JavaNioFileWatchable_

@class IOSObjectArray;
@protocol JavaNioFileWatchKey;
@protocol JavaNioFileWatchService;

/*!
 @brief An object that may be registered with a watch service so that it can be 
 <em>watched</em> for changes and events.
 <p> This interface defines the <code>register</code> method to register
  the object with a <code>WatchService</code> returning a <code>WatchKey</code> to
  represent the registration. An object may be registered with more than one
  watch service. Registration with a watch service is cancelled by invoking the
  key's <code>cancel</code> method.
 @since 1.7
 - seealso: Path#register
 */
@protocol JavaNioFileWatchable < JavaObject >

/*!
 @brief Registers an object with a watch service.
 <p> If the file system object identified by this object is currently
  registered with the watch service then the watch key, representing that
  registration, is returned after changing the event set or modifiers to
  those specified by the <code>events</code> and <code>modifiers</code> parameters.
  Changing the event set does not cause pending events for the object to be
  discarded. Objects are automatically registered for the <code>OVERFLOW</code>
  event. This event is not
  required to be present in the array of events. 
 <p> Otherwise the file system object has not yet been registered with the
  given watch service, so it is registered and the resulting new key is
  returned. 
 <p> Implementations of this interface should specify the events they
  support.
 @param watcher the watch service to which this object is to be registered
 @param events the events for which this object should be registered
 @param modifiers the modifiers, if any, that modify how the object is registered
 @return a key representing the registration of this object with the
           given watch service
 @throw UnsupportedOperationException
 if unsupported events or modifiers are specified
 @throw IllegalArgumentException
 if an invalid of combination of events are modifiers are specified
 @throw ClosedWatchServiceException
 if the watch service is closed
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 if a security manager is installed and it denies an unspecified
           permission required to monitor this object. Implementations of
           this interface should specify the permission checks.
 */
- (id<JavaNioFileWatchKey>)register__WithJavaNioFileWatchService:(id<JavaNioFileWatchService>)watcher
                             withJavaNioFileWatchEvent_KindArray:(IOSObjectArray *)events
                         withJavaNioFileWatchEvent_ModifierArray:(IOSObjectArray *)modifiers;

/*!
 @brief Registers an object with a watch service.
 <p> An invocation of this method behaves in exactly the same way as the invocation 
 @code

      watchable.<code>register</code>(watcher, events, new WatchEvent.Modifier[0]); 
  
@endcode
 @param watcher the watch service to which this object is to be registered
 @param events the events for which this object should be registered
 @return a key representing the registration of this object with the
           given watch service
 @throw UnsupportedOperationException
 if unsupported events are specified
 @throw IllegalArgumentException
 if an invalid of combination of events are specified
 @throw ClosedWatchServiceException
 if the watch service is closed
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 if a security manager is installed and it denies an unspecified
           permission required to monitor this object. Implementations of
           this interface should specify the permission checks.
 */
- (id<JavaNioFileWatchKey>)register__WithJavaNioFileWatchService:(id<JavaNioFileWatchService>)watcher
                             withJavaNioFileWatchEvent_KindArray:(IOSObjectArray *)events;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileWatchable)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileWatchable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileWatchable")
