//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/FileStore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileFileStore")
#ifdef RESTRICT_JavaNioFileFileStore
#define INCLUDE_ALL_JavaNioFileFileStore 0
#else
#define INCLUDE_ALL_JavaNioFileFileStore 1
#endif
#undef RESTRICT_JavaNioFileFileStore

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileFileStore_) && (INCLUDE_ALL_JavaNioFileFileStore || defined(INCLUDE_JavaNioFileFileStore))
#define JavaNioFileFileStore_

@class IOSClass;
@class JavaLangBoolean;
@class JavaLangLong;
@protocol JavaNioFileAttributeFileStoreAttributeView;

/*!
 @brief Storage for files.A <code>FileStore</code> represents a storage pool, device,
  partition, volume, concrete file system or other implementation specific means
  of file storage.
 The <code>FileStore</code> for where a file is stored is obtained
  by invoking the <code>getFileStore</code> method, or all file
  stores can be enumerated by invoking the <code>getFileStores</code>
  method. 
 <p> In addition to the methods defined by this class, a file store may support
  one or more <code>FileStoreAttributeView</code> classes
  that provide a read-only or updatable view of a set of file store attributes.
 @since 1.7
 */
@interface JavaNioFileFileStore : NSObject

#pragma mark Public

/*!
 @brief Reads the value of a file store attribute.
 <p> The <code>attribute</code> parameter identifies the attribute to be read
  and takes the form: 
 <blockquote>
  <i>view-name</i><b>:</b><i>attribute-name</i>
  </blockquote>
  where the character <code>':'</code> stands for itself. 
 <p> <i>view-name</i> is the <code>name</code> of
  a <code>AttributeView</code> that identifies a set of file attributes. 
 <i>attribute-name</i> is the name of the attribute. 
 <p> <b>Usage Example:</b>
  Suppose we want to know if ZFS compression is enabled (assuming the "zfs"
  view is supported): 
 @code

     boolean compression = (Boolean)fs.getAttribute("zfs:compression"); 
  
@endcode
 @param attribute the attribute to read
 @return the attribute value; <code>null</code> may be valid for some
           attributes
 @throw UnsupportedOperationException
 if the attribute view is not available or it does not support
           reading the attribute
 @throw IOException
 if an I/O error occurs
 */
- (id)getAttributeWithNSString:(NSString *)attribute;

/*!
 @brief Returns the number of bytes per block in this file store.
 <p> File storage is typically organized into discrete sequences of bytes
  called <i>blocks</i>. A block is the smallest storage unit of a file store.
  Every read and write operation is performed on a multiple of blocks.
 @return a positive value representing the block size of this file store,
           in bytes
 @throw IOException
 if an I/O error occurs
 @throw UnsupportedOperationException
 if the operation is not supported
 @since 10
 */
- (jlong)getBlockSize;

/*!
 @brief Returns a <code>FileStoreAttributeView</code> of the given type.
 <p> This method is intended to be used where the file store attribute
  view defines type-safe methods to read or update the file store attributes.
  The <code>type</code> parameter is the type of the attribute view required and
  the method returns an instance of that type if supported.
 @param type the 
 <code>Class</code>  object corresponding to the attribute view
 @return a file store attribute view of the specified type or
           <code>null</code> if the attribute view is not available
 */
- (id<JavaNioFileAttributeFileStoreAttributeView>)getFileStoreAttributeViewWithIOSClass:(IOSClass *)type;

/*!
 @brief Returns the size, in bytes, of the file store.
 @return the size of the file store, in bytes
 @throw IOException
 if an I/O error occurs
 */
- (jlong)getTotalSpace;

/*!
 @brief Returns the number of unallocated bytes in the file store.
 <p> The returned number of unallocated bytes is a hint, but not a
  guarantee, that it is possible to use most or any of these bytes.  The
  number of unallocated bytes is most likely to be accurate immediately
  after the space attributes are obtained. It is likely to be
  made inaccurate by any external I/O operations including those made on
  the system outside of this virtual machine.
 @return the number of unallocated bytes
 @throw IOException
 if an I/O error occurs
 */
- (jlong)getUnallocatedSpace;

/*!
 @brief Returns the number of bytes available to this Java virtual machine on the
  file store.
 <p> The returned number of available bytes is a hint, but not a
  guarantee, that it is possible to use most or any of these bytes.  The
  number of usable bytes is most likely to be accurate immediately
  after the space attributes are obtained. It is likely to be made inaccurate
  by any external I/O operations including those made on the system outside
  of this Java virtual machine.
 @return the number of bytes available
 @throw IOException
 if an I/O error occurs
 */
- (jlong)getUsableSpace;

/*!
 @brief Tells whether this file store is read-only.A file store is read-only if
  it does not support write operations or other changes to files.
 Any
  attempt to create a file, open an existing file for writing etc. causes an 
 <code>IOException</code> to be thrown.
 @return <code>true</code> if, and only if, this file store is read-only
 */
- (jboolean)isReadOnly;

/*!
 @brief Returns the name of this file store.The format of the name is highly
  implementation specific.
 It will typically be the name of the storage
  pool or volume. 
 <p> The string returned by this method may differ from the string
  returned by the <code>toString</code> method.
 @return the name of this file store
 */
- (NSString *)name;

/*!
 @brief Tells whether or not this file store supports the file attributes
  identified by the given file attribute view.
 <p> Invoking this method to test if the file store supports <code>BasicFileAttributeView</code>
  will always return <code>true</code>. In the case of
  the default provider, this method cannot guarantee to give the correct
  result when the file store is not a local storage device. The reasons for
  this are implementation specific and therefore unspecified.
 @param type the file attribute view type
 @return <code>true</code> if, and only if, the file attribute view is
           supported
 */
- (jboolean)supportsFileAttributeViewWithIOSClass:(IOSClass *)type;

/*!
 @brief Tells whether or not this file store supports the file attributes
  identified by the given file attribute view.
 <p> Invoking this method to test if the file store supports <code>BasicFileAttributeView</code>
 , identified by the name "<code>basic</code>" will
  always return <code>true</code>. In the case of the default provider, this
  method cannot guarantee to give the correct result when the file store is
  not a local storage device. The reasons for this are implementation
  specific and therefore unspecified.
 @param name the 
 <code>name</code>  of file attribute view
 @return <code>true</code> if, and only if, the file attribute view is
           supported
 */
- (jboolean)supportsFileAttributeViewWithNSString:(NSString *)name;

/*!
 @brief Returns the <em>type</em> of this file store.The format of the string
  returned by this method is highly implementation specific.
 It may
  indicate, for example, the format used or if the file store is local
  or remote.
 @return a string representing the type of this file store
 */
- (NSString *)type;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileFileStore)

FOUNDATION_EXPORT void JavaNioFileFileStore_init(JavaNioFileFileStore *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileFileStore)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileFileStore")
