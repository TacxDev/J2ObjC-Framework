//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/FileSystemException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileFileSystemException")
#ifdef RESTRICT_JavaNioFileFileSystemException
#define INCLUDE_ALL_JavaNioFileFileSystemException 0
#else
#define INCLUDE_ALL_JavaNioFileFileSystemException 1
#endif
#undef RESTRICT_JavaNioFileFileSystemException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileFileSystemException_) && (INCLUDE_ALL_JavaNioFileFileSystemException || defined(INCLUDE_JavaNioFileFileSystemException))
#define JavaNioFileFileSystemException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@class JavaLangLong;
@class JavaLangThrowable;

/*!
 @brief Thrown when a file system operation fails on one or two files.This class is
  the general class for file system exceptions.
 @since 1.7
 */
@interface JavaNioFileFileSystemException : JavaIoIOException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.This constructor should be used
  when an operation involving one file fails and there isn't any additional
  information to explain the reason.
 @param file a string identifying the file or 
 <code>null</code>  if not known.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)file;

/*!
 @brief Constructs an instance of this class.This constructor should be used
  when an operation involving two files fails, or there is additional
  information to explain the reason.
 @param file a string identifying the file or 
 <code>null</code>  if not known.
 @param other a string identifying the other file or 
 <code>null</code>  if there           isn't another file or if not known
 @param reason a reason message with additional information or 
 <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)file
                              withNSString:(NSString *)other
                              withNSString:(NSString *)reason;

/*!
 @brief Returns the file used to create this exception.
 @return the file (can be <code>null</code>)
 */
- (NSString *)getFile;

/*!
 @brief Returns the detail message string.
 */
- (NSString *)getMessage;

/*!
 @brief Returns the other file used to create this exception.
 @return the other file (can be <code>null</code>)
 */
- (NSString *)getOtherFile;

/*!
 @brief Returns the string explaining why the file system operation failed.
 @return the string explaining why the file system operation failed
 */
- (NSString *)getReason;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileFileSystemException)

inline jlong JavaNioFileFileSystemException_get_serialVersionUID(void);
#define JavaNioFileFileSystemException_serialVersionUID -3055425747967319812LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioFileFileSystemException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaNioFileFileSystemException_initWithNSString_(JavaNioFileFileSystemException *self, NSString *file);

FOUNDATION_EXPORT JavaNioFileFileSystemException *new_JavaNioFileFileSystemException_initWithNSString_(NSString *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileFileSystemException *create_JavaNioFileFileSystemException_initWithNSString_(NSString *file);

FOUNDATION_EXPORT void JavaNioFileFileSystemException_initWithNSString_withNSString_withNSString_(JavaNioFileFileSystemException *self, NSString *file, NSString *other, NSString *reason);

FOUNDATION_EXPORT JavaNioFileFileSystemException *new_JavaNioFileFileSystemException_initWithNSString_withNSString_withNSString_(NSString *file, NSString *other, NSString *reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileFileSystemException *create_JavaNioFileFileSystemException_initWithNSString_withNSString_withNSString_(NSString *file, NSString *other, NSString *reason);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileFileSystemException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileFileSystemException")
