//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/FileVisitor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileFileVisitor")
#ifdef RESTRICT_JavaNioFileFileVisitor
#define INCLUDE_ALL_JavaNioFileFileVisitor 0
#else
#define INCLUDE_ALL_JavaNioFileFileVisitor 1
#endif
#undef RESTRICT_JavaNioFileFileVisitor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileFileVisitor_) && (INCLUDE_ALL_JavaNioFileFileVisitor || defined(INCLUDE_JavaNioFileFileVisitor))
#define JavaNioFileFileVisitor_

@class JavaIoIOException;
@class JavaNioFileFileVisitResult;
@protocol JavaNioFileAttributeBasicFileAttributes;

/*!
 @brief A visitor of files.An implementation of this interface is provided to the 
 <code>Files.walkFileTree</code> methods to visit each file in
  a file tree.
 <p> <b>Usage Examples:</b>
  Suppose we want to delete a file tree. In that case, each directory should
  be deleted after the entries in the directory are deleted. 
 @code

      Path start = ...
      Files.walkFileTree(start, new SimpleFileVisitor&lt;Path&gt;() {
                  &#64;Override
          public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
              throws IOException
          {
              Files.delete(file);
              return FileVisitResult.CONTINUE;
          }         
         &#64;Override
          public FileVisitResult postVisitDirectory(Path dir, IOException e)
              throws IOException
          {
              if (e == null) {
                  Files.delete(dir);
                  return FileVisitResult.CONTINUE;
              } else {
                  // directory iteration failed
                  throw e;
              }            }
      }); 
  
@endcode
  <p> Furthermore, suppose we want to copy a file tree to a target location.
  In that case, symbolic links should be followed and the target directory
  should be created before the entries in the directory are copied. 
 @code

      final Path source = ...
      final Path target = ...
      Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,
          new SimpleFileVisitor&lt;Path&gt;() {
                          &#64;Override
              public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                  throws IOException
              {
                  Path targetdir = target.resolve(source.relativize(dir));
                  try {
                      Files.copy(dir, targetdir);
                  } catch (FileAlreadyExistsException e) {
                       if (!Files.isDirectory(targetdir))
                           throw e;
                  }
                  return CONTINUE;
              }             
             &#64;Override
              public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                  throws IOException
              {
                  Files.copy(file, target.resolve(source.relativize(file)));
                  return CONTINUE;
              }
          }); 
  
@endcode
 @since 1.7
 */
@protocol JavaNioFileFileVisitor < JavaObject >

/*!
 @brief Invoked for a directory before entries in the directory are visited.
 <p> If this method returns <code>CONTINUE</code>,
  then entries in the directory are visited. If this method returns <code>SKIP_SUBTREE</code>
  or <code>SKIP_SIBLINGS</code>
  then entries in the
  directory (and any descendants) will not be visited.
 @param dir a reference to the directory
 @param attrs the directory's basic attributes
 @return the visit result
 @throw IOException
 if an I/O error occurs
 */
- (JavaNioFileFileVisitResult *)preVisitDirectoryWithId:(id)dir
            withJavaNioFileAttributeBasicFileAttributes:(id<JavaNioFileAttributeBasicFileAttributes>)attrs;

/*!
 @brief Invoked for a file in a directory.
 @param file a reference to the file
 @param attrs the file's basic attributes
 @return the visit result
 @throw IOException
 if an I/O error occurs
 */
- (JavaNioFileFileVisitResult *)visitFileWithId:(id)file
    withJavaNioFileAttributeBasicFileAttributes:(id<JavaNioFileAttributeBasicFileAttributes>)attrs;

/*!
 @brief Invoked for a file that could not be visited.This method is invoked
  if the file's attributes could not be read, the file is a directory
  that could not be opened, and other reasons.
 @param file a reference to the file
 @param exc the I/O exception that prevented the file from being visited
 @return the visit result
 @throw IOException
 if an I/O error occurs
 */
- (JavaNioFileFileVisitResult *)visitFileFailedWithId:(id)file
                                withJavaIoIOException:(JavaIoIOException *)exc;

/*!
 @brief Invoked for a directory after entries in the directory, and all of their
  descendants, have been visited.This method is also invoked when iteration
  of the directory completes prematurely (by a <code>visitFile</code>
  method returning <code>SKIP_SIBLINGS</code>,
  or an I/O error when iterating over the directory).
 @param dir a reference to the directory
 @param exc<code>null</code>
   if the iteration of the directory completes without           an error; otherwise the I/O exception that caused the iteration
            of the directory to complete prematurely
 @return the visit result
 @throw IOException
 if an I/O error occurs
 */
- (JavaNioFileFileVisitResult *)postVisitDirectoryWithId:(id)dir
                                   withJavaIoIOException:(JavaIoIOException *)exc;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileFileVisitor)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileFileVisitor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileFileVisitor")
