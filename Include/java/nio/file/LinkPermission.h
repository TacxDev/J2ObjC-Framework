//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/LinkPermission.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileLinkPermission")
#ifdef RESTRICT_JavaNioFileLinkPermission
#define INCLUDE_ALL_JavaNioFileLinkPermission 0
#else
#define INCLUDE_ALL_JavaNioFileLinkPermission 1
#endif
#undef RESTRICT_JavaNioFileLinkPermission

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileLinkPermission_) && (INCLUDE_ALL_JavaNioFileLinkPermission || defined(INCLUDE_JavaNioFileLinkPermission))
#define JavaNioFileLinkPermission_

#define RESTRICT_JavaSecurityBasicPermission 1
#define INCLUDE_JavaSecurityBasicPermission 1
#include "java/security/BasicPermission.h"

@class JavaLangLong;

/*!
 @brief The <code>Permission</code> class for link creation operations.
 <p> The following table provides a summary description of what the permission
  allows, and discusses the risks of granting code the permission. 
 <table class="striped">
  <caption style="display:none">Table shows permission target name, what the permission allows, and associated risks</caption>
  <thead>
  <tr>
  <th scope="col">Permission Target Name</th>
  <th scope="col">What the Permission Allows</th>
  <th scope="col">Risks of Allowing this Permission</th>
  </tr>
  </thead>
  <tbody>
  <tr>
    <th scope="row">hard</th>
    <td> Ability to add an existing file to a directory. This is sometimes
    known as creating a link, or hard link. </td>
    <td> Extreme care should be taken when granting this permission. It allows
    linking to any file or directory in the file system thus allowing the
    attacker access to all files. </td>
  </tr>
  <tr>
    <th scope="row">symbolic</th>
    <td> Ability to create symbolic links. </td>
    <td> Extreme care should be taken when granting this permission. It allows
    linking to any file or directory in the file system thus allowing the
    attacker to access to all files. </td>
  </tr>
  </tbody>
  </table>
 @since 1.7
 - seealso: Files#createLink
 - seealso: Files#createSymbolicLink
 */
@interface JavaNioFileLinkPermission : JavaSecurityBasicPermission

#pragma mark Public

/*!
 @brief Constructs a <code>LinkPermission</code> with the specified name.
 @param name the name of the permission. It must be "hard" or "symbolic".
 @throw IllegalArgumentException
 if name is empty or invalid
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Constructs a <code>LinkPermission</code> with the specified name.
 @param name the name of the permission; must be "hard" or "symbolic".
 @param actions the actions for the permission; must be the empty string or
            <code>null</code>
 @throw IllegalArgumentException
 if name is empty or invalid, or actions is a non-empty string
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)actions;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileLinkPermission)

inline jlong JavaNioFileLinkPermission_get_serialVersionUID(void);
#define JavaNioFileLinkPermission_serialVersionUID -1441492453772213220LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaNioFileLinkPermission, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaNioFileLinkPermission_initWithNSString_(JavaNioFileLinkPermission *self, NSString *name);

FOUNDATION_EXPORT JavaNioFileLinkPermission *new_JavaNioFileLinkPermission_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileLinkPermission *create_JavaNioFileLinkPermission_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void JavaNioFileLinkPermission_initWithNSString_withNSString_(JavaNioFileLinkPermission *self, NSString *name, NSString *actions);

FOUNDATION_EXPORT JavaNioFileLinkPermission *new_JavaNioFileLinkPermission_initWithNSString_withNSString_(NSString *name, NSString *actions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileLinkPermission *create_JavaNioFileLinkPermission_initWithNSString_withNSString_(NSString *name, NSString *actions);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileLinkPermission)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileLinkPermission")
