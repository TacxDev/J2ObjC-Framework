//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/DirectoryIteratorException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileDirectoryIteratorException")
#ifdef RESTRICT_JavaNioFileDirectoryIteratorException
#define INCLUDE_ALL_JavaNioFileDirectoryIteratorException 0
#else
#define INCLUDE_ALL_JavaNioFileDirectoryIteratorException 1
#endif
#undef RESTRICT_JavaNioFileDirectoryIteratorException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileDirectoryIteratorException_) && (INCLUDE_ALL_JavaNioFileDirectoryIteratorException || defined(INCLUDE_JavaNioFileDirectoryIteratorException))
#define JavaNioFileDirectoryIteratorException_

#define RESTRICT_JavaUtilConcurrentModificationException 1
#define INCLUDE_JavaUtilConcurrentModificationException 1
#include "java/util/ConcurrentModificationException.h"

@class JavaIoIOException;
@class JavaLangThrowable;

/*!
 @brief Runtime exception thrown if an I/O error is encountered when iterating over
  the entries in a directory.The I/O error is retrieved as an <code>IOException</code>
  using the <code>getCause()</code> method.
 @since 1.7
 - seealso: DirectoryStream
 */
@interface JavaNioFileDirectoryIteratorException : JavaUtilConcurrentModificationException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.
 @param cause the 
 <code>IOException</code>  that caused the directory iteration           to fail
 @throw NullPointerException
 if the cause is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaIoIOException:(JavaIoIOException *)cause;

/*!
 @brief Returns the cause of this exception.
 @return the cause
 */
- (JavaIoIOException *)getCause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaNioFileDirectoryIteratorException)

FOUNDATION_EXPORT void JavaNioFileDirectoryIteratorException_initWithJavaIoIOException_(JavaNioFileDirectoryIteratorException *self, JavaIoIOException *cause);

FOUNDATION_EXPORT JavaNioFileDirectoryIteratorException *new_JavaNioFileDirectoryIteratorException_initWithJavaIoIOException_(JavaIoIOException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNioFileDirectoryIteratorException *create_JavaNioFileDirectoryIteratorException_initWithJavaIoIOException_(JavaIoIOException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileDirectoryIteratorException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileDirectoryIteratorException")
