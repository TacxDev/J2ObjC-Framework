//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/file/SecureDirectoryStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioFileSecureDirectoryStream")
#ifdef RESTRICT_JavaNioFileSecureDirectoryStream
#define INCLUDE_ALL_JavaNioFileSecureDirectoryStream 0
#else
#define INCLUDE_ALL_JavaNioFileSecureDirectoryStream 1
#endif
#undef RESTRICT_JavaNioFileSecureDirectoryStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioFileSecureDirectoryStream_) && (INCLUDE_ALL_JavaNioFileSecureDirectoryStream || defined(INCLUDE_JavaNioFileSecureDirectoryStream))
#define JavaNioFileSecureDirectoryStream_

#define RESTRICT_JavaNioFileDirectoryStream 1
#define INCLUDE_JavaNioFileDirectoryStream 1
#include "java/nio/file/DirectoryStream.h"

@class IOSClass;
@class IOSObjectArray;
@protocol JavaNioChannelsSeekableByteChannel;
@protocol JavaNioFileAttributeFileAttributeView;
@protocol JavaUtilSet;

/*!
 @brief A <code>DirectoryStream</code> that defines operations on files that are located
  relative to an open directory.A <code>SecureDirectoryStream</code> is intended
  for use by sophisticated or security sensitive applications requiring to
  traverse file trees or otherwise operate on directories in a race-free manner.
 Race conditions can arise when a sequence of file operations cannot be
  carried out in isolation. Each of the file operations defined by this
  interface specify a relative path. All access to the file is relative
  to the open directory irrespective of if the directory is moved or replaced
  by an attacker while the directory is open. A <code>SecureDirectoryStream</code>
  may also be used as a virtual <em>working directory</em>.
  
 <p> A <code>SecureDirectoryStream</code> requires corresponding support from the
  underlying operating system. Where an implementation supports this features
  then the <code>DirectoryStream</code> returned by the <code>newDirectoryStream</code>
  method will be a <code>SecureDirectoryStream</code> and must
  be cast to that type in order to invoke the methods defined by this interface. 
 <p> In the case of the default <code>provider</code>
 , and a security manager is set, then the permission checks are
  performed using the path obtained by resolving the given relative path
  against the <i>original path</i> of the directory (irrespective of if the
  directory is moved since it was opened).
 @since 1.7
 */
@protocol JavaNioFileSecureDirectoryStream < JavaNioFileDirectoryStream, JavaObject >

/*!
 @brief Opens the directory identified by the given path, returning a <code>SecureDirectoryStream</code>
  to iterate over the entries in the directory.
 <p> This method works in exactly the manner specified by the <code>newDirectoryStream</code>
  method for the case that the 
 <code>path</code> parameter is an <code>absolute</code> path.
  When the parameter is a relative path then the directory to open is
  relative to this open directory. The <code>NOFOLLOW_LINKS</code>
  option may be used to
  ensure that this method fails if the file is a symbolic link. 
 <p> The new directory stream, once created, is not dependent upon the
  directory stream used to create it. Closing this directory stream has no
  effect upon newly created directory stream.
 @param path the path to the directory to open
 @param options options indicating how symbolic links are handled
 @return a new and open <code>SecureDirectoryStream</code> object
 @throw ClosedDirectoryStreamException
 if the directory stream is closed
 @throw NotDirectoryException
 if the file could not otherwise be opened because it is not
           a directory <i>(optional specific exception)</i>
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, the <code>checkRead</code>
           method is invoked to check read access to the directory.
 */
- (id<JavaNioFileSecureDirectoryStream>)newDirectoryStreamWithId:(id)path
                                  withJavaNioFileLinkOptionArray:(IOSObjectArray *)options OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Opens or creates a file in this directory, returning a seekable byte
  channel to access the file.
 <p> This method works in exactly the manner specified by the <code>Files.newByteChannel</code>
  method for the
  case that the <code>path</code> parameter is an <code>absolute</code>
  path. When the parameter is a relative path then the file to open or
  create is relative to this open directory. In addition to the options
  defined by the <code>Files.newByteChannel</code> method, the <code>NOFOLLOW_LINKS</code>
  option may be used to
  ensure that this method fails if the file is a symbolic link. 
 <p> The channel, once created, is not dependent upon the directory stream
  used to create it. Closing this directory stream has no effect upon the
  channel.
 @param path the path of the file to open or create
 @param options options specifying how the file is opened
 @param attrs an optional list of attributes to set atomically when creating
            the file
 @return the seekable byte channel
 @throw ClosedDirectoryStreamException
 if the directory stream is closed
 @throw IllegalArgumentException
 if the set contains an invalid combination of options
 @throw UnsupportedOperationException
 if an unsupported open option is specified or the array contains
           attributes that cannot be set atomically when creating the file
 @throw FileAlreadyExistsException
 if a file of that name already exists and the <code>CREATE_NEW</code>
  option is specified
           <i>(optional specific exception)</i>
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, the <code>checkRead</code>
           method is invoked to check read access to the path if the file
           is opened for reading. The <code>checkWrite</code>
  method is invoked to check write access to the path
           if the file is opened for writing.
 */
- (id<JavaNioChannelsSeekableByteChannel>)newByteChannelWithId:(id)path
                                               withJavaUtilSet:(id<JavaUtilSet>)options
                    withJavaNioFileAttributeFileAttributeArray:(IOSObjectArray *)attrs OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Deletes a file.
 <p> Unlike the <code>delete()</code> method, this method does
  not first examine the file to determine if the file is a directory.
  Whether a directory is deleted by this method is system dependent and
  therefore not specified. If the file is a symbolic link, then the link
  itself, not the final target of the link, is deleted. When the
  parameter is a relative path then the file to delete is relative to
  this open directory.
 @param path the path of the file to delete
 @throw ClosedDirectoryStreamException
 if the directory stream is closed
 @throw NoSuchFileException
 if the file does not exist <i>(optional specific exception)</i>
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, the <code>checkDelete</code>
           method is invoked to check delete access to the file
 */
- (void)deleteFileWithId:(id)path;

/*!
 @brief Deletes a directory.
 <p> Unlike the <code>delete()</code> method, this method
  does not first examine the file to determine if the file is a directory.
  Whether non-directories are deleted by this method is system dependent and
  therefore not specified. When the parameter is a relative path then the
  directory to delete is relative to this open directory.
 @param path the path of the directory to delete
 @throw ClosedDirectoryStreamException
 if the directory stream is closed
 @throw NoSuchFileException
 if the directory does not exist <i>(optional specific exception)</i>
 @throw DirectoryNotEmptyException
 if the directory could not otherwise be deleted because it is
           not empty <i>(optional specific exception)</i>
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, the <code>checkDelete</code>
           method is invoked to check delete access to the directory
 */
- (void)deleteDirectoryWithId:(id)path;

/*!
 @brief Move a file from this directory to another directory.
 <p> This method works in a similar manner to <code>move</code>
  method when the <code>ATOMIC_MOVE</code> option
  is specified. That is, this method moves a file as an atomic file system
  operation. If the <code>srcpath</code> parameter is an <code>absolute</code>
  path then it locates the source file. If the parameter is a
  relative path then it is located relative to this open directory. If
  the <code>targetpath</code> parameter is absolute then it locates the target
  file (the <code>targetdir</code> parameter is ignored). If the parameter is
  a relative path it is located relative to the open directory identified
  by the <code>targetdir</code> parameter. In all cases, if the target file
  exists then it is implementation specific if it is replaced or this
  method fails.
 @param srcpath the name of the file to move
 @param targetdir the destination directory
 @param targetpath the name to give the file in the destination directory
 @throw ClosedDirectoryStreamException
 if this or the target directory stream is closed
 @throw FileAlreadyExistsException
 if the file already exists in the target directory and cannot
           be replaced <i>(optional specific exception)</i>
 @throw AtomicMoveNotSupportedException
 if the file cannot be moved as an atomic file system operation
 @throw IOException
 if an I/O error occurs
 @throw SecurityException
 In the case of the default provider, and a security manager is
           installed, the <code>checkWrite</code>
           method is invoked to check write access to both the source and
           target file.
 */
- (void)moveWithId:(id)srcpath
withJavaNioFileSecureDirectoryStream:(id<JavaNioFileSecureDirectoryStream>)targetdir
            withId:(id)targetpath;

/*!
 @brief Returns a new file attribute view to access the file attributes of this
  directory.
 <p> The resulting file attribute view can be used to read or update the
  attributes of this (open) directory. The <code>type</code> parameter specifies
  the type of the attribute view and the method returns an instance of that
  type if supported. Invoking this method to obtain a <code>BasicFileAttributeView</code>
  always returns an instance of that class that is
  bound to this open directory. 
 <p> The state of resulting file attribute view is intimately connected
  to this directory stream. Once the directory stream is <code>closed</code>,
  then all methods to read or update attributes will throw <code>ClosedDirectoryStreamException</code>
 .
 @param type the 
 <code>Class</code>  object corresponding to the file attribute view
 @return a new file attribute view of the specified type bound to
           this directory stream, or <code>null</code> if the attribute view
           type is not available
 */
- (id<JavaNioFileAttributeFileAttributeView>)getFileAttributeViewWithIOSClass:(IOSClass *)type;

/*!
 @brief Returns a new file attribute view to access the file attributes of a file
  in this directory.
 <p> The resulting file attribute view can be used to read or update the
  attributes of file in this directory. The <code>type</code> parameter specifies
  the type of the attribute view and the method returns an instance of that
  type if supported. Invoking this method to obtain a <code>BasicFileAttributeView</code>
  always returns an instance of that class that is
  bound to the file in the directory. 
 <p> The state of resulting file attribute view is intimately connected
  to this directory stream. Once the directory stream <code>closed</code>,
  then all methods to read or update attributes will throw <code>ClosedDirectoryStreamException</code>
 . The
  file is not required to exist at the time that the file attribute view
  is created but methods to read or update attributes of the file will
  fail when invoked and the file does not exist.
 @param path the path of the file
 @param type the 
 <code>Class</code>  object corresponding to the file attribute view
 @param options options indicating how symbolic links are handled
 @return a new file attribute view of the specified type bound to a
           this directory stream, or <code>null</code> if the attribute view
           type is not available
 */
- (id<JavaNioFileAttributeFileAttributeView>)getFileAttributeViewWithId:(id)path
                                                           withIOSClass:(IOSClass *)type
                                         withJavaNioFileLinkOptionArray:(IOSObjectArray *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioFileSecureDirectoryStream)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioFileSecureDirectoryStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaNioFileSecureDirectoryStream")
