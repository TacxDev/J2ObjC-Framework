//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/NamedParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecNamedParameterSpec")
#ifdef RESTRICT_JavaSecuritySpecNamedParameterSpec
#define INCLUDE_ALL_JavaSecuritySpecNamedParameterSpec 0
#else
#define INCLUDE_ALL_JavaSecuritySpecNamedParameterSpec 1
#endif
#undef RESTRICT_JavaSecuritySpecNamedParameterSpec

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecNamedParameterSpec_) && (INCLUDE_ALL_JavaSecuritySpecNamedParameterSpec || defined(INCLUDE_JavaSecuritySpecNamedParameterSpec))
#define JavaSecuritySpecNamedParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

/*!
 @brief This class is used to specify any algorithm parameters that are determined
  by a standard name.This class also holds constants for standard parameter
  set names.
 The names of these constants exactly match the corresponding
  parameter set name. For example, NamedParameterSpec.X25519 represents the
  parameter set identified by the string "X25519". These strings are defined
  in the <a href="{@@docRoot}/../specs/security/standard-names.html#parameterspec-names">
           Java Security Standard Algorithm Names Specification</a>.
 @since 11
 */
@interface JavaSecuritySpecNamedParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

/*!
 @brief Creates a parameter specification using a standard (or predefined)
  name <code>stdName</code>.For the
  list of supported names, please consult the documentation
  of the provider whose implementation will be used.
 @param stdName the standard name of the algorithm parameters. See the         ParameterSpec Names section in the
          
  <a href="{@@docRoot}/../specs/security/standard-names.html#parameterspec-names">
          Java Security Standard Algorithm Names Specification
  </a>  for         information about standard names.
 @throw NullPointerExceptionif <code>stdName</code> is null.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)stdName;

/*!
 @brief Returns the standard name that determines the algorithm parameters.
 @return the standard name.
 */
- (NSString *)getName;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaSecuritySpecNamedParameterSpec)

/*!
 @brief The X25519 parameters
 */
inline JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_get_X25519(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_X25519;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecNamedParameterSpec, X25519, JavaSecuritySpecNamedParameterSpec *)

/*!
 @brief The X448 parameters
 */
inline JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_get_X448(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_X448;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecNamedParameterSpec, X448, JavaSecuritySpecNamedParameterSpec *)

/*!
 @brief The Ed25519 parameters
 @since 15
 */
inline JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_get_ED25519(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_ED25519;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecNamedParameterSpec, ED25519, JavaSecuritySpecNamedParameterSpec *)

/*!
 @brief The Ed448 parameters
 @since 15
 */
inline JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_get_ED448(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *JavaSecuritySpecNamedParameterSpec_ED448;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSecuritySpecNamedParameterSpec, ED448, JavaSecuritySpecNamedParameterSpec *)

FOUNDATION_EXPORT void JavaSecuritySpecNamedParameterSpec_initWithNSString_(JavaSecuritySpecNamedParameterSpec *self, NSString *stdName);

FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *new_JavaSecuritySpecNamedParameterSpec_initWithNSString_(NSString *stdName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecNamedParameterSpec *create_JavaSecuritySpecNamedParameterSpec_initWithNSString_(NSString *stdName);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecNamedParameterSpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecNamedParameterSpec")
