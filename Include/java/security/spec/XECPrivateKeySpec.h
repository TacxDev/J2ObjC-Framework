//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/XECPrivateKeySpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecXECPrivateKeySpec")
#ifdef RESTRICT_JavaSecuritySpecXECPrivateKeySpec
#define INCLUDE_ALL_JavaSecuritySpecXECPrivateKeySpec 0
#else
#define INCLUDE_ALL_JavaSecuritySpecXECPrivateKeySpec 1
#endif
#undef RESTRICT_JavaSecuritySpecXECPrivateKeySpec

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecXECPrivateKeySpec_) && (INCLUDE_ALL_JavaSecuritySpecXECPrivateKeySpec || defined(INCLUDE_JavaSecuritySpecXECPrivateKeySpec))
#define JavaSecuritySpecXECPrivateKeySpec_

#define RESTRICT_JavaSecuritySpecKeySpec 1
#define INCLUDE_JavaSecuritySpecKeySpec 1
#include "java/security/spec/KeySpec.h"

@class IOSByteArray;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief A class representing elliptic curve private keys as defined in RFC 7748,
  including the curve and other algorithm parameters.The private key is
  represented as an encoded scalar value.
 The decoding procedure defined in
  the RFC includes an operation that forces certain bits of the key to either
  1 or 0. This operation is known as "pruning" or "clamping" the private key.
  All arrays in this spec are unpruned, and implementations will need to prune
  the array before using it in any numerical operations.
 @since 11
 */
@interface JavaSecuritySpecXECPrivateKeySpec : NSObject < JavaSecuritySpecKeySpec >

#pragma mark Public

/*!
 @brief Construct a private key spec using the supplied parameters and
  encoded scalar value.
 @param params the algorithm parameters
 @param scalar the unpruned encoded scalar value. This array is copied                to protect against subsequent modification.
 @throw NullPointerExceptionif <code>params</code> or <code>scalar</code>
                               is null.
 */
- (instancetype __nonnull)initWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                                           withByteArray:(IOSByteArray *)scalar;

/*!
 @brief Get the algorithm parameters that define the curve and other settings.
 @return the algorithm parameters
 */
- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParams;

/*!
 @brief Get the scalar value encoded as an unpruned byte array.A new copy of
  the array is returned each time this method is called.
 @return the unpruned encoded scalar value
 */
- (IOSByteArray *)getScalar;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecXECPrivateKeySpec)

FOUNDATION_EXPORT void JavaSecuritySpecXECPrivateKeySpec_initWithJavaSecuritySpecAlgorithmParameterSpec_withByteArray_(JavaSecuritySpecXECPrivateKeySpec *self, id<JavaSecuritySpecAlgorithmParameterSpec> params, IOSByteArray *scalar);

FOUNDATION_EXPORT JavaSecuritySpecXECPrivateKeySpec *new_JavaSecuritySpecXECPrivateKeySpec_initWithJavaSecuritySpecAlgorithmParameterSpec_withByteArray_(id<JavaSecuritySpecAlgorithmParameterSpec> params, IOSByteArray *scalar) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecXECPrivateKeySpec *create_JavaSecuritySpecXECPrivateKeySpec_initWithJavaSecuritySpecAlgorithmParameterSpec_withByteArray_(id<JavaSecuritySpecAlgorithmParameterSpec> params, IOSByteArray *scalar);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecXECPrivateKeySpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecXECPrivateKeySpec")
