//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/interfaces/DSAKeyPairGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityInterfacesDSAKeyPairGenerator")
#ifdef RESTRICT_JavaSecurityInterfacesDSAKeyPairGenerator
#define INCLUDE_ALL_JavaSecurityInterfacesDSAKeyPairGenerator 0
#else
#define INCLUDE_ALL_JavaSecurityInterfacesDSAKeyPairGenerator 1
#endif
#undef RESTRICT_JavaSecurityInterfacesDSAKeyPairGenerator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityInterfacesDSAKeyPairGenerator_) && (INCLUDE_ALL_JavaSecurityInterfacesDSAKeyPairGenerator || defined(INCLUDE_JavaSecurityInterfacesDSAKeyPairGenerator))
#define JavaSecurityInterfacesDSAKeyPairGenerator_

@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityInterfacesDSAParams;

/*!
 @brief An interface to an object capable of generating DSA key pairs.
 <p>The <code>initialize</code> methods may each be called any number
  of times. If no <code>initialize</code> method is called on a
  DSAKeyPairGenerator, each provider that implements this interface
  should supply (and document) a default initialization. Note that
  defaults may vary across different providers. Additionally, the default
  value for a provider may change in a future version. Therefore, it is
  recommended to explicitly initialize the DSAKeyPairGenerator instead
  of relying on provider-specific defaults. 
 <p>Users wishing to indicate DSA-specific parameters, and to generate a key
  pair suitable for use with the DSA algorithm typically 
 <ol>
  
 <li>Get a key pair generator for the DSA algorithm by calling the
  KeyPairGenerator <code>getInstance</code> method with "DSA"
  as its argument. 
 <li>Check if the returned key pair generator is an instance of
  DSAKeyPairGenerator before casting the result to a DSAKeyPairGenerator
  and calling one of the <code>initialize</code> methods from this
  DSAKeyPairGenerator interface. 
 <li>Generate a key pair by calling the <code>generateKeyPair</code>
  method of the KeyPairGenerator class. 
 </ol>
  
 <p>Note: it is not always necessary to do algorithm-specific
  initialization for a DSA key pair generator. That is, it is not always
  necessary to call an <code>initialize</code> method in this interface.
  Algorithm-independent initialization using the <code>initialize</code> method
  in the KeyPairGenerator
  interface is all that is needed when you accept defaults for algorithm-specific
  parameters. 
 <p>Note: Some earlier implementations of this interface may not support
  larger values of DSA parameters such as 3072-bit.
 @since 1.1
 - seealso: java.security.KeyPairGenerator
 */
@protocol JavaSecurityInterfacesDSAKeyPairGenerator < JavaObject >

/*!
 @brief Initializes the key pair generator using the DSA family parameters
  (p,q and g) and an optional SecureRandom bit source.If a
  SecureRandom bit source is needed but not supplied, i.e. null, a
  default SecureRandom instance will be used.
 @param params the parameters to use to generate the keys.
 @param random the random bit source to use to generate key bits;  can be null.
 @throw InvalidParameterExceptionif the <code>params</code>
  value is invalid, null, or unsupported.
 */
- (void)initialize__WithJavaSecurityInterfacesDSAParams:(id<JavaSecurityInterfacesDSAParams>)params
                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initializes the key pair generator for a given modulus length
  (instead of parameters), and an optional SecureRandom bit source.
 If a SecureRandom bit source is needed but not supplied, i.e.
  null, a default SecureRandom instance will be used. 
 <p>If <code>genParams</code> is true, this method generates new
  p, q and g parameters. If it is false, the method uses precomputed
  parameters for the modulus length requested. If there are no
  precomputed parameters for that modulus length, an exception will be
  thrown.
 @param modlen the modulus length in bits. Valid values are any  multiple of 64 between 512 and 1024, inclusive, 2048, and 3072.
 @param random the random bit source to use to generate key bits;  can be null.
 @param genParams whether or not to generate new parameters for  the modulus length requested.
 @throw InvalidParameterExceptionif <code>modlen</code> is
  invalid, or unsupported, or if <code>genParams</code> is false and there
  are no precomputed parameters for the requested modulus length.
 */
- (void)initialize__WithInt:(jint)modlen
                withBoolean:(jboolean)genParams
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityInterfacesDSAKeyPairGenerator)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityInterfacesDSAKeyPairGenerator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaSecurityInterfacesDSAKeyPairGenerator")
