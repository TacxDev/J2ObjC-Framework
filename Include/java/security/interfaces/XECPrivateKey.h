//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/interfaces/XECPrivateKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityInterfacesXECPrivateKey")
#ifdef RESTRICT_JavaSecurityInterfacesXECPrivateKey
#define INCLUDE_ALL_JavaSecurityInterfacesXECPrivateKey 0
#else
#define INCLUDE_ALL_JavaSecurityInterfacesXECPrivateKey 1
#endif
#undef RESTRICT_JavaSecurityInterfacesXECPrivateKey

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityInterfacesXECPrivateKey_) && (INCLUDE_ALL_JavaSecurityInterfacesXECPrivateKey || defined(INCLUDE_JavaSecurityInterfacesXECPrivateKey))
#define JavaSecurityInterfacesXECPrivateKey_

#define RESTRICT_JavaSecurityInterfacesXECKey 1
#define INCLUDE_JavaSecurityInterfacesXECKey 1
#include "java/security/interfaces/XECKey.h"

#define RESTRICT_JavaSecurityPrivateKey 1
#define INCLUDE_JavaSecurityPrivateKey 1
#include "java/security/PrivateKey.h"

@class JavaUtilOptional;

/*!
 @brief An interface for an elliptic curve private key as defined by RFC 7748.
 These keys are distinct from the keys represented by <code>ECPrivateKey</code>,
  and they are intended for use with algorithms based on RFC 7748 such as the
  XDH <code>KeyAgreement</code> algorithm.
  An XEC private key is an encoded scalar value as described in RFC 7748.
  The decoding procedure defined in this RFC includes an operation that forces
  certain bits of the key to either 1 or 0. This operation is known as
  "pruning" or "clamping" the private key. Arrays returned by this interface
  are unpruned, and implementations will need to prune the array before
  using it in any numerical operations.
 @since 11
 */
@protocol JavaSecurityInterfacesXECPrivateKey < JavaSecurityInterfacesXECKey, JavaSecurityPrivateKey, JavaObject >

/*!
 @brief Get the scalar value encoded as an unpruned byte array.A new copy of
  the array is returned each time this method is called.
 @return the unpruned encoded scalar value, or an empty Optional if the
      scalar cannot be extracted (e.g. if the provider is a hardware token
      and the private key is not allowed to leave the crypto boundary).
 */
- (JavaUtilOptional *)getScalar;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityInterfacesXECPrivateKey)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityInterfacesXECPrivateKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaSecurityInterfacesXECPrivateKey")
