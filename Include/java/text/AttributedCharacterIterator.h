//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/text/AttributedCharacterIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextAttributedCharacterIterator")
#ifdef RESTRICT_JavaTextAttributedCharacterIterator
#define INCLUDE_ALL_JavaTextAttributedCharacterIterator 0
#else
#define INCLUDE_ALL_JavaTextAttributedCharacterIterator 1
#endif
#undef RESTRICT_JavaTextAttributedCharacterIterator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTextAttributedCharacterIterator_) && (INCLUDE_ALL_JavaTextAttributedCharacterIterator || defined(INCLUDE_JavaTextAttributedCharacterIterator))
#define JavaTextAttributedCharacterIterator_

#define RESTRICT_JavaTextCharacterIterator 1
#define INCLUDE_JavaTextCharacterIterator 1
#include "java/text/CharacterIterator.h"

@class JavaLangInteger;
@class JavaTextAttributedCharacterIterator_Attribute;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief An <code>AttributedCharacterIterator</code> allows iteration through both text and
  related attribute information.
 <p>
  An attribute is a key/value pair, identified by the key.  No two
  attributes on a given character can have the same key. 
 <p>The values for an attribute are immutable, or must not be mutated
  by clients or storage.  They are always passed by reference, and not
  cloned. 
 <p>A <em>run with respect to an attribute</em> is a maximum text range for
  which: 
 <ul>
  <li>the attribute is undefined or <code>null</code> for the entire range, or 
 <li>the attribute value is defined and has the same non-<code>null</code> value for the
      entire range. 
 </ul>
  
 <p>A <em>run with respect to a set of attributes</em> is a maximum text range for
  which this condition is met for each member attribute. 
 <p>When getting a run with no explicit attributes specified (i.e.,
  calling <code>getRunStart()</code> and <code>getRunLimit()</code>), any
  contiguous text segments having the same attributes (the same set
  of attribute/value pairs) are treated as separate runs if the
  attributes have been given to those text segments separately. 
 <p>The returned indexes are limited to the range of the iterator. 
 <p>The returned attribute information is limited to runs that contain
  the current character. 
 <p>
  Attribute keys are instances of <code>AttributedCharacterIterator.Attribute</code> and its
  subclasses, such as <code>java.awt.font.TextAttribute</code>.
 - seealso: AttributedCharacterIterator.Attribute
 - seealso: java.awt.font.TextAttribute
 - seealso: AttributedString
 - seealso: Annotation
 @since 1.2
 */
@protocol JavaTextAttributedCharacterIterator < JavaTextCharacterIterator, JavaObject >

/*!
 @brief Returns the index of the first character of the run
  with respect to all attributes containing the current character.
 <p>Any contiguous text segments having the same attributes (the
  same set of attribute/value pairs) are treated as separate runs
  if the attributes have been given to those text segments separately.
 @return the index of the first character of the run
 */
- (jint)getRunStart;

/*!
 @brief Returns the index of the first character of the run
  with respect to the given <code>attribute</code> containing the current character.
 @param attribute the desired attribute.
 @return the index of the first character of the run
 */
- (jint)getRunStartWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute;

/*!
 @brief Returns the index of the first character of the run
  with respect to the given <code>attributes</code> containing the current character.
 @param attributes a set of the desired attributes.
 @return the index of the first character of the run
 */
- (jint)getRunStartWithJavaUtilSet:(id<JavaUtilSet>)attributes;

/*!
 @brief Returns the index of the first character following the run
  with respect to all attributes containing the current character.
 <p>Any contiguous text segments having the same attributes (the
  same set of attribute/value pairs) are treated as separate runs
  if the attributes have been given to those text segments separately.
 @return the index of the first character following the run
 */
- (jint)getRunLimit;

/*!
 @brief Returns the index of the first character following the run
  with respect to the given <code>attribute</code> containing the current character.
 @param attribute the desired attribute
 @return the index of the first character following the run
 */
- (jint)getRunLimitWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute;

/*!
 @brief Returns the index of the first character following the run
  with respect to the given <code>attributes</code> containing the current character.
 @param attributes a set of the desired attributes
 @return the index of the first character following the run
 */
- (jint)getRunLimitWithJavaUtilSet:(id<JavaUtilSet>)attributes;

/*!
 @brief Returns a map with the attributes defined on the current
  character.
 @return a map with the attributes defined on the current character
 */
- (id<JavaUtilMap>)getAttributes;

/*!
 @brief Returns the value of the named <code>attribute</code> for the current character.
 Returns <code>null</code> if the <code>attribute</code> is not defined.
 @param attribute the desired attribute
 @return the value of the named <code>attribute</code> or <code>null</code>
 */
- (id)getAttributeWithJavaTextAttributedCharacterIterator_Attribute:(JavaTextAttributedCharacterIterator_Attribute *)attribute;

/*!
 @brief Returns the keys of all attributes defined on the
  iterator's text range.The set is empty if no
  attributes are defined.
 @return the keys of all attributes
 */
- (id<JavaUtilSet>)getAllAttributeKeys;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTextAttributedCharacterIterator)

J2OBJC_TYPE_LITERAL_HEADER(JavaTextAttributedCharacterIterator)

#endif

#if !defined (JavaTextAttributedCharacterIterator_Attribute_) && (INCLUDE_ALL_JavaTextAttributedCharacterIterator || defined(INCLUDE_JavaTextAttributedCharacterIterator_Attribute))
#define JavaTextAttributedCharacterIterator_Attribute_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaLangBoolean;
@class JavaLangInteger;

/*!
 @brief Defines attribute keys that are used to identify text attributes.These
  keys are used in <code>AttributedCharacterIterator</code> and <code>AttributedString</code>.
 - seealso: AttributedCharacterIterator
 - seealso: AttributedString
 @since 1.2
 */
@interface JavaTextAttributedCharacterIterator_Attribute : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Compares two objects for equality.This version only returns true
  for <code>x.equals(y)</code> if <code>x</code> and <code>y</code> refer
  to the same object, and guarantees this for all subclasses.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a hash code value for the object.This version is identical to
  the one in <code>Object</code>, but is also final.
 */
- (NSUInteger)hash;

/*!
 @brief Returns a string representation of the object.This version returns the
  concatenation of class name, <code>"("</code>, a name identifying the attribute
  and <code>")"</code>.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs an <code>Attribute</code> with the given name.
 @param name the name of <code>Attribute</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Returns the name of the attribute.
 @return the name of <code>Attribute</code>
 */
- (NSString *)getName;

/*!
 @brief Resolves instances being deserialized to the predefined constants.
 @return the resolved <code>Attribute</code> object
 @throw InvalidObjectExceptionif the object to resolve is not
                                 an instance of <code>Attribute</code>
 */
- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTextAttributedCharacterIterator_Attribute)

/*!
 @brief Attribute key for the language of some text.
 <p> Values are instances of <code>Locale</code>.
 - seealso: java.util.Locale
 */
inline JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_get_LANGUAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_LANGUAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTextAttributedCharacterIterator_Attribute, LANGUAGE, JavaTextAttributedCharacterIterator_Attribute *)

/*!
 @brief Attribute key for the reading of some text.In languages where the written form
  and the pronunciation of a word are only loosely related (such as Japanese),
  it is often necessary to store the reading (pronunciation) along with the
  written form.
 <p>Values are instances of <code>Annotation</code> holding instances of <code>String</code>.
 - seealso: Annotation
 - seealso: java.lang.String
 */
inline JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_get_READING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_READING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTextAttributedCharacterIterator_Attribute, READING, JavaTextAttributedCharacterIterator_Attribute *)

/*!
 @brief Attribute key for input method segments.Input methods often break
  up text into segments, which usually correspond to words.
 <p>Values are instances of <code>Annotation</code> holding a <code>null</code> reference.
 - seealso: Annotation
 */
inline JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_get_INPUT_METHOD_SEGMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTextAttributedCharacterIterator_Attribute *JavaTextAttributedCharacterIterator_Attribute_INPUT_METHOD_SEGMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTextAttributedCharacterIterator_Attribute, INPUT_METHOD_SEGMENT, JavaTextAttributedCharacterIterator_Attribute *)

FOUNDATION_EXPORT void JavaTextAttributedCharacterIterator_Attribute_initWithNSString_(JavaTextAttributedCharacterIterator_Attribute *self, NSString *name);

FOUNDATION_EXPORT JavaTextAttributedCharacterIterator_Attribute *new_JavaTextAttributedCharacterIterator_Attribute_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextAttributedCharacterIterator_Attribute *create_JavaTextAttributedCharacterIterator_Attribute_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextAttributedCharacterIterator_Attribute)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaTextAttributedCharacterIterator")
