//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/text/Normalizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextNormalizer")
#ifdef RESTRICT_JavaTextNormalizer
#define INCLUDE_ALL_JavaTextNormalizer 0
#else
#define INCLUDE_ALL_JavaTextNormalizer 1
#endif
#undef RESTRICT_JavaTextNormalizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTextNormalizer_) && (INCLUDE_ALL_JavaTextNormalizer || defined(INCLUDE_JavaTextNormalizer))
#define JavaTextNormalizer_

@class JavaLangBoolean;
@class JavaTextNormalizer_Form;
@protocol JavaLangCharSequence;

/*!
 @brief This class provides the method <code>normalize</code> which transforms Unicode
  text into an equivalent composed or decomposed form, allowing for easier
  sorting and searching of text.
 The <code>normalize</code> method supports the standard normalization forms
  described in 
 <a href="http://www.unicode.org/unicode/reports/tr15/tr15-23.html">
  Unicode Standard Annex #15 &mdash; Unicode Normalization Forms</a>.
  <p>
  Characters with accents or other adornments can be encoded in
  several different ways in Unicode.  For example, take the character A-acute.
  In Unicode, this can be encoded as a single character (the "composed" form): 
 @code

       U+00C1    LATIN CAPITAL LETTER A WITH ACUTE
@endcode
  or as two separate characters (the "decomposed" form): 
 @code

       U+0041    LATIN CAPITAL LETTER A
       U+0301    COMBINING ACUTE ACCENT
@endcode
  To a user of your program, however, both of these sequences should be
  treated as the same "user-level" character "A with acute accent".  When you
  are searching or comparing text, you must ensure that these two sequences are
  treated as equivalent.  In addition, you must handle characters with more than
  one accent. Sometimes the order of a character's combining accents is
  significant, while in other cases accent sequences in different orders are
  really equivalent. 
 <p>
  Similarly, the string "ffi" can be encoded as three separate letters: 
 @code

       U+0066    LATIN SMALL LETTER F      U+0066    LATIN SMALL LETTER F
       U+0069    LATIN SMALL LETTER I
@endcode
  or as the single character 
 @code

       U+FB03    LATIN SMALL LIGATURE FFI
@endcode
  The ffi ligature is not a distinct semantic character, and strictly speaking
  it shouldn't be in Unicode at all, but it was included for compatibility
  with existing character sets that already provided it.  The Unicode standard
  identifies such characters by giving them "compatibility" decompositions
  into the corresponding semantic characters.  When sorting and searching, you
  will often want to use these mappings. 
 <p>
  The <code>normalize</code> method helps solve these problems by transforming
  text into the canonical composed and decomposed forms as shown in the first
  example above. In addition, you can have it perform compatibility
  decompositions so that you can treat compatibility characters the same as
  their equivalents.
  Finally, the <code>normalize</code> method rearranges accents into the
  proper canonical order, so that you do not have to worry about accent
  rearrangement on your own. 
 <p>
  The W3C generally recommends to exchange texts in NFC.
  Note also that most legacy character encodings use only precomposed forms and
  often do not encode any combining marks by themselves. For conversion to such
  character encodings the Unicode text needs to be normalized to NFC.
  For more usage examples, see the Unicode Standard Annex.
 @since 1.6
 */
@interface JavaTextNormalizer : NSObject

#pragma mark Public

/*!
 @brief Determines if the given sequence of char values is normalized.
 @param src The sequence of char values to be checked.
 @param form The normalization form; one of                    
 <code>java.text.Normalizer.Form.NFC</code> ,                    
 <code>java.text.Normalizer.Form.NFD</code> ,                    
 <code>java.text.Normalizer.Form.NFKC</code> ,                    <code>java.text.Normalizer.Form.NFKD</code>
 @return true if the sequence of char values is normalized;
  false otherwise.
 @throw NullPointerExceptionIf <code>src</code> or <code>form</code>
  is null.
 */
+ (jboolean)isNormalizedWithJavaLangCharSequence:(id<JavaLangCharSequence>)src
                     withJavaTextNormalizer_Form:(JavaTextNormalizer_Form *)form;

/*!
 @brief Normalize the character sequence <code>src</code> according to the
  normalization method <code>form</code>.
 @param src character sequence to read for normalization
 @param form normalization form
 @return string normalized according to <code>form</code>
 */
+ (NSString *)normalizeWithJavaLangCharSequence:(id<JavaLangCharSequence>)src
                    withJavaTextNormalizer_Form:(JavaTextNormalizer_Form *)form;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTextNormalizer)

FOUNDATION_EXPORT jboolean JavaTextNormalizer_isNormalizedWithJavaLangCharSequence_withJavaTextNormalizer_Form_(id<JavaLangCharSequence> src, JavaTextNormalizer_Form *form);

FOUNDATION_EXPORT NSString *JavaTextNormalizer_normalizeWithJavaLangCharSequence_withJavaTextNormalizer_Form_(id<JavaLangCharSequence> src, JavaTextNormalizer_Form *form);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextNormalizer)

#endif

#if !defined (JavaTextNormalizer_Form_) && (INCLUDE_ALL_JavaTextNormalizer || defined(INCLUDE_JavaTextNormalizer_Form))
#define JavaTextNormalizer_Form_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(jint, JavaTextNormalizer_Form_Enum) {
  JavaTextNormalizer_Form_Enum_NFD = 0,
  JavaTextNormalizer_Form_Enum_NFC = 1,
  JavaTextNormalizer_Form_Enum_NFKD = 2,
  JavaTextNormalizer_Form_Enum_NFKC = 3,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define JavaTextNormalizer_Form_ORDINAL jint
#else
#define JavaTextNormalizer_Form_ORDINAL JavaTextNormalizer_Form_Enum
#endif


/*!
 @brief The normalization forms supported by the Normalizer.These are specified in 
 <a href="http://www.unicode.org/unicode/reports/tr15/tr15-23.html">Unicode Standard
  Annex #15</a>.
 */
@interface JavaTextNormalizer_Form : JavaLangEnum

#pragma mark Public

+ (JavaTextNormalizer_Form *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaTextNormalizer_Form_Enum)toNSEnum;

- (JavaTextNormalizer_Form_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(JavaTextNormalizer_Form)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaTextNormalizer_Form *JavaTextNormalizer_Form_values_[];

/*!
 @brief Normalization Form D - Canonical Decomposition.
 */
inline JavaTextNormalizer_Form *JavaTextNormalizer_Form_get_NFD(void);
J2OBJC_ENUM_CONSTANT(JavaTextNormalizer_Form, NFD)

/*!
 @brief Normalization Form C - Canonical Decomposition, followed by Canonical Composition.
 */
inline JavaTextNormalizer_Form *JavaTextNormalizer_Form_get_NFC(void);
J2OBJC_ENUM_CONSTANT(JavaTextNormalizer_Form, NFC)

/*!
 @brief Normalization Form KD - Compatibility Decomposition.
 */
inline JavaTextNormalizer_Form *JavaTextNormalizer_Form_get_NFKD(void);
J2OBJC_ENUM_CONSTANT(JavaTextNormalizer_Form, NFKD)

/*!
 @brief Normalization Form KC - Compatibility Decomposition, followed by Canonical Composition.
 */
inline JavaTextNormalizer_Form *JavaTextNormalizer_Form_get_NFKC(void);
J2OBJC_ENUM_CONSTANT(JavaTextNormalizer_Form, NFKC)

FOUNDATION_EXPORT IOSObjectArray *JavaTextNormalizer_Form_values(void);

FOUNDATION_EXPORT JavaTextNormalizer_Form *JavaTextNormalizer_Form_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaTextNormalizer_Form *JavaTextNormalizer_Form_fromOrdinal(JavaTextNormalizer_Form_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextNormalizer_Form)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaTextNormalizer")
