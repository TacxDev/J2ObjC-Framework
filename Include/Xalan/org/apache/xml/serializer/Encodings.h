//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/Encodings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodings")
#ifdef RESTRICT_OrgApacheXmlSerializerEncodings
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodings 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodings 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerEncodings

#if !defined (OrgApacheXmlSerializerEncodings_) && (INCLUDE_ALL_OrgApacheXmlSerializerEncodings || defined(INCLUDE_OrgApacheXmlSerializerEncodings))
#define OrgApacheXmlSerializerEncodings_

@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaLangBoolean;
@class JavaLangCharacter;
@class JavaLangInteger;
@class OrgApacheXmlSerializerEncodingInfo;

@interface OrgApacheXmlSerializerEncodings : NSObject

#pragma mark Public

- (instancetype)init;

+ (NSString *)convertMime2JavaEncodingWithNSString:(NSString *)encoding;

+ (jchar)getHighCharWithNSString:(NSString *)encoding;

+ (jboolean)isRecognizedEncodingWithNSString:(NSString *)encoding;

#pragma mark Package-Private

+ (OrgApacheXmlSerializerEncodingInfo *)getEncodingInfoWithNSString:(NSString *)encoding;

+ (NSString *)getMimeEncodingWithNSString:(NSString *)encoding;

+ (JavaIoWriter *)getWriterWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                     withNSString:(NSString *)encoding;

+ (jboolean)isHighUTF16SurrogateWithChar:(jchar)ch;

+ (jboolean)isLowUTF16SurrogateWithChar:(jchar)ch;

+ (jint)toCodePointWithChar:(jchar)ch;

+ (jint)toCodePointWithChar:(jchar)highSurrogate
                   withChar:(jchar)lowSurrogate;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerEncodings)

inline NSString *OrgApacheXmlSerializerEncodings_get_DEFAULT_MIME_ENCODING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_DEFAULT_MIME_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXmlSerializerEncodings, DEFAULT_MIME_ENCODING, NSString *)

FOUNDATION_EXPORT void OrgApacheXmlSerializerEncodings_init(OrgApacheXmlSerializerEncodings *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodings *new_OrgApacheXmlSerializerEncodings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodings *create_OrgApacheXmlSerializerEncodings_init(void);

FOUNDATION_EXPORT JavaIoWriter *OrgApacheXmlSerializerEncodings_getWriterWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodingInfo *OrgApacheXmlSerializerEncodings_getEncodingInfoWithNSString_(NSString *encoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isRecognizedEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_getMimeEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_convertMime2JavaEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isHighUTF16SurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isLowUTF16SurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jint OrgApacheXmlSerializerEncodings_toCodePointWithChar_withChar_(jchar highSurrogate, jchar lowSurrogate);

FOUNDATION_EXPORT jint OrgApacheXmlSerializerEncodings_toCodePointWithChar_(jchar ch);

FOUNDATION_EXPORT jchar OrgApacheXmlSerializerEncodings_getHighCharWithNSString_(NSString *encoding);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerEncodings)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodings")
