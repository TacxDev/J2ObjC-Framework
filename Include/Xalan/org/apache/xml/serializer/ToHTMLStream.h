//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/ToHTMLStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream")
#ifdef RESTRICT_OrgApacheXmlSerializerToHTMLStream
#define INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerToHTMLStream

#if !defined (OrgApacheXmlSerializerToHTMLStream_) && (INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream || defined(INCLUDE_OrgApacheXmlSerializerToHTMLStream))
#define OrgApacheXmlSerializerToHTMLStream_

#define RESTRICT_OrgApacheXmlSerializerToStream 1
#define INCLUDE_OrgApacheXmlSerializerToStream 1
#include "org/apache/xml/serializer/ToStream.h"

@class IOSCharArray;
@class JavaIoWriter;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaUtilProperties;
@class OrgApacheXmlSerializerElemDesc;
@class OrgApacheXmlSerializerToHTMLStream_Trie;
@protocol OrgXmlSaxAttributes;

@interface OrgApacheXmlSerializerToHTMLStream : OrgApacheXmlSerializerToStream {
 @public
  jboolean m_inDTD_;
}

#pragma mark Public

- (instancetype)init;

- (void)addUniqueAttributeWithNSString:(NSString *)name
                          withNSString:(NSString *)value
                               withInt:(jint)flags;

- (void)attributeDeclWithNSString:(NSString *)eName
                     withNSString:(NSString *)aName
                     withNSString:(NSString *)type
                     withNSString:(NSString *)valueDefault
                     withNSString:(NSString *)value;

- (void)cdataWithCharArray:(IOSCharArray *)ch
                   withInt:(jint)start
                   withInt:(jint)length;

- (void)charactersWithCharArray:(IOSCharArray *)chars
                        withInt:(jint)start
                        withInt:(jint)length;

- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length;

- (void)elementDeclWithNSString:(NSString *)name
                   withNSString:(NSString *)model;

- (void)endDocument;

- (void)endDTD;

- (void)endElementWithNSString:(NSString *)elemName;

- (void)endElementWithNSString:(NSString *)namespaceURI
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)name;

- (void)entityReferenceWithNSString:(NSString *)name;

- (void)externalEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)publicId
                          withNSString:(NSString *)systemId;

+ (OrgApacheXmlSerializerElemDesc *)getElemDescWithNSString:(NSString *)name;

- (void)internalEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)value;

- (void)namespaceAfterStartElementWithNSString:(NSString *)prefix
                                  withNSString:(NSString *)uri;

- (void)processAttributesWithJavaIoWriter:(JavaIoWriter *)writer
                                  withInt:(jint)nAttrs;

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

- (jboolean)reset;

- (void)setOmitMetaTagWithBoolean:(jboolean)bool_;

- (void)setOutputFormatWithJavaUtilProperties:(JavaUtilProperties *)format;

- (void)setSpecialEscapeURLsWithBoolean:(jboolean)bool_;

- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicId
                withNSString:(NSString *)systemId;

- (void)startElementWithNSString:(NSString *)namespaceURI
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)name
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)writeAttrStringWithJavaIoWriter:(JavaIoWriter *)writer
                           withNSString:(NSString *)string
                           withNSString:(NSString *)encoding;

- (void)writeAttrURIWithJavaIoWriter:(JavaIoWriter *)writer
                        withNSString:(NSString *)string
                         withBoolean:(jboolean)doURLEscaping;

#pragma mark Protected

- (void)closeStartTag;

- (void)processAttributeWithJavaIoWriter:(JavaIoWriter *)writer
                            withNSString:(NSString *)name
                            withNSString:(NSString *)value
      withOrgApacheXmlSerializerElemDesc:(OrgApacheXmlSerializerElemDesc *)elemDesc;

- (void)startDocumentInternal;

#pragma mark Package-Private

+ (void)initTagReferenceWithOrgApacheXmlSerializerToHTMLStream_Trie:(OrgApacheXmlSerializerToHTMLStream_Trie *)m_elementFlags OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerToHTMLStream)

inline OrgApacheXmlSerializerToHTMLStream_Trie *OrgApacheXmlSerializerToHTMLStream_get_m_elementFlags(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *OrgApacheXmlSerializerToHTMLStream_m_elementFlags;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXmlSerializerToHTMLStream, m_elementFlags, OrgApacheXmlSerializerToHTMLStream_Trie *)

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_initTagReferenceWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *m_elementFlags);

FOUNDATION_EXPORT OrgApacheXmlSerializerElemDesc *OrgApacheXmlSerializerToHTMLStream_getElemDescWithNSString_(NSString *name);

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_init(OrgApacheXmlSerializerToHTMLStream *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream *new_OrgApacheXmlSerializerToHTMLStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream *create_OrgApacheXmlSerializerToHTMLStream_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerToHTMLStream)

#endif

#if !defined (OrgApacheXmlSerializerToHTMLStream_Trie_) && (INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream || defined(INCLUDE_OrgApacheXmlSerializerToHTMLStream_Trie))
#define OrgApacheXmlSerializerToHTMLStream_Trie_

@class JavaLangBoolean;
@class JavaLangInteger;
@class OrgApacheXmlSerializerToHTMLStream_Trie_Node;

@interface OrgApacheXmlSerializerToHTMLStream_Trie : NSObject {
 @public
  OrgApacheXmlSerializerToHTMLStream_Trie_Node *m_Root_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)lowerCaseOnly;

- (instancetype)initWithOrgApacheXmlSerializerToHTMLStream_Trie:(OrgApacheXmlSerializerToHTMLStream_Trie *)existingTrie;

- (id)getWithNSString:(NSString *)key;

- (id)get2WithNSString:(NSString *)key;

- (jint)getLongestKeyLength;

- (id)putWithNSString:(NSString *)key
               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlSerializerToHTMLStream_Trie)

J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerToHTMLStream_Trie, m_Root_, OrgApacheXmlSerializerToHTMLStream_Trie_Node *)

inline jint OrgApacheXmlSerializerToHTMLStream_Trie_get_ALPHA_SIZE(void);
#define OrgApacheXmlSerializerToHTMLStream_Trie_ALPHA_SIZE 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerToHTMLStream_Trie, ALPHA_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_Trie_init(OrgApacheXmlSerializerToHTMLStream_Trie *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *new_OrgApacheXmlSerializerToHTMLStream_Trie_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *create_OrgApacheXmlSerializerToHTMLStream_Trie_init(void);

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_Trie_initWithBoolean_(OrgApacheXmlSerializerToHTMLStream_Trie *self, jboolean lowerCaseOnly);

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *new_OrgApacheXmlSerializerToHTMLStream_Trie_initWithBoolean_(jboolean lowerCaseOnly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *create_OrgApacheXmlSerializerToHTMLStream_Trie_initWithBoolean_(jboolean lowerCaseOnly);

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_Trie_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *self, OrgApacheXmlSerializerToHTMLStream_Trie *existingTrie);

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *new_OrgApacheXmlSerializerToHTMLStream_Trie_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *existingTrie) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie *create_OrgApacheXmlSerializerToHTMLStream_Trie_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *existingTrie);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerToHTMLStream_Trie)

#endif

#if !defined (OrgApacheXmlSerializerToHTMLStream_Trie_Node_) && (INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream || defined(INCLUDE_OrgApacheXmlSerializerToHTMLStream_Trie_Node))
#define OrgApacheXmlSerializerToHTMLStream_Trie_Node_

@class IOSObjectArray;
@class OrgApacheXmlSerializerToHTMLStream_Trie;

@interface OrgApacheXmlSerializerToHTMLStream_Trie_Node : NSObject {
 @public
  IOSObjectArray *m_nextChar_;
  id m_Value_;
}

#pragma mark Package-Private

- (instancetype)initWithOrgApacheXmlSerializerToHTMLStream_Trie:(OrgApacheXmlSerializerToHTMLStream_Trie *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlSerializerToHTMLStream_Trie_Node)

J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerToHTMLStream_Trie_Node, m_nextChar_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerToHTMLStream_Trie_Node, m_Value_, id)

FOUNDATION_EXPORT void OrgApacheXmlSerializerToHTMLStream_Trie_Node_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie_Node *self, OrgApacheXmlSerializerToHTMLStream_Trie *outer$);

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie_Node *new_OrgApacheXmlSerializerToHTMLStream_Trie_Node_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerToHTMLStream_Trie_Node *create_OrgApacheXmlSerializerToHTMLStream_Trie_Node_initWithOrgApacheXmlSerializerToHTMLStream_Trie_(OrgApacheXmlSerializerToHTMLStream_Trie *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerToHTMLStream_Trie_Node)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerToHTMLStream")
