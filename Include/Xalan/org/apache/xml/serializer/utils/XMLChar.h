//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/utils/XMLChar.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerUtilsXMLChar")
#ifdef RESTRICT_OrgApacheXmlSerializerUtilsXMLChar
#define INCLUDE_ALL_OrgApacheXmlSerializerUtilsXMLChar 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerUtilsXMLChar 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerUtilsXMLChar

#if !defined (OrgApacheXmlSerializerUtilsXMLChar_) && (INCLUDE_ALL_OrgApacheXmlSerializerUtilsXMLChar || defined(INCLUDE_OrgApacheXmlSerializerUtilsXMLChar))
#define OrgApacheXmlSerializerUtilsXMLChar_

@class JavaLangBoolean;
@class JavaLangCharacter;
@class JavaLangInteger;

@interface OrgApacheXmlSerializerUtilsXMLChar : NSObject

#pragma mark Public

- (instancetype)init;

+ (jchar)highSurrogateWithInt:(jint)c;

+ (jboolean)isContentWithInt:(jint)c;

+ (jboolean)isHighSurrogateWithInt:(jint)c;

+ (jboolean)isInvalidWithInt:(jint)c;

+ (jboolean)isLowSurrogateWithInt:(jint)c;

+ (jboolean)isMarkupWithInt:(jint)c;

+ (jboolean)isNameWithInt:(jint)c;

+ (jboolean)isNameStartWithInt:(jint)c;

+ (jboolean)isNCNameWithInt:(jint)c;

+ (jboolean)isNCNameStartWithInt:(jint)c;

+ (jboolean)isPubidWithInt:(jint)c;

+ (jboolean)isSpaceWithInt:(jint)c;

+ (jboolean)isSupplementalWithInt:(jint)c;

+ (jboolean)isValidWithInt:(jint)c;

+ (jboolean)isValidIANAEncodingWithNSString:(NSString *)ianaEncoding;

+ (jboolean)isValidJavaEncodingWithNSString:(NSString *)javaEncoding;

+ (jboolean)isValidNameWithNSString:(NSString *)name;

+ (jboolean)isValidNCNameWithNSString:(NSString *)ncName;

+ (jboolean)isValidNmtokenWithNSString:(NSString *)nmtoken;

+ (jchar)lowSurrogateWithInt:(jint)c;

+ (jint)supplementalWithChar:(jchar)h
                    withChar:(jchar)l;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerUtilsXMLChar)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_VALID(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_VALID 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_VALID, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_SPACE(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_SPACE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_SPACE, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_NAME_START(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_NAME_START 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_NAME_START, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_NAME(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_NAME 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_NAME, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_PUBID(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_PUBID 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_PUBID, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_CONTENT(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_CONTENT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_CONTENT, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_NCNAME_START(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_NCNAME_START 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_NCNAME_START, jint)

inline jint OrgApacheXmlSerializerUtilsXMLChar_get_MASK_NCNAME(void);
#define OrgApacheXmlSerializerUtilsXMLChar_MASK_NCNAME 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXMLChar, MASK_NCNAME, jint)

FOUNDATION_EXPORT void OrgApacheXmlSerializerUtilsXMLChar_init(OrgApacheXmlSerializerUtilsXMLChar *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerUtilsXMLChar *new_OrgApacheXmlSerializerUtilsXMLChar_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerUtilsXMLChar *create_OrgApacheXmlSerializerUtilsXMLChar_init(void);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isSupplementalWithInt_(jint c);

FOUNDATION_EXPORT jint OrgApacheXmlSerializerUtilsXMLChar_supplementalWithChar_withChar_(jchar h, jchar l);

FOUNDATION_EXPORT jchar OrgApacheXmlSerializerUtilsXMLChar_highSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jchar OrgApacheXmlSerializerUtilsXMLChar_lowSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isHighSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isLowSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isInvalidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isContentWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isMarkupWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isSpaceWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isNameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isNameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isNCNameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isNCNameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isPubidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidNameWithNSString_(NSString *name);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidNCNameWithNSString_(NSString *ncName);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidNmtokenWithNSString_(NSString *nmtoken);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidIANAEncodingWithNSString_(NSString *ianaEncoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXMLChar_isValidJavaEncodingWithNSString_(NSString *javaEncoding);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerUtilsXMLChar)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerUtilsXMLChar")
