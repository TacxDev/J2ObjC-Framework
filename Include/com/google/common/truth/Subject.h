//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/testing/truth/build_result/java/com/google/common/truth/Subject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonTruthSubject")
#ifdef RESTRICT_ComGoogleCommonTruthSubject
#define INCLUDE_ALL_ComGoogleCommonTruthSubject 0
#else
#define INCLUDE_ALL_ComGoogleCommonTruthSubject 1
#endif
#undef RESTRICT_ComGoogleCommonTruthSubject

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonTruthSubject_) && (INCLUDE_ALL_ComGoogleCommonTruthSubject || defined(INCLUDE_ComGoogleCommonTruthSubject))
#define ComGoogleCommonTruthSubject_

@class ComGoogleCommonTruthFact;
@class ComGoogleCommonTruthFailureMetadata;
@class ComGoogleCommonTruthStandardSubjectBuilder;
@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol JavaLangIterable;

@interface ComGoogleCommonTruthSubject : NSObject

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (void)isAnyOfWithId:(id)first
               withId:(id)second
    withNSObjectArray:(IOSObjectArray *)rest;

- (void)isEqualToWithId:(id)expected;

- (void)isInWithJavaLangIterable:(id<JavaLangIterable>)iterable;

- (void)isInstanceOfWithIOSClass:(IOSClass *)clazz;

- (void)isNoneOfWithId:(id)first
                withId:(id)second
     withNSObjectArray:(IOSObjectArray *)rest;

- (void)isNotEqualToWithId:(id)unexpected;

- (void)isNotInWithJavaLangIterable:(id<JavaLangIterable>)iterable;

- (void)isNotInstanceOfWithIOSClass:(IOSClass *)clazz;

- (void)isNotNull;

- (void)isNotSameInstanceAsWithId:(id)unexpected;

- (void)isNull;

- (void)isSameInstanceAsWithId:(id)expected;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithComGoogleCommonTruthFailureMetadata:(ComGoogleCommonTruthFailureMetadata *)metadata
                                                     withId:(id)actual;

- (NSString *)actualCustomStringRepresentation;

- (ComGoogleCommonTruthStandardSubjectBuilder *)checkWithNSString:(NSString *)format
                                                withNSObjectArray:(IOSObjectArray *)args;

- (void)failWithActualWithComGoogleCommonTruthFact:(ComGoogleCommonTruthFact *)first
                 withComGoogleCommonTruthFactArray:(IOSObjectArray *)rest;

- (void)failWithActualWithNSString:(NSString *)key
                            withId:(id)value;

- (void)failWithoutActualWithComGoogleCommonTruthFact:(ComGoogleCommonTruthFact *)first
                    withComGoogleCommonTruthFactArray:(IOSObjectArray *)rest;

- (ComGoogleCommonTruthStandardSubjectBuilder *)ignoreCheck;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonTruthFailureMetadata:(ComGoogleCommonTruthFailureMetadata *)metadata
                                                     withId:(id)actual
                                               withNSString:(NSString *)typeDescriptionOverride;

- (id)actual;

- (NSString *)actualCustomStringRepresentationForPackageMembersToCall;

- (ComGoogleCommonTruthFact *)butWas;

- (ComGoogleCommonTruthStandardSubjectBuilder *)check;

- (ComGoogleCommonTruthStandardSubjectBuilder *)checkNoNeedToDisplayBothValuesWithNSString:(NSString *)format
                                                                         withNSObjectArray:(IOSObjectArray *)args;

- (void)failWithNSString:(NSString *)check;

- (void)failWithNSString:(NSString *)verb
                  withId:(id)other;

- (void)failWithNSString:(NSString *)verb
       withNSObjectArray:(IOSObjectArray *)messageParts;

- (void)failEqualityCheckForEqualsWithoutDescriptionWithId:(id)expected;

- (void)failWithActualWithJavaLangIterable:(id<JavaLangIterable>)facts;

- (void)failWithBadResultsWithNSString:(NSString *)verb
                                withId:(id)expected
                          withNSString:(NSString *)failVerb
                                withId:(id)actual;

- (void)failWithCustomSubjectWithNSString:(NSString *)verb
                                   withId:(id)expected
                                   withId:(id)actual;

- (void)failWithoutActualWithJavaLangIterable:(id<JavaLangIterable>)facts;

- (void)failWithoutActualWithNSString:(NSString *)check;

- (void)failWithoutSubjectWithNSString:(NSString *)check;

- (NSString *)typeDescription;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonTruthSubject)

FOUNDATION_EXPORT void ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_(ComGoogleCommonTruthSubject *self, ComGoogleCommonTruthFailureMetadata *metadata, id actual);

FOUNDATION_EXPORT ComGoogleCommonTruthSubject *new_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_(ComGoogleCommonTruthFailureMetadata *metadata, id actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonTruthSubject *create_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_(ComGoogleCommonTruthFailureMetadata *metadata, id actual);

FOUNDATION_EXPORT void ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_withNSString_(ComGoogleCommonTruthSubject *self, ComGoogleCommonTruthFailureMetadata *metadata, id actual, NSString *typeDescriptionOverride);

FOUNDATION_EXPORT ComGoogleCommonTruthSubject *new_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_withNSString_(ComGoogleCommonTruthFailureMetadata *metadata, id actual, NSString *typeDescriptionOverride) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonTruthSubject *create_ComGoogleCommonTruthSubject_initWithComGoogleCommonTruthFailureMetadata_withId_withNSString_(ComGoogleCommonTruthFailureMetadata *metadata, id actual, NSString *typeDescriptionOverride);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthSubject)

#endif

#if !defined (ComGoogleCommonTruthSubject_Factory_) && (INCLUDE_ALL_ComGoogleCommonTruthSubject || defined(INCLUDE_ComGoogleCommonTruthSubject_Factory))
#define ComGoogleCommonTruthSubject_Factory_

@class ComGoogleCommonTruthFailureMetadata;
@class ComGoogleCommonTruthSubject;

@protocol ComGoogleCommonTruthSubject_Factory < JavaObject >

- (ComGoogleCommonTruthSubject *)createSubjectWithComGoogleCommonTruthFailureMetadata:(ComGoogleCommonTruthFailureMetadata *)metadata
                                                                               withId:(id)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonTruthSubject_Factory)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthSubject_Factory)

#endif

#if !defined (ComGoogleCommonTruthSubject_EqualityCheck_) && (INCLUDE_ALL_ComGoogleCommonTruthSubject || defined(INCLUDE_ComGoogleCommonTruthSubject_EqualityCheck))
#define ComGoogleCommonTruthSubject_EqualityCheck_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(jint, ComGoogleCommonTruthSubject_EqualityCheck_Enum) {
  ComGoogleCommonTruthSubject_EqualityCheck_Enum_EQUAL = 0,
  ComGoogleCommonTruthSubject_EqualityCheck_Enum_SAME_INSTANCE = 1,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ComGoogleCommonTruthSubject_EqualityCheck_ORDINAL jint
#else
#define ComGoogleCommonTruthSubject_EqualityCheck_ORDINAL ComGoogleCommonTruthSubject_EqualityCheck_Enum
#endif


@interface ComGoogleCommonTruthSubject_EqualityCheck : JavaLangEnum {
 @public
  NSString *keyForExpected_;
}

#pragma mark Public

+ (ComGoogleCommonTruthSubject_EqualityCheck *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ComGoogleCommonTruthSubject_EqualityCheck_Enum)toNSEnum;

- (ComGoogleCommonTruthSubject_EqualityCheck_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonTruthSubject_EqualityCheck)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonTruthSubject_EqualityCheck *ComGoogleCommonTruthSubject_EqualityCheck_values_[];

inline ComGoogleCommonTruthSubject_EqualityCheck *ComGoogleCommonTruthSubject_EqualityCheck_get_EQUAL(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonTruthSubject_EqualityCheck, EQUAL)

inline ComGoogleCommonTruthSubject_EqualityCheck *ComGoogleCommonTruthSubject_EqualityCheck_get_SAME_INSTANCE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonTruthSubject_EqualityCheck, SAME_INSTANCE)

J2OBJC_FIELD_SETTER(ComGoogleCommonTruthSubject_EqualityCheck, keyForExpected_, NSString *)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonTruthSubject_EqualityCheck_values(void);

FOUNDATION_EXPORT ComGoogleCommonTruthSubject_EqualityCheck *ComGoogleCommonTruthSubject_EqualityCheck_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonTruthSubject_EqualityCheck *ComGoogleCommonTruthSubject_EqualityCheck_fromOrdinal(ComGoogleCommonTruthSubject_EqualityCheck_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonTruthSubject_EqualityCheck)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonTruthSubject")
