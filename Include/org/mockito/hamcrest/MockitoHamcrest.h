//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/testing/mockito/build_result/java/org/mockito/hamcrest/MockitoHamcrest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest")
#ifdef RESTRICT_OrgMockitoHamcrestMockitoHamcrest
#define INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest 0
#else
#define INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest 1
#endif
#undef RESTRICT_OrgMockitoHamcrestMockitoHamcrest

#if !defined (OrgMockitoHamcrestMockitoHamcrest_) && (INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest || defined(INCLUDE_OrgMockitoHamcrestMockitoHamcrest))
#define OrgMockitoHamcrestMockitoHamcrest_

@class JavaLangBoolean;
@class JavaLangByte;
@class JavaLangCharacter;
@class JavaLangDouble;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangShort;
@protocol OrgHamcrestMatcher;

@interface OrgMockitoHamcrestMockitoHamcrest : NSObject

#pragma mark Public

- (instancetype)init;

+ (id)argThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jboolean)booleanThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jbyte)byteThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jchar)charThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jdouble)doubleThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jfloat)floatThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jint)intThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jlong)longThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

+ (jshort)shortThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoHamcrestMockitoHamcrest)

FOUNDATION_EXPORT void OrgMockitoHamcrestMockitoHamcrest_init(OrgMockitoHamcrestMockitoHamcrest *self);

FOUNDATION_EXPORT OrgMockitoHamcrestMockitoHamcrest *new_OrgMockitoHamcrestMockitoHamcrest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoHamcrestMockitoHamcrest *create_OrgMockitoHamcrestMockitoHamcrest_init(void);

FOUNDATION_EXPORT id OrgMockitoHamcrestMockitoHamcrest_argThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jchar OrgMockitoHamcrestMockitoHamcrest_charThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jboolean OrgMockitoHamcrestMockitoHamcrest_booleanThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jbyte OrgMockitoHamcrestMockitoHamcrest_byteThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jshort OrgMockitoHamcrestMockitoHamcrest_shortThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jint OrgMockitoHamcrestMockitoHamcrest_intThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jlong OrgMockitoHamcrestMockitoHamcrest_longThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jfloat OrgMockitoHamcrestMockitoHamcrest_floatThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jdouble OrgMockitoHamcrestMockitoHamcrest_doubleThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoHamcrestMockitoHamcrest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest")
