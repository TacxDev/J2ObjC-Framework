//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/testing/mockito/build_result/java/org/mockito/internal/junit/util/JUnitFailureHacker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalJunitUtilJUnitFailureHacker")
#ifdef RESTRICT_OrgMockitoInternalJunitUtilJUnitFailureHacker
#define INCLUDE_ALL_OrgMockitoInternalJunitUtilJUnitFailureHacker 0
#else
#define INCLUDE_ALL_OrgMockitoInternalJunitUtilJUnitFailureHacker 1
#endif
#undef RESTRICT_OrgMockitoInternalJunitUtilJUnitFailureHacker

#if !defined (OrgMockitoInternalJunitUtilJUnitFailureHacker_) && (INCLUDE_ALL_OrgMockitoInternalJunitUtilJUnitFailureHacker || defined(INCLUDE_OrgMockitoInternalJunitUtilJUnitFailureHacker))
#define OrgMockitoInternalJunitUtilJUnitFailureHacker_

@class OrgJunitRunnerNotificationFailure;

@interface OrgMockitoInternalJunitUtilJUnitFailureHacker : NSObject

#pragma mark Public

- (instancetype)init;

- (void)appendWarningsWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure
                                               withNSString:(NSString *)warnings;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalJunitUtilJUnitFailureHacker)

FOUNDATION_EXPORT void OrgMockitoInternalJunitUtilJUnitFailureHacker_init(OrgMockitoInternalJunitUtilJUnitFailureHacker *self);

FOUNDATION_EXPORT OrgMockitoInternalJunitUtilJUnitFailureHacker *new_OrgMockitoInternalJunitUtilJUnitFailureHacker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalJunitUtilJUnitFailureHacker *create_OrgMockitoInternalJunitUtilJUnitFailureHacker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalJunitUtilJUnitFailureHacker)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalJunitUtilJUnitFailureHacker")
