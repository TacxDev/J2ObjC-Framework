//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/testing/mockito/build_result/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport")
#ifdef RESTRICT_OrgMockitoInternalUtilReflectionGenericMetadataSupport
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilReflectionGenericMetadataSupport
#ifdef INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType
#define INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType 1
#endif
#ifdef INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType
#define INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType 1
#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangReflectMethod;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport : NSObject {
 @public
  id<JavaUtilMap> contextualActualTypeParameters_;
}

#pragma mark Public

- (instancetype)init;

- (id<JavaUtilMap>)actualTypeArguments;

- (id<JavaUtilList>)extraInterfaces;

- (jboolean)hasRawExtraInterfaces;

+ (OrgMockitoInternalUtilReflectionGenericMetadataSupport *)inferFromWithJavaLangReflectType:(id<JavaLangReflectType>)type;

- (IOSObjectArray *)rawExtraInterfaces;

- (IOSClass *)rawType;

- (OrgMockitoInternalUtilReflectionGenericMetadataSupport *)resolveGenericReturnTypeWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

#pragma mark Protected

- (IOSClass *)extractRawTypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id<JavaLangReflectType>)getActualTypeArgumentForWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeParameter;

- (void)registerAllTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)classType;

- (void)registerTypeParametersOnWithJavaLangReflectTypeVariableArray:(IOSObjectArray *)typeParameters;

- (void)registerTypeVariablesOnWithJavaLangReflectType:(id<JavaLangReflectType>)classType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport)

J2OBJC_FIELD_SETTER(OrgMockitoInternalUtilReflectionGenericMetadataSupport, contextualActualTypeParameters_, id<JavaUtilMap>)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_init(OrgMockitoInternalUtilReflectionGenericMetadataSupport *self);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport *OrgMockitoInternalUtilReflectionGenericMetadataSupport_inferFromWithJavaLangReflectType_(id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType_

#define RESTRICT_JavaLangReflectType 1
#define INCLUDE_JavaLangReflectType 1
#include "java/lang/reflect/Type.h"

@class IOSObjectArray;

@protocol OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType < JavaLangReflectType, JavaObject >

- (id<JavaLangReflectType>)firstBound;

- (IOSObjectArray *)interfaceBounds;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;

@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType : NSObject < OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType >

#pragma mark Public

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

- (jboolean)isEqual:(id)o;

- (id<JavaLangReflectType>)firstBound;

- (NSUInteger)hash;

- (IOSObjectArray *)interfaceBounds;

- (NSString *)description;

- (id<JavaLangReflectTypeVariable>)typeVariable;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *self, id<JavaLangReflectTypeVariable> typeVariable);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *new_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *create_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol JavaLangReflectType;
@protocol JavaLangReflectWildcardType;

@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType : NSObject < OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType >

#pragma mark Public

- (instancetype)initWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcard;

- (jboolean)isEqual:(id)o;

- (id<JavaLangReflectType>)firstBound;

- (NSUInteger)hash;

- (IOSObjectArray *)interfaceBounds;

- (NSString *)description;

- (id<JavaLangReflectWildcardType>)wildCard;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *self, id<JavaLangReflectWildcardType> wildcard);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *new_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcard) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *create_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcard);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport")
