//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/testing/mockito/build_result/java/org/mockito/Answers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoAnswers")
#ifdef RESTRICT_OrgMockitoAnswers
#define INCLUDE_ALL_OrgMockitoAnswers 0
#else
#define INCLUDE_ALL_OrgMockitoAnswers 1
#endif
#undef RESTRICT_OrgMockitoAnswers

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoAnswers_) && (INCLUDE_ALL_OrgMockitoAnswers || defined(INCLUDE_OrgMockitoAnswers))
#define OrgMockitoAnswers_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_OrgMockitoStubbingAnswer 1
#define INCLUDE_OrgMockitoStubbingAnswer 1
#include "org/mockito/stubbing/Answer.h"

@class IOSObjectArray;
@protocol OrgMockitoInvocationInvocationOnMock;

typedef NS_ENUM(jint, OrgMockitoAnswers_Enum) {
  OrgMockitoAnswers_Enum_RETURNS_DEFAULTS = 0,
  OrgMockitoAnswers_Enum_RETURNS_SMART_NULLS = 1,
  OrgMockitoAnswers_Enum_RETURNS_MOCKS = 2,
  OrgMockitoAnswers_Enum_RETURNS_DEEP_STUBS = 3,
  OrgMockitoAnswers_Enum_CALLS_REAL_METHODS = 4,
  OrgMockitoAnswers_Enum_RETURNS_SELF = 5,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define OrgMockitoAnswers_ORDINAL jint
#else
#define OrgMockitoAnswers_ORDINAL OrgMockitoAnswers_Enum
#endif


@interface OrgMockitoAnswers : JavaLangEnum < OrgMockitoStubbingAnswer >

#pragma mark Public

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

- (id<OrgMockitoStubbingAnswer>)get;

+ (OrgMockitoAnswers *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgMockitoAnswers_Enum)toNSEnum;

- (OrgMockitoAnswers_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(OrgMockitoAnswers)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_values_[];

inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_DEFAULTS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_DEFAULTS)

inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_SMART_NULLS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_SMART_NULLS)

inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_MOCKS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_MOCKS)

inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_DEEP_STUBS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_DEEP_STUBS)

inline OrgMockitoAnswers *OrgMockitoAnswers_get_CALLS_REAL_METHODS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, CALLS_REAL_METHODS)

inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_SELF(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_SELF)

FOUNDATION_EXPORT IOSObjectArray *OrgMockitoAnswers_values(void);

FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_fromOrdinal(OrgMockitoAnswers_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoAnswers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgMockitoAnswers")
