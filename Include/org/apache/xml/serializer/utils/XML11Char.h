//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/utils/XML11Char.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerUtilsXML11Char")
#ifdef RESTRICT_OrgApacheXmlSerializerUtilsXML11Char
#define INCLUDE_ALL_OrgApacheXmlSerializerUtilsXML11Char 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerUtilsXML11Char 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerUtilsXML11Char

#if !defined (OrgApacheXmlSerializerUtilsXML11Char_) && (INCLUDE_ALL_OrgApacheXmlSerializerUtilsXML11Char || defined(INCLUDE_OrgApacheXmlSerializerUtilsXML11Char))
#define OrgApacheXmlSerializerUtilsXML11Char_

@class JavaLangBoolean;
@class JavaLangInteger;

@interface OrgApacheXmlSerializerUtilsXML11Char : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)isXML11ContentWithInt:(jint)c;

+ (jboolean)isXML11InternalEntityContentWithInt:(jint)c;

+ (jboolean)isXML11InvalidWithInt:(jint)c;

+ (jboolean)isXML11NameWithInt:(jint)c;

+ (jboolean)isXML11NameHighSurrogateWithInt:(jint)c;

+ (jboolean)isXML11NameStartWithInt:(jint)c;

+ (jboolean)isXML11NCNameWithInt:(jint)c;

+ (jboolean)isXML11NCNameStartWithInt:(jint)c;

+ (jboolean)isXML11SpaceWithInt:(jint)c;

+ (jboolean)isXML11ValidWithInt:(jint)c;

+ (jboolean)isXML11ValidLiteralWithInt:(jint)c;

+ (jboolean)isXML11ValidNameWithNSString:(NSString *)name;

+ (jboolean)isXML11ValidNCNameWithNSString:(NSString *)ncName;

+ (jboolean)isXML11ValidNmtokenWithNSString:(NSString *)nmtoken;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerUtilsXML11Char)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_VALID(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_VALID 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_VALID, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_SPACE(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_SPACE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_SPACE, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_NAME_START(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_NAME_START 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_NAME_START, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_NAME(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_NAME 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_NAME, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_CONTROL(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_CONTROL 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_CONTROL, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_CONTENT(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_CONTENT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_CONTENT, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_NCNAME_START(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_NCNAME_START 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_NCNAME_START, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_NCNAME(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_NCNAME 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_NCNAME, jint)

inline jint OrgApacheXmlSerializerUtilsXML11Char_get_MASK_XML11_CONTENT_INTERNAL(void);
#define OrgApacheXmlSerializerUtilsXML11Char_MASK_XML11_CONTENT_INTERNAL 48
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlSerializerUtilsXML11Char, MASK_XML11_CONTENT_INTERNAL, jint)

FOUNDATION_EXPORT void OrgApacheXmlSerializerUtilsXML11Char_init(OrgApacheXmlSerializerUtilsXML11Char *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerUtilsXML11Char *new_OrgApacheXmlSerializerUtilsXML11Char_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerUtilsXML11Char *create_OrgApacheXmlSerializerUtilsXML11Char_init(void);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11SpaceWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ValidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11InvalidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ValidLiteralWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ContentWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11InternalEntityContentWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11NameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11NameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11NCNameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11NCNameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11NameHighSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ValidNameWithNSString_(NSString *name);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ValidNCNameWithNSString_(NSString *ncName);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerUtilsXML11Char_isXML11ValidNmtokenWithNSString_(NSString *nmtoken);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerUtilsXML11Char)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerUtilsXML11Char")
