//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/SuballocatedIntVector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsSuballocatedIntVector")
#ifdef RESTRICT_OrgApacheXmlUtilsSuballocatedIntVector
#define INCLUDE_ALL_OrgApacheXmlUtilsSuballocatedIntVector 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsSuballocatedIntVector 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsSuballocatedIntVector

#if !defined (OrgApacheXmlUtilsSuballocatedIntVector_) && (INCLUDE_ALL_OrgApacheXmlUtilsSuballocatedIntVector || defined(INCLUDE_OrgApacheXmlUtilsSuballocatedIntVector))
#define OrgApacheXmlUtilsSuballocatedIntVector_

@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangInteger;

@interface OrgApacheXmlUtilsSuballocatedIntVector : NSObject {
 @public
  jint m_blocksize_;
  jint m_SHIFT_;
  jint m_MASK_;
  jint m_numblocks_;
  IOSObjectArray *m_map_;
  jint m_firstFree_;
  IOSIntArray *m_map0_;
  IOSIntArray *m_buildCache_;
  jint m_buildCacheStartIndex_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)blocksize;

- (instancetype)initWithInt:(jint)blocksize
                    withInt:(jint)numblocks;

- (void)addElementWithInt:(jint)value;

- (jint)elementAtWithInt:(jint)i;

- (IOSObjectArray *)getMap;

- (IOSIntArray *)getMap0;

- (jint)indexOfWithInt:(jint)elem;

- (jint)indexOfWithInt:(jint)elem
               withInt:(jint)index;

- (void)removeAllElements;

- (void)setElementAtWithInt:(jint)value
                    withInt:(jint)at;

- (void)setSizeWithInt:(jint)sz;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsSuballocatedIntVector)

J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsSuballocatedIntVector, m_map_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsSuballocatedIntVector, m_map0_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsSuballocatedIntVector, m_buildCache_, IOSIntArray *)

inline jint OrgApacheXmlUtilsSuballocatedIntVector_get_NUMBLOCKS_DEFAULT(void);
#define OrgApacheXmlUtilsSuballocatedIntVector_NUMBLOCKS_DEFAULT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsSuballocatedIntVector, NUMBLOCKS_DEFAULT, jint)

FOUNDATION_EXPORT void OrgApacheXmlUtilsSuballocatedIntVector_init(OrgApacheXmlUtilsSuballocatedIntVector *self);

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *new_OrgApacheXmlUtilsSuballocatedIntVector_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *create_OrgApacheXmlUtilsSuballocatedIntVector_init(void);

FOUNDATION_EXPORT void OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_withInt_(OrgApacheXmlUtilsSuballocatedIntVector *self, jint blocksize, jint numblocks);

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *new_OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_withInt_(jint blocksize, jint numblocks) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *create_OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_withInt_(jint blocksize, jint numblocks);

FOUNDATION_EXPORT void OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_(OrgApacheXmlUtilsSuballocatedIntVector *self, jint blocksize);

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *new_OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_(jint blocksize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsSuballocatedIntVector *create_OrgApacheXmlUtilsSuballocatedIntVector_initWithInt_(jint blocksize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsSuballocatedIntVector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsSuballocatedIntVector")
