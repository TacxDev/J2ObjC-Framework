//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/dtm/ref/ChunkedIntArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray")
#ifdef RESTRICT_OrgApacheXmlDtmRefChunkedIntArray
#define INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray 0
#else
#define INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray 1
#endif
#undef RESTRICT_OrgApacheXmlDtmRefChunkedIntArray

#if !defined (OrgApacheXmlDtmRefChunkedIntArray_) && (INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray || defined(INCLUDE_OrgApacheXmlDtmRefChunkedIntArray))
#define OrgApacheXmlDtmRefChunkedIntArray_

@class IOSIntArray;
@class JavaLangInteger;
@class OrgApacheXmlDtmRefChunkedIntArray_ChunksVector;

@interface OrgApacheXmlDtmRefChunkedIntArray : NSObject {
 @public
  OrgApacheXmlDtmRefChunkedIntArray_ChunksVector *chunks_;
  IOSIntArray *fastArray_;
  jint lastUsed_;
}

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithInt:(jint)slotsizeArg;

- (jint)appendSlotWithInt:(jint)w0
                  withInt:(jint)w1
                  withInt:(jint)w2
                  withInt:(jint)w3;

- (void)discardLast;

- (jint)readEntryWithInt:(jint)position
                 withInt:(jint)offset;

- (void)readSlotWithInt:(jint)position
           withIntArray:(IOSIntArray *)buffer;

- (jint)slotsUsed;

- (jint)specialFindWithInt:(jint)startPos
                   withInt:(jint)position;

- (void)writeEntryWithInt:(jint)position
                  withInt:(jint)offset
                  withInt:(jint)value;

- (void)writeSlotWithInt:(jint)position
                 withInt:(jint)w0
                 withInt:(jint)w1
                 withInt:(jint)w2
                 withInt:(jint)w3;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefChunkedIntArray)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefChunkedIntArray, chunks_, OrgApacheXmlDtmRefChunkedIntArray_ChunksVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefChunkedIntArray, fastArray_, IOSIntArray *)

inline jint OrgApacheXmlDtmRefChunkedIntArray_get_slotsize(void);
#define OrgApacheXmlDtmRefChunkedIntArray_slotsize 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefChunkedIntArray, slotsize, jint)

inline jint OrgApacheXmlDtmRefChunkedIntArray_get_lowbits(void);
#define OrgApacheXmlDtmRefChunkedIntArray_lowbits 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefChunkedIntArray, lowbits, jint)

inline jint OrgApacheXmlDtmRefChunkedIntArray_get_chunkalloc(void);
#define OrgApacheXmlDtmRefChunkedIntArray_chunkalloc 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefChunkedIntArray, chunkalloc, jint)

inline jint OrgApacheXmlDtmRefChunkedIntArray_get_lowmask(void);
#define OrgApacheXmlDtmRefChunkedIntArray_lowmask 1023
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefChunkedIntArray, lowmask, jint)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefChunkedIntArray_initPackagePrivateWithInt_(OrgApacheXmlDtmRefChunkedIntArray *self, jint slotsizeArg);

FOUNDATION_EXPORT OrgApacheXmlDtmRefChunkedIntArray *new_OrgApacheXmlDtmRefChunkedIntArray_initPackagePrivateWithInt_(jint slotsizeArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefChunkedIntArray *create_OrgApacheXmlDtmRefChunkedIntArray_initPackagePrivateWithInt_(jint slotsizeArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefChunkedIntArray)

#endif

#if !defined (OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_) && (INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray || defined(INCLUDE_OrgApacheXmlDtmRefChunkedIntArray_ChunksVector))
#define OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_

@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangInteger;
@class OrgApacheXmlDtmRefChunkedIntArray;

@interface OrgApacheXmlDtmRefChunkedIntArray_ChunksVector : NSObject {
 @public
  IOSObjectArray *m_map_;
  jint m_mapSize_;
  jint pos_;
}

#pragma mark Package-Private

- (instancetype)initWithOrgApacheXmlDtmRefChunkedIntArray:(OrgApacheXmlDtmRefChunkedIntArray *)outer$;

- (void)addElementWithIntArray:(IOSIntArray *)value;

- (IOSIntArray *)elementAtWithInt:(jint)pos;

- (jint)size;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefChunkedIntArray_ChunksVector)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefChunkedIntArray_ChunksVector, m_map_, IOSObjectArray *)

inline jint OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_get_BLOCKSIZE(void);
#define OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_BLOCKSIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefChunkedIntArray_ChunksVector, BLOCKSIZE, jint)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_initWithOrgApacheXmlDtmRefChunkedIntArray_(OrgApacheXmlDtmRefChunkedIntArray_ChunksVector *self, OrgApacheXmlDtmRefChunkedIntArray *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefChunkedIntArray_ChunksVector *new_OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_initWithOrgApacheXmlDtmRefChunkedIntArray_(OrgApacheXmlDtmRefChunkedIntArray *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefChunkedIntArray_ChunksVector *create_OrgApacheXmlDtmRefChunkedIntArray_ChunksVector_initWithOrgApacheXmlDtmRefChunkedIntArray_(OrgApacheXmlDtmRefChunkedIntArray *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefChunkedIntArray_ChunksVector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlDtmRefChunkedIntArray")
