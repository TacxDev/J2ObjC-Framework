//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/jaxp/XPathImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathJaxpXPathImpl")
#ifdef RESTRICT_OrgApacheXpathJaxpXPathImpl
#define INCLUDE_ALL_OrgApacheXpathJaxpXPathImpl 0
#else
#define INCLUDE_ALL_OrgApacheXpathJaxpXPathImpl 1
#endif
#undef RESTRICT_OrgApacheXpathJaxpXPathImpl

#if !defined (OrgApacheXpathJaxpXPathImpl_) && (INCLUDE_ALL_OrgApacheXpathJaxpXPathImpl || defined(INCLUDE_OrgApacheXpathJaxpXPathImpl))
#define OrgApacheXpathJaxpXPathImpl_

#define RESTRICT_JavaxXmlXpathXPath 1
#define INCLUDE_JavaxXmlXpathXPath 1
#include "javax/xml/xpath/XPath.h"

@class JavaLangBoolean;
@class JavaxXmlNamespaceQName;
@class OrgXmlSaxInputSource;
@protocol JavaxXmlNamespaceNamespaceContext;
@protocol JavaxXmlXpathXPathExpression;
@protocol JavaxXmlXpathXPathFunctionResolver;
@protocol JavaxXmlXpathXPathVariableResolver;

@interface OrgApacheXpathJaxpXPathImpl : NSObject < JavaxXmlXpathXPath >

#pragma mark Public

- (id<JavaxXmlXpathXPathExpression>)compileWithNSString:(NSString *)expression;

- (NSString *)evaluateWithNSString:(NSString *)expression
          withOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source;

- (id)evaluateWithNSString:(NSString *)expression
  withOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source
withJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)returnType;

- (NSString *)evaluateWithNSString:(NSString *)expression
                            withId:(id)item;

- (id)evaluateWithNSString:(NSString *)expression
                    withId:(id)item
withJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)returnType;

- (id<JavaxXmlNamespaceNamespaceContext>)getNamespaceContext;

- (id<JavaxXmlXpathXPathFunctionResolver>)getXPathFunctionResolver;

- (id<JavaxXmlXpathXPathVariableResolver>)getXPathVariableResolver;

- (void)reset;

- (void)setNamespaceContextWithJavaxXmlNamespaceNamespaceContext:(id<JavaxXmlNamespaceNamespaceContext>)nsContext;

- (void)setXPathFunctionResolverWithJavaxXmlXpathXPathFunctionResolver:(id<JavaxXmlXpathXPathFunctionResolver>)resolver;

- (void)setXPathVariableResolverWithJavaxXmlXpathXPathVariableResolver:(id<JavaxXmlXpathXPathVariableResolver>)resolver;

#pragma mark Package-Private

- (instancetype)initWithJavaxXmlXpathXPathVariableResolver:(id<JavaxXmlXpathXPathVariableResolver>)vr
                    withJavaxXmlXpathXPathFunctionResolver:(id<JavaxXmlXpathXPathFunctionResolver>)fr;

- (instancetype)initWithJavaxXmlXpathXPathVariableResolver:(id<JavaxXmlXpathXPathVariableResolver>)vr
                    withJavaxXmlXpathXPathFunctionResolver:(id<JavaxXmlXpathXPathFunctionResolver>)fr
                                               withBoolean:(jboolean)featureSecureProcessing;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathJaxpXPathImpl)

FOUNDATION_EXPORT void OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_(OrgApacheXpathJaxpXPathImpl *self, id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr);

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathImpl *new_OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_(id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathImpl *create_OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_(id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr);

FOUNDATION_EXPORT void OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_withBoolean_(OrgApacheXpathJaxpXPathImpl *self, id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr, jboolean featureSecureProcessing);

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathImpl *new_OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_withBoolean_(id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr, jboolean featureSecureProcessing) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathImpl *create_OrgApacheXpathJaxpXPathImpl_initWithJavaxXmlXpathXPathVariableResolver_withJavaxXmlXpathXPathFunctionResolver_withBoolean_(id<JavaxXmlXpathXPathVariableResolver> vr, id<JavaxXmlXpathXPathFunctionResolver> fr, jboolean featureSecureProcessing);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathJaxpXPathImpl)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathJaxpXPathImpl")
