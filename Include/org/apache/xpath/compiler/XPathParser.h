//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/compiler/XPathParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathCompilerXPathParser")
#ifdef RESTRICT_OrgApacheXpathCompilerXPathParser
#define INCLUDE_ALL_OrgApacheXpathCompilerXPathParser 0
#else
#define INCLUDE_ALL_OrgApacheXpathCompilerXPathParser 1
#endif
#undef RESTRICT_OrgApacheXpathCompilerXPathParser

#if !defined (OrgApacheXpathCompilerXPathParser_) && (INCLUDE_ALL_OrgApacheXpathCompilerXPathParser || defined(INCLUDE_OrgApacheXpathCompilerXPathParser))
#define OrgApacheXpathCompilerXPathParser_

@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangCharacter;
@class JavaLangInteger;
@class OrgApacheXpathCompilerCompiler;
@protocol JavaxXmlTransformErrorListener;
@protocol JavaxXmlTransformSourceLocator;
@protocol OrgApacheXmlUtilsPrefixResolver;

@interface OrgApacheXpathCompilerXPathParser : NSObject {
 @public
  NSString *m_token_;
  jchar m_tokenChar_;
  jint m_queueMark_;
  id<OrgApacheXmlUtilsPrefixResolver> m_namespaceContext_;
  id<JavaxXmlTransformSourceLocator> m_sourceLocator_;
}

#pragma mark Public

- (instancetype)initWithJavaxXmlTransformErrorListener:(id<JavaxXmlTransformErrorListener>)errorListener
                    withJavaxXmlTransformSourceLocator:(id<JavaxXmlTransformSourceLocator>)sourceLocator;

- (id<JavaxXmlTransformErrorListener>)getErrorListener;

- (void)initMatchPatternWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)compiler
                                              withNSString:(NSString *)expression
                       withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)namespaceContext OBJC_METHOD_FAMILY_NONE;

- (void)initXPathWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)compiler
                                       withNSString:(NSString *)expression
                withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)namespaceContext OBJC_METHOD_FAMILY_NONE;

- (void)setErrorHandlerWithJavaxXmlTransformErrorListener:(id<JavaxXmlTransformErrorListener>)handler;

#pragma mark Protected

- (jboolean)AbbreviatedNodeTestStepWithBoolean:(jboolean)isLeadingSlashPermitted;

- (jint)AdditiveExprWithInt:(jint)addPos;

- (void)AndExpr;

- (void)Argument;

- (jint)AxisName;

- (void)Basis;

- (void)BooleanExpr;

- (NSString *)dumpRemainingTokenQueue;

- (jint)EqualityExprWithInt:(jint)addPos;

- (void)Expr;

- (jint)FilterExpr;

- (jboolean)FunctionCall;

- (void)IdKeyPattern;

- (void)Literal;

- (void)LocationPath;

- (void)LocationPathPattern;

- (jint)MultiplicativeExprWithInt:(jint)addPos;

- (void)NCName;

- (void)NodeTestWithInt:(jint)axesType;

- (void)Number;

- (void)NumberExpr;

- (void)OrExpr;

- (void)PathExpr;

- (void)Pattern;

- (void)Predicate;

- (void)PredicateExpr;

- (jboolean)PrimaryExpr;

- (void)QName;

- (jint)RelationalExprWithInt:(jint)addPos;

- (jboolean)RelativeLocationPath;

- (void)RelativePathPattern;

- (jboolean)Step;

- (jboolean)StepPatternWithBoolean:(jboolean)isLeadingSlashPermitted;

- (void)StringExpr;

- (void)UnaryExpr;

- (void)UnionExpr;

#pragma mark Package-Private

- (void)appendOpWithInt:(jint)length
                withInt:(jint)op;

- (void)errorWithNSString:(NSString *)msg
        withNSObjectArray:(IOSObjectArray *)args;

- (void)errorForDOM3WithNSString:(NSString *)msg
               withNSObjectArray:(IOSObjectArray *)args;

- (jint)getFunctionTokenWithNSString:(NSString *)key;

- (void)insertOpWithInt:(jint)pos
                withInt:(jint)length
                withInt:(jint)op;

- (jboolean)lookaheadWithChar:(jchar)c
                      withInt:(jint)n;

- (jboolean)tokenIsWithChar:(jchar)c;

- (jboolean)tokenIsWithNSString:(NSString *)s;

- (void)warnWithNSString:(NSString *)msg
       withNSObjectArray:(IOSObjectArray *)args;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathCompilerXPathParser)

J2OBJC_FIELD_SETTER(OrgApacheXpathCompilerXPathParser, m_token_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheXpathCompilerXPathParser, m_namespaceContext_, id<OrgApacheXmlUtilsPrefixResolver>)
J2OBJC_FIELD_SETTER(OrgApacheXpathCompilerXPathParser, m_sourceLocator_, id<JavaxXmlTransformSourceLocator>)

inline NSString *OrgApacheXpathCompilerXPathParser_get_CONTINUE_AFTER_FATAL_ERROR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXpathCompilerXPathParser_CONTINUE_AFTER_FATAL_ERROR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXpathCompilerXPathParser, CONTINUE_AFTER_FATAL_ERROR, NSString *)

inline jint OrgApacheXpathCompilerXPathParser_get_FILTER_MATCH_FAILED(void);
#define OrgApacheXpathCompilerXPathParser_FILTER_MATCH_FAILED 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerXPathParser, FILTER_MATCH_FAILED, jint)

inline jint OrgApacheXpathCompilerXPathParser_get_FILTER_MATCH_PRIMARY(void);
#define OrgApacheXpathCompilerXPathParser_FILTER_MATCH_PRIMARY 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerXPathParser, FILTER_MATCH_PRIMARY, jint)

inline jint OrgApacheXpathCompilerXPathParser_get_FILTER_MATCH_PREDICATES(void);
#define OrgApacheXpathCompilerXPathParser_FILTER_MATCH_PREDICATES 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerXPathParser, FILTER_MATCH_PREDICATES, jint)

FOUNDATION_EXPORT void OrgApacheXpathCompilerXPathParser_initWithJavaxXmlTransformErrorListener_withJavaxXmlTransformSourceLocator_(OrgApacheXpathCompilerXPathParser *self, id<JavaxXmlTransformErrorListener> errorListener, id<JavaxXmlTransformSourceLocator> sourceLocator);

FOUNDATION_EXPORT OrgApacheXpathCompilerXPathParser *new_OrgApacheXpathCompilerXPathParser_initWithJavaxXmlTransformErrorListener_withJavaxXmlTransformSourceLocator_(id<JavaxXmlTransformErrorListener> errorListener, id<JavaxXmlTransformSourceLocator> sourceLocator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathCompilerXPathParser *create_OrgApacheXpathCompilerXPathParser_initWithJavaxXmlTransformErrorListener_withJavaxXmlTransformSourceLocator_(id<JavaxXmlTransformErrorListener> errorListener, id<JavaxXmlTransformSourceLocator> sourceLocator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathCompilerXPathParser)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathCompilerXPathParser")
