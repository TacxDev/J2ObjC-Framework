//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/axes/WalkingIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator")
#ifdef RESTRICT_OrgApacheXpathAxesWalkingIterator
#define INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator 0
#else
#define INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator 1
#endif
#undef RESTRICT_OrgApacheXpathAxesWalkingIterator

#if !defined (OrgApacheXpathAxesWalkingIterator_) && (INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator || defined(INCLUDE_OrgApacheXpathAxesWalkingIterator))
#define OrgApacheXpathAxesWalkingIterator_

#define RESTRICT_OrgApacheXpathAxesLocPathIterator 1
#define INCLUDE_OrgApacheXpathAxesLocPathIterator 1
#include "org/apache/xpath/axes/LocPathIterator.h"

#define RESTRICT_OrgApacheXpathExpressionOwner 1
#define INCLUDE_OrgApacheXpathExpressionOwner 1
#include "org/apache/xpath/ExpressionOwner.h"

@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaUtilVector;
@class OrgApacheXpathAxesAxesWalker;
@class OrgApacheXpathCompilerCompiler;
@class OrgApacheXpathExpression;
@class OrgApacheXpathXPathVisitor;
@protocol OrgApacheXmlUtilsPrefixResolver;

@interface OrgApacheXpathAxesWalkingIterator : OrgApacheXpathAxesLocPathIterator < OrgApacheXpathExpressionOwner > {
 @public
  OrgApacheXpathAxesAxesWalker *m_lastUsedWalker_;
  OrgApacheXpathAxesAxesWalker *m_firstWalker_;
}

#pragma mark Public

- (instancetype)initWithOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)nscontext;

- (void)callVisitorsWithOrgApacheXpathExpressionOwner:(id<OrgApacheXpathExpressionOwner>)owner
                       withOrgApacheXpathXPathVisitor:(OrgApacheXpathXPathVisitor *)visitor;

- (id)java_clone;

- (jboolean)deepEqualsWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)expr;

- (void)detach;

- (void)fixupVariablesWithJavaUtilVector:(JavaUtilVector *)vars
                                 withInt:(jint)globalsSize;

- (jint)getAnalysisBits;

- (OrgApacheXpathExpression *)getExpression;

- (OrgApacheXpathAxesAxesWalker *)getFirstWalker;

- (OrgApacheXpathAxesAxesWalker *)getLastUsedWalker;

- (jint)nextNode;

- (void)reset;

- (void)setExpressionWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)exp;

- (void)setFirstWalkerWithOrgApacheXpathAxesAxesWalker:(OrgApacheXpathAxesAxesWalker *)walker;

- (void)setLastUsedWalkerWithOrgApacheXpathAxesAxesWalker:(OrgApacheXpathAxesAxesWalker *)walker;

- (void)setRootWithInt:(jint)context
                withId:(id)environment;

#pragma mark Package-Private

- (instancetype)initWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)compiler
                                               withInt:(jint)opPos
                                               withInt:(jint)analysis
                                           withBoolean:(jboolean)shouldLoadWalkers;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)arg0
                                               withInt:(jint)arg1
                                               withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathAxesWalkingIterator)

J2OBJC_FIELD_SETTER(OrgApacheXpathAxesWalkingIterator, m_lastUsedWalker_, OrgApacheXpathAxesAxesWalker *)
J2OBJC_FIELD_SETTER(OrgApacheXpathAxesWalkingIterator, m_firstWalker_, OrgApacheXpathAxesAxesWalker *)

inline jlong OrgApacheXpathAxesWalkingIterator_get_serialVersionUID(void);
#define OrgApacheXpathAxesWalkingIterator_serialVersionUID 9110225941815665906LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathAxesWalkingIterator, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathAxesWalkingIterator *self, OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers);

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *new_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *create_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers);

FOUNDATION_EXPORT void OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(OrgApacheXpathAxesWalkingIterator *self, id<OrgApacheXmlUtilsPrefixResolver> nscontext);

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *new_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(id<OrgApacheXmlUtilsPrefixResolver> nscontext) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *create_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(id<OrgApacheXmlUtilsPrefixResolver> nscontext);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathAxesWalkingIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator")
