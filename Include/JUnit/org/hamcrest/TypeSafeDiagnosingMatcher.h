//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/junit/build_result/java/org/hamcrest/TypeSafeDiagnosingMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgHamcrestTypeSafeDiagnosingMatcher")
#ifdef RESTRICT_OrgHamcrestTypeSafeDiagnosingMatcher
#define INCLUDE_ALL_OrgHamcrestTypeSafeDiagnosingMatcher 0
#else
#define INCLUDE_ALL_OrgHamcrestTypeSafeDiagnosingMatcher 1
#endif
#undef RESTRICT_OrgHamcrestTypeSafeDiagnosingMatcher

#if !defined (OrgHamcrestTypeSafeDiagnosingMatcher_) && (INCLUDE_ALL_OrgHamcrestTypeSafeDiagnosingMatcher || defined(INCLUDE_OrgHamcrestTypeSafeDiagnosingMatcher))
#define OrgHamcrestTypeSafeDiagnosingMatcher_

#define RESTRICT_OrgHamcrestBaseMatcher 1
#define INCLUDE_OrgHamcrestBaseMatcher 1
#include "org/hamcrest/BaseMatcher.h"

@class IOSClass;
@class JavaLangBoolean;
@class OrgHamcrestInternalReflectiveTypeFinder;
@protocol OrgHamcrestDescription;

@interface OrgHamcrestTypeSafeDiagnosingMatcher : OrgHamcrestBaseMatcher

#pragma mark Public

- (void)describeMismatchWithId:(id)item
    withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription;

- (jboolean)matchesWithId:(id)item;

#pragma mark Protected

- (instancetype)init;

- (instancetype)initWithIOSClass:(IOSClass *)expectedType;

- (instancetype)initWithOrgHamcrestInternalReflectiveTypeFinder:(OrgHamcrestInternalReflectiveTypeFinder *)typeFinder;

- (jboolean)matchesSafelyWithId:(id)item
     withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription;

@end

J2OBJC_STATIC_INIT(OrgHamcrestTypeSafeDiagnosingMatcher)

FOUNDATION_EXPORT void OrgHamcrestTypeSafeDiagnosingMatcher_initWithIOSClass_(OrgHamcrestTypeSafeDiagnosingMatcher *self, IOSClass *expectedType);

FOUNDATION_EXPORT void OrgHamcrestTypeSafeDiagnosingMatcher_initWithOrgHamcrestInternalReflectiveTypeFinder_(OrgHamcrestTypeSafeDiagnosingMatcher *self, OrgHamcrestInternalReflectiveTypeFinder *typeFinder);

FOUNDATION_EXPORT void OrgHamcrestTypeSafeDiagnosingMatcher_init(OrgHamcrestTypeSafeDiagnosingMatcher *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgHamcrestTypeSafeDiagnosingMatcher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgHamcrestTypeSafeDiagnosingMatcher")
