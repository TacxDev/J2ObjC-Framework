//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/build_result/java/com/google/common/io/CharStreams.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoCharStreams")
#ifdef RESTRICT_ComGoogleCommonIoCharStreams
#define INCLUDE_ALL_ComGoogleCommonIoCharStreams 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoCharStreams 1
#endif
#undef RESTRICT_ComGoogleCommonIoCharStreams

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoCharStreams_) && (INCLUDE_ALL_ComGoogleCommonIoCharStreams || defined(INCLUDE_ComGoogleCommonIoCharStreams))
#define ComGoogleCommonIoCharStreams_

@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangLong;
@class JavaLangStringBuilder;
@class JavaNioCharBuffer;
@protocol ComGoogleCommonIoLineProcessor;
@protocol JavaLangAppendable;
@protocol JavaLangReadable;
@protocol JavaUtilList;

@interface ComGoogleCommonIoCharStreams : NSObject

#pragma mark Public

+ (JavaIoWriter *)asWriterWithJavaLangAppendable:(id<JavaLangAppendable>)target;

+ (jlong)copy__WithJavaLangReadable:(id<JavaLangReadable>)from
             withJavaLangAppendable:(id<JavaLangAppendable>)to OBJC_METHOD_FAMILY_NONE;

+ (jlong)exhaustWithJavaLangReadable:(id<JavaLangReadable>)readable;

+ (JavaIoWriter *)nullWriter;

+ (id<JavaUtilList>)readLinesWithJavaLangReadable:(id<JavaLangReadable>)r;

+ (id)readLinesWithJavaLangReadable:(id<JavaLangReadable>)readable
 withComGoogleCommonIoLineProcessor:(id<ComGoogleCommonIoLineProcessor>)processor;

+ (void)skipFullyWithJavaIoReader:(JavaIoReader *)reader
                         withLong:(jlong)n;

+ (NSString *)toStringWithJavaLangReadable:(id<JavaLangReadable>)r;

#pragma mark Package-Private

+ (jlong)copyReaderToBuilderWithJavaIoReader:(JavaIoReader *)from
                   withJavaLangStringBuilder:(JavaLangStringBuilder *)to OBJC_METHOD_FAMILY_NONE;

+ (jlong)copyReaderToWriterWithJavaIoReader:(JavaIoReader *)from
                           withJavaIoWriter:(JavaIoWriter *)to OBJC_METHOD_FAMILY_NONE;

+ (JavaNioCharBuffer *)createBuffer;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoCharStreams)

FOUNDATION_EXPORT JavaNioCharBuffer *ComGoogleCommonIoCharStreams_createBuffer(void);

FOUNDATION_EXPORT jlong ComGoogleCommonIoCharStreams_copy__WithJavaLangReadable_withJavaLangAppendable_(id<JavaLangReadable> from, id<JavaLangAppendable> to);

FOUNDATION_EXPORT jlong ComGoogleCommonIoCharStreams_copyReaderToBuilderWithJavaIoReader_withJavaLangStringBuilder_(JavaIoReader *from, JavaLangStringBuilder *to);

FOUNDATION_EXPORT jlong ComGoogleCommonIoCharStreams_copyReaderToWriterWithJavaIoReader_withJavaIoWriter_(JavaIoReader *from, JavaIoWriter *to);

FOUNDATION_EXPORT NSString *ComGoogleCommonIoCharStreams_toStringWithJavaLangReadable_(id<JavaLangReadable> r);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonIoCharStreams_readLinesWithJavaLangReadable_(id<JavaLangReadable> r);

FOUNDATION_EXPORT id ComGoogleCommonIoCharStreams_readLinesWithJavaLangReadable_withComGoogleCommonIoLineProcessor_(id<JavaLangReadable> readable, id<ComGoogleCommonIoLineProcessor> processor);

FOUNDATION_EXPORT jlong ComGoogleCommonIoCharStreams_exhaustWithJavaLangReadable_(id<JavaLangReadable> readable);

FOUNDATION_EXPORT void ComGoogleCommonIoCharStreams_skipFullyWithJavaIoReader_withLong_(JavaIoReader *reader, jlong n);

FOUNDATION_EXPORT JavaIoWriter *ComGoogleCommonIoCharStreams_nullWriter(void);

FOUNDATION_EXPORT JavaIoWriter *ComGoogleCommonIoCharStreams_asWriterWithJavaLangAppendable_(id<JavaLangAppendable> target);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoCharStreams)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoCharStreams")
