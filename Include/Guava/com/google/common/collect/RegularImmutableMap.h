//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/build_result/java/com/google/common/collect/RegularImmutableMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap")
#ifdef RESTRICT_ComGoogleCommonCollectRegularImmutableMap
#define INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectRegularImmutableMap

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectRegularImmutableMap_) && (INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap || defined(INCLUDE_ComGoogleCommonCollectRegularImmutableMap))
#define ComGoogleCommonCollectRegularImmutableMap_

#define RESTRICT_ComGoogleCommonCollectImmutableMap 1
#define INCLUDE_ComGoogleCommonCollectImmutableMap 1
#include "com/google/common/collect/ImmutableMap.h"

@class ComGoogleCommonCollectImmutableCollection;
@class ComGoogleCommonCollectImmutableMapEntry;
@class ComGoogleCommonCollectImmutableSet;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangDouble;
@class JavaLangInteger;
@class JavaUtilIdentityHashMap;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilMap_Entry;

@interface ComGoogleCommonCollectRegularImmutableMap : ComGoogleCommonCollectImmutableMap {
 @public
  IOSObjectArray *entries_;
}

#pragma mark Public

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

- (id)getWithId:(id)key;

- (jint)size;

#pragma mark Package-Private

+ (ComGoogleCommonCollectImmutableMapEntry *)checkNoConflictInKeyBucketWithId:(id)key
                                                                       withId:(id)newValue
                                  withComGoogleCommonCollectImmutableMapEntry:(ComGoogleCommonCollectImmutableMapEntry *)keyBucketHead
                                                                  withBoolean:(jboolean)throwIfDuplicateKeys;

- (ComGoogleCommonCollectImmutableSet *)createEntrySet;

- (ComGoogleCommonCollectImmutableSet *)createKeySet;

- (ComGoogleCommonCollectImmutableCollection *)createValues;

+ (ComGoogleCommonCollectImmutableMap *)fromEntriesWithJavaUtilMap_EntryArray:(IOSObjectArray *)entries;

+ (ComGoogleCommonCollectImmutableMap *)fromEntryArrayWithInt:(jint)n
                                   withJavaUtilMap_EntryArray:(IOSObjectArray *)entryArray
                                                  withBoolean:(jboolean)throwIfDuplicateKeys;

+ (id)getWithId:(id)key
withComGoogleCommonCollectImmutableMapEntryArray:(IOSObjectArray *)keyTable
        withInt:(jint)mask;

- (jboolean)isPartialView;

+ (ComGoogleCommonCollectImmutableMapEntry *)makeImmutableWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_;

+ (ComGoogleCommonCollectImmutableMapEntry *)makeImmutableWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_
                                                                         withId:(id)key
                                                                         withId:(id)value;

+ (IOSObjectArray *)removeDuplicatesWithJavaUtilMap_EntryArray:(IOSObjectArray *)entries
                                                       withInt:(jint)n
                                                       withInt:(jint)newN
                                   withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)duplicates;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectRegularImmutableMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectRegularImmutableMap, entries_, IOSObjectArray *)

inline ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectRegularImmutableMap, EMPTY, ComGoogleCommonCollectImmutableMap *)

inline jdouble ComGoogleCommonCollectRegularImmutableMap_get_MAX_LOAD_FACTOR(void);
#define ComGoogleCommonCollectRegularImmutableMap_MAX_LOAD_FACTOR 1.2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, MAX_LOAD_FACTOR, jdouble)

inline jdouble ComGoogleCommonCollectRegularImmutableMap_get_HASH_FLOODING_FPP(void);
#define ComGoogleCommonCollectRegularImmutableMap_HASH_FLOODING_FPP 0.001
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, HASH_FLOODING_FPP, jdouble)

inline jint ComGoogleCommonCollectRegularImmutableMap_get_MAX_HASH_BUCKET_LENGTH(void);
#define ComGoogleCommonCollectRegularImmutableMap_MAX_HASH_BUCKET_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, MAX_HASH_BUCKET_LENGTH, jint)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_fromEntriesWithJavaUtilMap_EntryArray_(IOSObjectArray *entries);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_fromEntryArrayWithInt_withJavaUtilMap_EntryArray_withBoolean_(jint n, IOSObjectArray *entryArray, jboolean throwIfDuplicateKeys);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectRegularImmutableMap_removeDuplicatesWithJavaUtilMap_EntryArray_withInt_withInt_withJavaUtilIdentityHashMap_(IOSObjectArray *entries, jint n, jint newN, JavaUtilIdentityHashMap *duplicates);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMapEntry *ComGoogleCommonCollectRegularImmutableMap_makeImmutableWithJavaUtilMap_Entry_withId_withId_(id<JavaUtilMap_Entry> entry_, id key, id value);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMapEntry *ComGoogleCommonCollectRegularImmutableMap_makeImmutableWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMapEntry *ComGoogleCommonCollectRegularImmutableMap_checkNoConflictInKeyBucketWithId_withId_withComGoogleCommonCollectImmutableMapEntry_withBoolean_(id key, id newValue, ComGoogleCommonCollectImmutableMapEntry *keyBucketHead, jboolean throwIfDuplicateKeys);

FOUNDATION_EXPORT id ComGoogleCommonCollectRegularImmutableMap_getWithId_withComGoogleCommonCollectImmutableMapEntryArray_withInt_(id key, IOSObjectArray *keyTable, jint mask);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRegularImmutableMap)

#endif

#if !defined (ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException_) && (INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap || defined(INCLUDE_ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException))
#define ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangBoolean;
@class JavaLangThrowable;

@interface ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException : JavaLangException

#pragma mark Package-Private

- (instancetype)init;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException)

FOUNDATION_EXPORT void ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException_init(ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException *self);

FOUNDATION_EXPORT ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException *new_ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException *create_ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRegularImmutableMap_BucketOverflowException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap")
