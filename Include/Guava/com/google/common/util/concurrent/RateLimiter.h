//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/build_result/java/com/google/common/util/concurrent/RateLimiter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentRateLimiter
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentRateLimiter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentRateLimiter_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter || defined(INCLUDE_ComGoogleCommonUtilConcurrentRateLimiter))
#define ComGoogleCommonUtilConcurrentRateLimiter_

@class ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;
@class JavaLangBoolean;
@class JavaLangDouble;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaTimeDuration;
@class JavaUtilConcurrentTimeUnit;

@interface ComGoogleCommonUtilConcurrentRateLimiter : NSObject

#pragma mark Public

- (jdouble)acquire;

- (jdouble)acquireWithInt:(jint)permits;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                          withJavaTimeDuration:(JavaTimeDuration *)warmupPeriod;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                                      withLong:(jlong)warmupPeriod
                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jdouble)getRate;

- (void)setRateWithDouble:(jdouble)permitsPerSecond;

- (NSString *)description;

- (jboolean)tryAcquire;

- (jboolean)tryAcquireWithJavaTimeDuration:(JavaTimeDuration *)timeout;

- (jboolean)tryAcquireWithInt:(jint)permits;

- (jboolean)tryAcquireWithInt:(jint)permits
         withJavaTimeDuration:(JavaTimeDuration *)timeout;

- (jboolean)tryAcquireWithInt:(jint)permits
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)tryAcquireWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Package-Private

- (instancetype)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                                      withLong:(jlong)warmupPeriod
                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                    withDouble:(jdouble)coldFactor
withComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch;

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
withComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch;

- (jdouble)doGetRate;

- (void)doSetRateWithDouble:(jdouble)permitsPerSecond
                   withLong:(jlong)nowMicros;

- (jlong)queryEarliestAvailableWithLong:(jlong)nowMicros;

- (jlong)reserveWithInt:(jint)permits;

- (jlong)reserveAndGetWaitLengthWithInt:(jint)permits
                               withLong:(jlong)nowMicros;

- (jlong)reserveEarliestAvailableWithInt:(jint)permits
                                withLong:(jlong)nowMicros;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_(jdouble permitsPerSecond);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(jdouble permitsPerSecond, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withJavaTimeDuration_(jdouble permitsPerSecond, JavaTimeDuration *warmupPeriod);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnit_(jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnit_withDouble_withComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnit *unit, jdouble coldFactor, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentRateLimiter_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(ComGoogleCommonUtilConcurrentRateLimiter *self, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter)

#endif

#if !defined (ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter || defined(INCLUDE_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch))
#define ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_

@class JavaLangLong;

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch : NSObject

#pragma mark Public

+ (ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)createFromSystemTimer;

#pragma mark Protected

- (instancetype)init;

- (jlong)readMicros;

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *self);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentRateLimiter")
