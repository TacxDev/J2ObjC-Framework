//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/build_result/java/com/google/common/util/concurrent/Uninterruptibles.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentUninterruptibles")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentUninterruptibles
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentUninterruptibles 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentUninterruptibles 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentUninterruptibles

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentUninterruptibles_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentUninterruptibles || defined(INCLUDE_ComGoogleCommonUtilConcurrentUninterruptibles))
#define ComGoogleCommonUtilConcurrentUninterruptibles_

@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangThread;
@class JavaTimeDuration;
@class JavaUtilConcurrentCountDownLatch;
@class JavaUtilConcurrentSemaphore;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentBlockingQueue;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilConcurrentLocksCondition;
@protocol JavaUtilConcurrentLocksLock;

@interface ComGoogleCommonUtilConcurrentUninterruptibles : NSObject

#pragma mark Public

+ (void)awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;

+ (jboolean)awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor
                                                            withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor
                                                                        withLong:(jlong)timeout
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (jboolean)awaitUninterruptiblyWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition
                                                withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)awaitUninterruptiblyWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition
                                                            withLong:(jlong)timeout
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (void)awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch;

+ (jboolean)awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)latch
                                                            withLong:(jlong)timeout
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (id)getUninterruptiblyWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

+ (id)getUninterruptiblyWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (id)getUninterruptiblyWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (void)joinUninterruptiblyWithJavaLangThread:(JavaLangThread *)toJoin;

+ (void)joinUninterruptiblyWithJavaLangThread:(JavaLangThread *)toJoin
                         withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (void)joinUninterruptiblyWithJavaLangThread:(JavaLangThread *)toJoin
                                     withLong:(jlong)timeout
               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (void)putUninterruptiblyWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue
                                                       withId:(id)element;

+ (void)sleepUninterruptiblyWithJavaTimeDuration:(JavaTimeDuration *)sleepFor;

+ (void)sleepUninterruptiblyWithLong:(jlong)sleepFor
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (id)takeUninterruptiblyWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue;

+ (jboolean)tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore:(JavaUtilConcurrentSemaphore *)semaphore
                                                withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore:(JavaUtilConcurrentSemaphore *)semaphore
                                                             withInt:(jint)permits
                                                withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore:(JavaUtilConcurrentSemaphore *)semaphore
                                                             withInt:(jint)permits
                                                            withLong:(jlong)timeout
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (jboolean)tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore:(JavaUtilConcurrentSemaphore *)semaphore
                                                            withLong:(jlong)timeout
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (jboolean)tryLockUninterruptiblyWithJavaUtilConcurrentLocksLock:(id<JavaUtilConcurrentLocksLock>)lock
                                             withJavaTimeDuration:(JavaTimeDuration *)timeout;

+ (jboolean)tryLockUninterruptiblyWithJavaUtilConcurrentLocksLock:(id<JavaUtilConcurrentLocksLock>)lock
                                                         withLong:(jlong)timeout
                                   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentUninterruptibles)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch_(JavaUtilConcurrentCountDownLatch *latch);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch_withJavaTimeDuration_(JavaUtilConcurrentCountDownLatch *latch, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentCountDownLatch_withLong_withJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentCountDownLatch *latch, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentLocksCondition_withJavaTimeDuration_(id<JavaUtilConcurrentLocksCondition> condition, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitUninterruptiblyWithJavaUtilConcurrentLocksCondition_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentLocksCondition> condition, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_joinUninterruptiblyWithJavaLangThread_(JavaLangThread *toJoin);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_joinUninterruptiblyWithJavaLangThread_withJavaTimeDuration_(JavaLangThread *toJoin, JavaTimeDuration *timeout);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_joinUninterruptiblyWithJavaLangThread_withLong_withJavaUtilConcurrentTimeUnit_(JavaLangThread *toJoin, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentUninterruptibles_getUninterruptiblyWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentUninterruptibles_getUninterruptiblyWithJavaUtilConcurrentFuture_withJavaTimeDuration_(id<JavaUtilConcurrentFuture> future, JavaTimeDuration *timeout);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentUninterruptibles_getUninterruptiblyWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT id ComGoogleCommonUtilConcurrentUninterruptibles_takeUninterruptiblyWithJavaUtilConcurrentBlockingQueue_(id<JavaUtilConcurrentBlockingQueue> queue);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_putUninterruptiblyWithJavaUtilConcurrentBlockingQueue_withId_(id<JavaUtilConcurrentBlockingQueue> queue, id element);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_sleepUninterruptiblyWithJavaTimeDuration_(JavaTimeDuration *sleepFor);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_sleepUninterruptiblyWithLong_withJavaUtilConcurrentTimeUnit_(jlong sleepFor, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore_withJavaTimeDuration_(JavaUtilConcurrentSemaphore *semaphore, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore_withLong_withJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentSemaphore *semaphore, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore_withInt_withJavaTimeDuration_(JavaUtilConcurrentSemaphore *semaphore, jint permits, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryAcquireUninterruptiblyWithJavaUtilConcurrentSemaphore_withInt_withLong_withJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentSemaphore *semaphore, jint permits, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryLockUninterruptiblyWithJavaUtilConcurrentLocksLock_withJavaTimeDuration_(id<JavaUtilConcurrentLocksLock> lock, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_tryLockUninterruptiblyWithJavaUtilConcurrentLocksLock_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentLocksLock> lock, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUninterruptibles_awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executor);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService_withJavaTimeDuration_(id<JavaUtilConcurrentExecutorService> executor, JavaTimeDuration *timeout);

FOUNDATION_EXPORT jboolean ComGoogleCommonUtilConcurrentUninterruptibles_awaitTerminationUninterruptiblyWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> executor, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentUninterruptibles)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentUninterruptibles")
