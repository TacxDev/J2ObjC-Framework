//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/android/build_result/java/com/google/common/util/concurrent/ExecutionSequencer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentExecutionSequencer
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentExecutionSequencer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentExecutionSequencer_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer || defined(INCLUDE_ComGoogleCommonUtilConcurrentExecutionSequencer))
#define ComGoogleCommonUtilConcurrentExecutionSequencer_

@protocol ComGoogleCommonUtilConcurrentAsyncCallable;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentExecutor;

@interface ComGoogleCommonUtilConcurrentExecutionSequencer : NSObject

#pragma mark Public

+ (ComGoogleCommonUtilConcurrentExecutionSequencer *)create;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                           withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitAsyncWithComGoogleCommonUtilConcurrentAsyncCallable:(id<ComGoogleCommonUtilConcurrentAsyncCallable>)callable
                                                                                withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentExecutionSequencer)

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentExecutionSequencer *ComGoogleCommonUtilConcurrentExecutionSequencer_create(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentExecutionSequencer)

#endif

#if !defined (ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer || defined(INCLUDE_ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState))
#define ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(jint, ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum) {
  ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum_NOT_RUN = 0,
  ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum_CANCELLED = 1,
  ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum_STARTED = 2,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_ORDINAL jint
#else
#define ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_ORDINAL ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum
#endif


@interface ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState : JavaLangEnum

#pragma mark Public

+ (ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_Enum)toNSEnum;

- (ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_values_[];

inline ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_get_NOT_RUN(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState, NOT_RUN)

inline ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_get_CANCELLED(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState, CANCELLED)

inline ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_get_STARTED(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState, STARTED)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_values(void);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState *ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_fromOrdinal(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentExecutionSequencer_RunningState)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentExecutionSequencer")
