//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/nestseraualia/devel/j2objc-aleks/guava/android/build_result/java/com/google/common/util/concurrent/SequentialExecutor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentSequentialExecutor
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentSequentialExecutor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentSequentialExecutor_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor || defined(INCLUDE_ComGoogleCommonUtilConcurrentSequentialExecutor))
#define ComGoogleCommonUtilConcurrentSequentialExecutor_

#define RESTRICT_JavaUtilConcurrentExecutor 1
#define INCLUDE_JavaUtilConcurrentExecutor 1
#include "java/util/concurrent/Executor.h"

@protocol JavaLangRunnable;

@interface ComGoogleCommonUtilConcurrentSequentialExecutor : NSObject < JavaUtilConcurrentExecutor >

#pragma mark Public

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentSequentialExecutor)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentSequentialExecutor_initPackagePrivateWithJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentSequentialExecutor *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentSequentialExecutor *new_ComGoogleCommonUtilConcurrentSequentialExecutor_initPackagePrivateWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentSequentialExecutor *create_ComGoogleCommonUtilConcurrentSequentialExecutor_initPackagePrivateWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentSequentialExecutor)

#endif

#if !defined (ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor || defined(INCLUDE_ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState))
#define ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(jint, ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum) {
  ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum_IDLE = 0,
  ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum_QUEUING = 1,
  ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum_QUEUED = 2,
  ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum_RUNNING = 3,
};
#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_ORDINAL jint
#else
#define ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_ORDINAL ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum
#endif


@interface ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState : JavaLangEnum

#pragma mark Public

+ (ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_Enum)toNSEnum;

- (ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_ORDINAL)ordinal;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_values_[];

inline ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_get_IDLE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState, IDLE)

inline ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_get_QUEUING(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState, QUEUING)

inline ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_get_QUEUED(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState, QUEUED)

inline ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_get_RUNNING(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState, RUNNING)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_values(void);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState *ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_fromOrdinal(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentSequentialExecutor_WorkerRunningState)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentSequentialExecutor")
